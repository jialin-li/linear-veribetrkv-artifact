// LeafImpl.i.dfy
module LeafImpl {
  method CopyKey(k: KeyType.Key) returns (k2: KeyType.Key)
  {
    k2 := [] + k;
  }
  method repivotLeaf(k: ImplConstants, s: ImplVariables, ref: BT.G.Reference, node: Node)
    modifies s.Repr()
  {
    if s.frozenIndirectionTable != null {
      var b: bool := s.frozenIndirectionTable.HasEmptyLoc(ref);
      if b {
        print "giving up; repivotLeaf can't run because frozen isn't written";
        return;
      }
    }
    var pivot: Key := node.buckets[0 as uint64].GetMiddleKey();
    pivot := CopyKey(pivot);
    var pivots: seq<Key> := [pivot];
    var left: MutBucket, right: MutBucket := node.buckets[0 as uint64].SplitLeftRight(pivot);
    var buckets': seq<MutBucket> := [left, right];
    var newnode: Node := new Node(pivots, None, buckets');
    writeBookkeeping(k, s, ref, None);
    s.cache.Insert(ref, newnode);
  }
}