// BucketSuccessorLoopImpl.i.dfy
module BucketSuccessorLoopImpl {
  method GetSuccessorInBucketStack(buckets: seq<MutBucket>, maxToFind: uint64, start: UI.RangeStart, upTo: Option<Key>)
      returns (res: UI.SuccResultList)
    requires forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: buckets[i].Inv()
    requires |buckets| >= 1
    requires |buckets| < 18446744073709551616
    requires maxToFind >= 1
    ensures res == BucketSuccessorLoopModel.GetSuccessorInBucketStack(MutBucket.ISeq(buckets), maxToFind as int, start, upTo)
    decreases buckets, maxToFind, start, upTo
  {
    BucketSuccessorLoopModel.reveal_GetSuccessorInBucketStack();
    BucketSuccessorLoopModel.reveal_ProcessGenerator();
    var g: Generator := Generator.GenFromBucketStackWithLowerBound(buckets, start);
    var results: array?<UI.SuccResult> := new UI.SuccResult[maxToFind];
    var results_len: uint64 := 0;
    while true
      invariant g.Inv()
      invariant forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: buckets[i].Inv()
      invariant fresh(g.Repr)
      invariant results !in g.Repr
      invariant results !in g.ReadOnlyRepr
      invariant 0 <= results_len < maxToFind
      invariant BucketSuccessorLoopModel.GetSuccessorInBucketStack(MutBucket.ISeq(buckets), maxToFind as int, start, upTo) == BucketSuccessorLoopModel.ProcessGenerator(g.I(), maxToFind as int, upTo, results[..results_len])
      decreases BucketGeneratorModel.decreaser(g.I())
    {
      BucketGeneratorModel.lemmaDecreaserDecreases(g.I());
      ghost var old_results: seq<SuccResult> := results[..results_len];
      ghost var old_buckets: seq<Bucket> := MutBucket.ISeq(buckets);
      var next: BucketIteratorModel.IteratorOutput := g.GenLeft();
      var okay: bool := next.Next?;
      if okay && upTo.Some? {
        var c: int32 := cmp(next.key, upTo.value);
        if c >= 0 {
          okay := false;
        }
      }
      assert okay == (next.Next? && (upTo.Some? ==> Ord.lt(next.key, upTo.value)));
      if okay {
        var v: Value := Merge(next.msg, DefineDefault()).value;
        if v != DefaultValue() {
          results[results_len] := UI.SuccResult(next.key, v);
          results_len := results_len + 1;
          assert results[..results_len] == old_results + [UI.SuccResult(next.key, v)];
          assert results_len as int == |results[..results_len]|;
          if results_len < maxToFind {
            g.GenPop();
            assert MutBucket.ISeq(buckets) == old_buckets;
          } else {
            return UI.SuccResultList(results[..results_len], UI.EInclusive(next.key));
          }
        } else {
          g.GenPop();
          assert MutBucket.ISeq(buckets) == old_buckets;
        }
      } else {
        return UI.SuccResultList(results[..results_len], if upTo.Some? then UI.EExclusive(upTo.value) else UI.PositiveInf);
      }
    }
  }
}