// CommitterCommitModel.i.dfy
module CommitterCommitModel {
  function SyncReqs2to1Iterate(m: MutableMapModel.LinearHashMap<JC.SyncReqStatus>, it: MutableMapModel.Iterator<JC.SyncReqStatus>, m0: MutableMapModel.LinearHashMap<JC.SyncReqStatus>): (m': MutableMapModel.LinearHashMap<JC.SyncReqStatus>)
    requires MutableMapModel.Inv(m)
    requires MutableMapModel.WFIter(m, it)
    requires MutableMapModel.Inv(m0)
    requires m0.contents.Keys == it.s
    ensures MutableMapModel.Inv(m')
    decreases it.decreaser
  {
    if it.next.Done? then
      m0
    else
      MutableMapModel.LemmaIterIndexLtCount(m, it); MutableMapModel.CountBound(m); SyncReqs2to1Iterate(m, MutableMapModel.IterInc(m, it), MutableMapModel.Insert(m0, it.next.key, if it.next.value == JC.State2 then JC.State1 else it.next.value))
  }
  function {:opaque} {:fuel 0, 0} SyncReqs2to1(m: MutableMapModel.LinearHashMap<JC.SyncReqStatus>): (m': MutableMapModel.LinearHashMap<JC.SyncReqStatus>)
    requires MutableMapModel.Inv(m)
    ensures MutableMapModel.Inv(m')
    decreases m
  {
    SyncReqs2to1Iterate(m, MutableMapModel.IterStart(m), MutableMapModel.Constructor(128))
  }
  lemma SyncReqs2to1Correct(m: MutableMapModel.LinearHashMap<JC.SyncReqStatus>)
    requires MutableMapModel.Inv(m)
    ensures SyncReqs2to1(m).contents == JC.syncReqs2to1(m.contents)
    decreases m
  {
    reveal_SyncReqs2to1();
    ghost var it: Iterator<JC.SyncReqStatus> := MutableMapModel.IterStart(m);
    ghost var m0: LinearHashMap<JC.SyncReqStatus> := MutableMapModel.Constructor(128);
    while !it.next.Done?
      invariant MutableMapModel.Inv(m)
      invariant MutableMapModel.WFIter(m, it)
      invariant MutableMapModel.Inv(m0)
      invariant m0.contents.Keys == it.s
      invariant forall id: uint64 {:trigger m.contents[id]} {:trigger m0.contents[id]} {:trigger id in it.s} | id in it.s :: m0.contents[id] == if m.contents[id] == JC.State2 then JC.State1 else m.contents[id]
      invariant SyncReqs2to1(m) == SyncReqs2to1Iterate(m, it, m0)
      decreases it.decreaser
    {
      MutableMapModel.LemmaIterIndexLtCount(m, it);
      MutableMapModel.CountBound(m);
      m0 := MutableMapModel.Insert(m0, it.next.key, if it.next.value == JC.State2 then JC.State1 else it.next.value);
      it := MutableMapModel.IterInc(m, it);
    }
  }
  function SyncReqs3to2Iterate(m: MutableMapModel.LinearHashMap<JC.SyncReqStatus>, it: MutableMapModel.Iterator<JC.SyncReqStatus>, m0: MutableMapModel.LinearHashMap<JC.SyncReqStatus>): (m': MutableMapModel.LinearHashMap<JC.SyncReqStatus>)
    requires MutableMapModel.Inv(m)
    requires MutableMapModel.WFIter(m, it)
    requires MutableMapModel.Inv(m0)
    requires m0.contents.Keys == it.s
    ensures MutableMapModel.Inv(m')
    decreases it.decreaser
  {
    if it.next.Done? then
      m0
    else
      MutableMapModel.LemmaIterIndexLtCount(m, it); MutableMapModel.CountBound(m); SyncReqs3to2Iterate(m, MutableMapModel.IterInc(m, it), MutableMapModel.Insert(m0, it.next.key, if it.next.value == JC.State3 then JC.State2 else it.next.value))
  }
  function {:opaque} {:fuel 0, 0} SyncReqs3to2(m: MutableMapModel.LinearHashMap<JC.SyncReqStatus>): (m': MutableMapModel.LinearHashMap<JC.SyncReqStatus>)
    requires MutableMapModel.Inv(m)
    ensures MutableMapModel.Inv(m')
    decreases m
  {
    SyncReqs3to2Iterate(m, MutableMapModel.IterStart(m), MutableMapModel.Constructor(128))
  }
  lemma SyncReqs3to2Correct(m: MutableMapModel.LinearHashMap<JC.SyncReqStatus>)
    requires MutableMapModel.Inv(m)
    ensures SyncReqs3to2(m).contents == JC.syncReqs3to2(m.contents)
    decreases m
  {
    reveal_SyncReqs3to2();
    ghost var it: Iterator<JC.SyncReqStatus> := MutableMapModel.IterStart(m);
    ghost var m0: LinearHashMap<JC.SyncReqStatus> := MutableMapModel.Constructor(128);
    while !it.next.Done?
      invariant MutableMapModel.Inv(m)
      invariant MutableMapModel.WFIter(m, it)
      invariant MutableMapModel.Inv(m0)
      invariant m0.contents.Keys == it.s
      invariant forall id: uint64 {:trigger m.contents[id]} {:trigger m0.contents[id]} {:trigger id in it.s} | id in it.s :: m0.contents[id] == if m.contents[id] == JC.State3 then JC.State2 else m.contents[id]
      invariant SyncReqs3to2(m) == SyncReqs3to2Iterate(m, it, m0)
      decreases it.decreaser
    {
      MutableMapModel.LemmaIterIndexLtCount(m, it);
      MutableMapModel.CountBound(m);
      m0 := MutableMapModel.Insert(m0, it.next.key, if it.next.value == JC.State3 then JC.State2 else it.next.value);
      it := MutableMapModel.IterInc(m, it);
    }
  }
  function method start_pos_add(a: uint64, b: uint64): uint64
    requires 0 <= a <= NumJournalBlocks()
    requires 0 <= b <= NumJournalBlocks()
    decreases a, b
  {
    if a + b >= NumJournalBlocks() then
      a + b - NumJournalBlocks()
    else
      a + b
  }
  function {:opaque} {:fuel 0, 0} WriteOutJournal(k: Constants, cm: CM, io: IO): (res: (CM, IO))
    requires io.IOInit?
    requires CommitterModel.WF(cm)
    requires JournalistModel.I(cm.journalist).inMemoryJournalFrozen != [] || JournalistModel.I(cm.journalist).inMemoryJournal != []
    decreases k, cm, io
  {
    var writtenJournalLen: uint64 := JournalistModel.getWrittenJournalLen(cm.journalist);
    var doingFrozen: bool := JournalistModel.hasFrozenJournal(cm.journalist);
    var (journalist': JournalistModel, j: seq<byte>) := if doingFrozen then JournalistModel.packageFrozenJournal(cm.journalist) else JournalistModel.packageInMemoryJournal(cm.journalist);
    var start: uint64 := start_pos_add(cm.superblock.journalStart, writtenJournalLen);
    var len: uint64 := |j| as uint64 / 4096;
    var contiguous: bool := start + len <= NumJournalBlocks();
    var io': IO := if contiguous then IOReqWrite(io.id, D.ReqWrite(JournalPoint(start), j)) else var cut: uint64 := (NumJournalBlocks() - start) * 4096; IOReqWrite2(io.id, io.id2, D.ReqWrite(JournalPoint(start), j[..cut]), D.ReqWrite(JournalPoint(0), j[cut..]));
    var outstandingJournalWrites': set<JC.ReqId> := if contiguous then cm.outstandingJournalWrites + {io.id} else cm.outstandingJournalWrites + {io.id, io.id2};
    var frozenJournalPosition': uint64 := if doingFrozen then JournalistModel.getWrittenJournalLen(journalist') else cm.frozenJournalPosition;
    var syncReqs': MutableMapModel.LinearHashMap<JC.SyncReqStatus> := if doingFrozen then cm.syncReqs else SyncReqs3to2(cm.syncReqs);
    var cm': CM := cm.(outstandingJournalWrites := outstandingJournalWrites').(journalist := journalist').(frozenJournalPosition := frozenJournalPosition').(syncReqs := syncReqs');
    (cm', io')
  }
  lemma WriteOutJournalCorrect(k: Constants, cm: CM, io: IO)
    requires WriteOutJournal.requires(k, cm, io)
    requires cm.superblockWrite.None?
    ensures var (cm': CM, io': IO) := WriteOutJournal(k, cm, io); CommitterModel.WF(cm') && ValidDiskOp(diskOp(io')) && IDiskOp(diskOp(io')).bdop.NoDiskOp? && JC.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp)
    decreases k, cm, io
  {
    var (cm': CM, io': IO) := WriteOutJournal(k, cm, io);
    reveal_WriteOutJournal();
    ghost var writtenJournalLen: uint64 := JournalistModel.getWrittenJournalLen(cm.journalist);
    ghost var doingFrozen: bool := JournalistModel.hasFrozenJournal(cm.journalist);
    var (journalist': JournalistModel, j: seq<byte>) := if doingFrozen then JournalistModel.packageFrozenJournal(cm.journalist) else JournalistModel.packageInMemoryJournal(cm.journalist);
    ghost var start: uint64 := start_pos_add(cm.superblock.journalStart, writtenJournalLen);
    ghost var jr: seq<JournalBlock> := JournalRangeOfByteSeq(j).value;
    ghost var len: uint64 := |j| as uint64 / 4096;
    ghost var contiguous: bool := start + len <= NumJournalBlocks();
    assert |jr| == len as int;
    if contiguous {
      assert LocOfReqWrite(diskOp(io').reqWrite) == JournalRangeLocation(start, len);
      assert ValidDiskOp(diskOp(io'));
    } else {
      assert LocOfReqWrite(diskOp(io').reqWrite1) == JournalRangeLocation(start, NumJournalBlocks() - start);
      assert LocOfReqWrite(diskOp(io').reqWrite2) == JournalRangeLocation(0, len - (NumJournalBlocks() - start));
      JournalBytesSplit(j, len as int, NumJournalBlocks() as int - start as int);
      assert ValidDiskOp(diskOp(io'));
    }
    SyncReqs3to2Correct(cm.syncReqs);
    assert JC.WriteBackJournalReq(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp, jr);
    assert JC.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp, JC.WriteBackJournalReqStep(jr));
  }
  predicate writeOutSuperblockAdvanceLog(k: Constants, cm: CM, io: IO, cm': CM, io': IO)
    requires io.IOInit?
    requires CommitterModel.WF(cm)
    decreases k, cm, io, cm', io'
  {
    var writtenJournalLen: uint64 := JournalistModel.getWrittenJournalLen(cm.journalist);
    var newSuperblock: Superblock := SectorType.Superblock(JC.IncrementSuperblockCounter(cm.superblock.counter), cm.superblock.journalStart, writtenJournalLen, cm.superblock.indirectionTableLoc);
    var loc: Location := if cm.whichSuperblock == 0 then Superblock2Location() else Superblock1Location();
    cm'.superblockWrite.Some? &&
    var id: JC.ReqId := cm'.superblockWrite.value; RequestWrite(io, loc, SectorSuperblock(newSuperblock), id, io') && cm' == cm.(newSuperblock := Some(newSuperblock)).(superblockWrite := Some(id)).(commitStatus := JC.CommitAdvanceLog)
  }
  lemma writeOutSuperblockAdvanceLogCorrect(k: Constants, cm: CM, io: IO, cm': CM, io': IO)
    requires io.IOInit?
    requires CommitterModel.WF(cm)
    requires writeOutSuperblockAdvanceLog(k, cm, io, cm', io')
    requires cm.status == StatusReady
    requires cm.commitStatus.CommitNone?
    requires cm.outstandingJournalWrites == {}
    requires JournalistModel.I(cm.journalist).inMemoryJournalFrozen == []
    ensures CommitterModel.WF(cm')
    ensures ValidDiskOp(diskOp(io'))
    ensures IDiskOp(diskOp(io')).bdop.NoDiskOp?
    ensures JC.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp)
    decreases k, cm, io, cm', io'
  {
    ghost var writtenJournalLen: uint64 := JournalistModel.getWrittenJournalLen(cm.journalist);
    ghost var newSuperblock: Superblock := SectorType.Superblock(JC.IncrementSuperblockCounter(cm.superblock.counter), cm.superblock.journalStart, writtenJournalLen, cm.superblock.indirectionTableLoc);
    assert JC.WFSuperblock(newSuperblock);
    ghost var loc: Location := if cm.whichSuperblock == 0 then Superblock2Location() else Superblock1Location();
    ghost var id: JC.ReqId := cm'.superblockWrite.value;
    RequestWriteCorrect(io, loc, SectorSuperblock(newSuperblock), id, io');
    assert ValidDiskOp(diskOp(io'));
    assert JC.WriteBackSuperblockReq_AdvanceLog(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp);
    assert JC.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp, JC.WriteBackSuperblockReq_AdvanceLog_Step);
  }
  predicate {:opaque} {:fuel 0, 0} writeOutSuperblockAdvanceLocation(k: Constants, cm: CM, io: IO, cm': CM, io': IO)
    requires io.IOInit?
    requires CommitterModel.Inv(cm)
    requires cm.status == StatusReady
    requires cm.frozenLoc.Some?
    decreases k, cm, io, cm', io'
  {
    var writtenJournalLen: uint64 := JournalistModel.getWrittenJournalLen(cm.journalist);
    var newSuperblock: Superblock := SectorType.Superblock(JC.IncrementSuperblockCounter(cm.superblock.counter), start_pos_add(cm.superblock.journalStart, cm.frozenJournalPosition), writtenJournalLen - cm.frozenJournalPosition, cm.frozenLoc.value);
    var loc: Location := if cm.whichSuperblock == 0 then Superblock2Location() else Superblock1Location();
    cm'.superblockWrite.Some? &&
    var id: JC.ReqId := cm'.superblockWrite.value; RequestWrite(io, loc, SectorSuperblock(newSuperblock), id, io') && cm' == cm.(newSuperblock := Some(newSuperblock)).(superblockWrite := Some(id)).(commitStatus := JC.CommitAdvanceLocation)
  }
  lemma writeOutSuperblockAdvanceLocationCorrect(k: Constants, cm: CM, io: IO, cm': CM, io': IO)
    requires io.IOInit?
    requires CommitterModel.Inv(cm)
    requires cm.status == StatusReady
    requires cm.commitStatus.CommitNone?
    requires cm.outstandingJournalWrites == {}
    requires cm.frozenLoc.Some?
    requires writeOutSuperblockAdvanceLocation(k, cm, io, cm', io')
    requires JournalistModel.I(cm.journalist).inMemoryJournalFrozen == []
    ensures CommitterModel.WF(cm')
    ensures ValidDiskOp(diskOp(io'))
    ensures IDiskOp(diskOp(io')).bdop.NoDiskOp?
    ensures JC.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp)
    decreases k, cm, io, cm', io'
  {
    reveal_writeOutSuperblockAdvanceLocation();
    ghost var writtenJournalLen: uint64 := JournalistModel.getWrittenJournalLen(cm.journalist);
    ghost var newSuperblock: Superblock := SectorType.Superblock(JC.IncrementSuperblockCounter(cm.superblock.counter), start_pos_add(cm.superblock.journalStart, cm.frozenJournalPosition) as uint64, (writtenJournalLen - cm.frozenJournalPosition) as uint64, cm.frozenLoc.value);
    assert JC.WFSuperblock(newSuperblock);
    ghost var loc: Location := if cm.whichSuperblock == 0 then Superblock2Location() else Superblock1Location();
    ghost var id: JC.ReqId := cm'.superblockWrite.value;
    RequestWriteCorrect(io, loc, SectorSuperblock(newSuperblock), id, io');
    assert ValidDiskOp(diskOp(io'));
    assert JC.WriteBackSuperblockReq_AdvanceLocation(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp);
    assert JC.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp, JC.WriteBackSuperblockReq_AdvanceLocation_Step);
  }
  function {:opaque} {:fuel 0, 0} freeze(k: Constants, cm: CM): (cm': CM)
    requires CommitterModel.WF(cm)
    decreases k, cm
  {
    var writtenJournalLen: uint64 := JournalistModel.getWrittenJournalLen(cm.journalist);
    cm.(frozenLoc := None).(journalist := JournalistModel.freeze(cm.journalist)).(frozenJournalPosition := writtenJournalLen).(isFrozen := true).(syncReqs := SyncReqs3to2(cm.syncReqs))
  }
  lemma freezeCorrect(k: Constants, cm: CM)
    requires CommitterModel.WF(cm)
    requires cm.superblockWrite.None?
    requires cm.status == StatusReady
    requires cm.frozenLoc != Some(cm.superblock.indirectionTableLoc)
    requires JournalistModel.I(cm.journalist).replayJournal == []
    ensures var cm': CM := freeze(k, cm); CommitterModel.WF(cm') && JC.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, FreezeOp)
    decreases k, cm
  {
    reveal_freeze();
    ghost var cm': CM := freeze(k, cm);
    SyncReqs3to2Correct(cm.syncReqs);
    assert JC.Freeze(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, FreezeOp);
    assert JC.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, FreezeOp, JC.FreezeStep);
  }
  function {:opaque} {:fuel 0, 0} receiveFrozenLoc(k: Constants, cm: CM, loc: Location): (cm': CM)
    decreases k, cm, loc
  {
    cm.(frozenLoc := Some(loc))
  }
  lemma receiveFrozenLocCorrect(k: Constants, cm: CM, loc: Location)
    requires CommitterModel.WF(cm)
    requires cm.status == StatusReady
    requires cm.isFrozen
    requires !cm.frozenLoc.Some?
    requires ValidIndirectionTableLocation(loc)
    ensures var cm': CM := receiveFrozenLoc(k, cm, loc); CommitterModel.WF(cm') && JC.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, SendFrozenLocOp(loc))
    decreases k, cm, loc
  {
    reveal_receiveFrozenLoc();
    ghost var cm': CM := receiveFrozenLoc(k, cm, loc);
    assert JC.ReceiveFrozenLoc(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, SendFrozenLocOp(loc));
    assert JC.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, SendFrozenLocOp(loc), JC.ReceiveFrozenLocStep);
  }
  function {:opaque} {:fuel 0, 0} freeId<A>(syncReqs: MutableMapModel.LinearHashMap<A>): (id: uint64)
    requires MutableMapModel.Inv(syncReqs)
    ensures id != 0 ==> id !in syncReqs.contents
    decreases syncReqs
  {
    var maxId: uint64 := MutableMapModel.MaxKey(syncReqs);
    if maxId == 18446744073709551615 then
      0
    else
      maxId + 1
  }
  function pushSync(k: Constants, cm: CM): (CM, uint64)
    requires CommitterModel.WF(cm)
    decreases k, cm
  {
    var id: uint64 := freeId(cm.syncReqs);
    if id == 0 || cm.syncReqs.count as int >= 18446744073709551616 / 8 then
      (cm, 0)
    else
      var cm': CM := cm.(syncReqs := MutableMapModel.Insert(cm.syncReqs, id, JC.State3)); (cm', id)
  }
  lemma pushSyncCorrect(k: Constants, cm: CM)
    requires CommitterModel.WF(cm)
    ensures var (cm': CM, id: uint64) := pushSync(k, cm); CommitterModel.WF(cm') && JC.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, if id == 0 then JournalInternalOp else PushSyncOp(id as int))
    decreases k, cm
  {
    var (cm': CM, id: uint64) := pushSync(k, cm);
    if id == 0 || cm.syncReqs.count as int >= 18446744073709551616 / 8 {
      assert JC.NoOp(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, JournalInternalOp);
      assert JC.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, JournalInternalOp, JC.NoOpStep);
    } else {
      assert JC.PushSyncReq(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, PushSyncOp(id as int), id);
      assert JC.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, PushSyncOp(id as int), JC.PushSyncReqStep(id));
    }
  }
  function {:opaque} {:fuel 0, 0} popSync(k: Constants, cm: CM, id: uint64): (cm': CM)
    requires CommitterModel.WF(cm)
    decreases k, cm, id
  {
    cm.(syncReqs := MutableMapModel.Remove(cm.syncReqs, id))
  }
  lemma popSyncCorrect(k: Constants, cm: CM, id: uint64)
    requires CommitterModel.WF(cm)
    requires id in cm.syncReqs.contents
    requires cm.syncReqs.contents[id] == JC.State1
    ensures var cm': CM := popSync(k, cm, id); CommitterModel.WF(cm') && JC.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, PopSyncOp(id as int))
    decreases k, cm, id
  {
    ghost var cm': CM := popSync(k, cm, id);
    reveal_popSync();
    assert JC.PopSyncReq(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, PopSyncOp(id as int), id);
    assert JC.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, PopSyncOp(id as int), JC.PopSyncReqStep(id));
  }
  predicate {:opaque} {:fuel 0, 0} tryAdvanceLog(k: Constants, cm: CM, io: IO, cm': CM, io': IO)
    requires CommitterModel.WF(cm)
    requires io.IOInit?
    decreases k, cm, io, cm', io'
  {
    var hasFrozen: bool := JournalistModel.hasFrozenJournal(cm.journalist);
    var hasInMem: bool := JournalistModel.hasInMemoryJournal(cm.journalist);
    if cm.superblockWrite.None? then
      if hasFrozen || hasInMem then
        (cm', io') == WriteOutJournal(k, cm, io)
      else if cm.outstandingJournalWrites == {} then
        writeOutSuperblockAdvanceLog(k, cm, io, cm', io')
      else
        cm' == cm && io' == io
    else
      cm' == cm && io' == io
  }
  lemma tryAdvanceLogCorrect(k: Constants, cm: CM, io: IO, cm': CM, io': IO)
    requires CommitterModel.Inv(cm)
    requires io.IOInit?
    requires cm.status.StatusReady?
    requires tryAdvanceLog(k, cm, io, cm', io')
    ensures CommitterModel.WF(cm')
    ensures ValidDiskOp(diskOp(io'))
    ensures IDiskOp(diskOp(io')).bdop.NoDiskOp?
    ensures JC.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp)
    decreases k, cm, io, cm', io'
  {
    reveal_tryAdvanceLog();
    ghost var hasFrozen: bool := JournalistModel.hasFrozenJournal(cm.journalist);
    ghost var hasInMem: bool := JournalistModel.hasInMemoryJournal(cm.journalist);
    if cm.superblockWrite.None? {
      if hasFrozen || hasInMem {
        WriteOutJournalCorrect(k, cm, io);
      } else if cm.outstandingJournalWrites == {} {
        writeOutSuperblockAdvanceLogCorrect(k, cm, io, cm', io');
      } else {
        assert JC.NoOp(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, JournalInternalOp);
        assert JC.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, JournalInternalOp, JC.NoOpStep);
      }
    } else {
      assert JC.NoOp(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, JournalInternalOp);
      assert JC.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, JournalInternalOp, JC.NoOpStep);
    }
  }
  predicate {:opaque} {:fuel 0, 0} tryAdvanceLocation(k: Constants, cm: CM, io: IO, cm': CM, io': IO)
    requires CommitterModel.Inv(cm)
    requires io.IOInit?
    requires cm.status == StatusReady
    requires cm.frozenLoc.Some?
    decreases k, cm, io, cm', io'
  {
    var hasFrozen: bool := JournalistModel.hasFrozenJournal(cm.journalist);
    var hasInMem: bool := JournalistModel.hasInMemoryJournal(cm.journalist);
    if cm.superblockWrite.None? then
      if hasFrozen || hasInMem then
        (cm', io') == WriteOutJournal(k, cm, io)
      else if cm.outstandingJournalWrites == {} then
        writeOutSuperblockAdvanceLocation(k, cm, io, cm', io')
      else
        cm' == cm && io' == io
    else
      cm' == cm && io' == io
  }
  lemma tryAdvanceLocationCorrect(k: Constants, cm: CM, io: IO, cm': CM, io': IO)
    requires CommitterModel.Inv(cm)
    requires io.IOInit?
    requires cm.status.StatusReady?
    requires cm.frozenLoc.Some?
    requires tryAdvanceLocation(k, cm, io, cm', io')
    ensures CommitterModel.WF(cm')
    ensures ValidDiskOp(diskOp(io'))
    ensures IDiskOp(diskOp(io')).bdop.NoDiskOp?
    ensures JC.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp)
    decreases k, cm, io, cm', io'
  {
    reveal_tryAdvanceLocation();
    ghost var hasFrozen: bool := JournalistModel.hasFrozenJournal(cm.journalist);
    ghost var hasInMem: bool := JournalistModel.hasInMemoryJournal(cm.journalist);
    if cm.superblockWrite.None? {
      if hasFrozen || hasInMem {
        WriteOutJournalCorrect(k, cm, io);
      } else if cm.outstandingJournalWrites == {} {
        writeOutSuperblockAdvanceLocationCorrect(k, cm, io, cm', io');
      } else {
        assert JC.NoOp(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, JournalInternalOp);
        assert JC.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, JournalInternalOp, JC.NoOpStep);
      }
    } else {
      assert JC.NoOp(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, JournalInternalOp);
      assert JC.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, JournalInternalOp, JC.NoOpStep);
    }
  }
  function {:opaque} {:fuel 0, 0} writeBackSuperblockResp(k: Constants, cm: CommitterModel.CM): CommitterModel.CM
    requires CommitterModel.Inv(cm)
    decreases k, cm
  {
    if cm.status.StatusReady? && cm.commitStatus.CommitAdvanceLocation? then
      cm.(superblockWrite := None).(superblock := cm.newSuperblock.value).(newSuperblock := None).(whichSuperblock := if cm.whichSuperblock == 0 then 1 else 0).(syncReqs := SyncReqs2to1(cm.syncReqs)).(journalist := JournalistModel.updateWrittenJournalLen(cm.journalist, JournalistModel.getWrittenJournalLen(cm.journalist) - cm.frozenJournalPosition)).(frozenJournalPosition := 0).(frozenLoc := None).(isFrozen := false).(commitStatus := JC.CommitNone)
    else if cm.status.StatusReady? && cm.commitStatus.CommitAdvanceLog? then
      cm.(superblockWrite := None).(superblock := cm.newSuperblock.value).(newSuperblock := None).(whichSuperblock := if cm.whichSuperblock == 0 then 1 else 0).(syncReqs := SyncReqs2to1(cm.syncReqs)).(commitStatus := JC.CommitNone)
    else
      cm
  }
  lemma writeBackSuperblockRespCorrect(k: Constants, cm: CommitterModel.CM, io: IO)
    requires CommitterModel.Inv(cm)
    requires ValidDiskOp(diskOp(io))
    requires IDiskOp(diskOp(io)).jdop.RespWriteSuperblockOp?
    requires Some(io.id) == cm.superblockWrite
    ensures var cm': CommitterModel.CM := writeBackSuperblockResp(k, cm); CommitterModel.WF(cm') && JC.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, if cm.status.StatusReady? && cm.commitStatus.CommitAdvanceLocation? then CleanUpOp else JournalInternalOp)
    decreases k, cm, io
  {
    reveal_writeBackSuperblockResp();
    ghost var cm': CommitterModel.CM := writeBackSuperblockResp(k, cm);
    SyncReqs2to1Correct(cm.syncReqs);
    if cm.status.StatusReady? && cm.commitStatus.CommitAdvanceLocation? {
      assert JC.WriteBackSuperblockResp(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, CleanUpOp);
      assert JC.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, CleanUpOp, JC.WriteBackSuperblockRespStep);
    } else if cm.status.StatusReady? && cm.commitStatus.CommitAdvanceLog? {
      assert JC.WriteBackSuperblockResp(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, JournalInternalOp);
      assert JC.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, JournalInternalOp, JC.WriteBackSuperblockRespStep);
    } else {
      assert JC.NoOp(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, JournalInternalOp);
      assert JC.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, JournalInternalOp, JC.NoOpStep);
    }
  }
}