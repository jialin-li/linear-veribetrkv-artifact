// FlushModel.i.dfy
module FlushModel {
  function flush(k: Constants, s: BCVariables, parentref: BT.G.Reference, slot: int, childref: BT.G.Reference, child: Node): BCVariables
    requires BCInv(k, s)
    requires s.Ready?
    requires parentref in s.ephemeralIndirectionTable.graph
    requires parentref in s.cache
    requires s.cache[parentref].children.Some?
    requires 0 <= slot < |s.cache[parentref].children.value|
    requires s.cache[parentref].children.value[slot] == childref
    requires childref in s.ephemeralIndirectionTable.graph
    requires childref in s.cache
    requires s.cache[childref] == child
    requires |s.ephemeralIndirectionTable.graph| <= IndirectionTableModel.MaxSize() - 2
    decreases k, s, parentref, slot, childref, child
  {
    if s.frozenIndirectionTable.Some? && IndirectionTableModel.HasEmptyLoc(s.frozenIndirectionTable.value, parentref) then
      s
    else
      var parent: Node := s.cache[parentref]; WeightBucketLeBucketList(parent.buckets, slot); lemmaChildrenConditionsOfNode(k, s, childref); lemmaChildrenConditionsOfNode(k, s, parentref); var partialFlushResult(newparentBucket: Bucket, newbuckets: seq<Bucket>) := BucketModel.partialFlush(parent.buckets[slot], child.pivotTable, child.buckets); var newchild: Node := child.(buckets := newbuckets); var (s2: BCVariables, newchildref: Option<Reference>) := allocBookkeeping(k, s, newchild.children); lemmaChildrenConditionsUpdateOfAllocBookkeeping(k, s, newchild.children, parent.children.value, slot); if newchildref.None? then s2 else var newparent: Node := Node(parent.pivotTable, Some(parent.children.value[slot := newchildref.value]), parent.buckets[slot := newparentBucket]); var s2: BCVariables := writeBookkeeping(k, s2, parentref, newparent.children); var s': BCVariables := s2.(cache := s2.cache[newchildref.value := newchild][parentref := newparent]); s'
  }
  lemma flushCorrect(k: Constants, s: BCVariables, parentref: BT.G.Reference, slot: int, childref: BT.G.Reference, child: Node)
    requires flush.requires(k, s, parentref, slot, childref, child)
    requires TotalCacheSize(s) <= MaxCacheSize() - 1
    ensures var s': BCVariables := flush(k, s, parentref, slot, childref, child); WFBCVars(s') && betree_next(k, IBlockCache(s), IBlockCache(s'))
    decreases k, s, parentref, slot, childref, child
  {
    ghost var s': BCVariables := flush(k, s, parentref, slot, childref, child);
    if s.frozenIndirectionTable.Some? && IndirectionTableModel.HasEmptyLoc(s.frozenIndirectionTable.value, parentref) {
      assert noop(k, IBlockCache(s), IBlockCache(s));
    } else {
      ghost var parent: Node := s.cache[parentref];
      WeightBucketLeBucketList(parent.buckets, slot);
      lemmaChildrenConditionsOfNode(k, s, childref);
      lemmaChildrenConditionsOfNode(k, s, parentref);
      var partialFlushResult(newparentBucket: Bucket, newbuckets: seq<Bucket>) := BucketModel.partialFlush(parent.buckets[slot], child.pivotTable, child.buckets);
      ghost var flushedKeys: set<Key>;
      if BucketWellMarshalled(parent.buckets[slot]) && BucketListWellMarshalled(child.buckets) && WFBucketListProper(child.buckets, child.pivotTable) {
        flushedKeys := BucketModel.partialFlushCorrect(parent.buckets[slot], child.pivotTable, child.buckets);
      }
      BucketModel.partialFlushWeightBound(parent.buckets[slot], child.pivotTable, child.buckets);
      WeightBucketListShrinkEntry(parent.buckets, slot, newparentBucket);
      assert childref in s.cache;
      assert childref in s.ephemeralIndirectionTable.graph;
      assert child == s.cache[childref];
      assert parentref in s.cache;
      assert parentref in s.ephemeralIndirectionTable.graph;
      assert parent == s.cache[parentref];
      ghost var newchild: Node := child.(buckets := newbuckets);
      var (s2: BCVariables, newchildref: Option<Reference>) := allocWithNode(k, s, newchild);
      reveal_allocBookkeeping();
      if newchildref.None? {
        assert noop(k, IBlockCache(s), IBlockCache(s2));
      } else {
        ghost var newparent: Node := Node(parent.pivotTable, Some(parent.children.value[slot := newchildref.value]), parent.buckets[slot := newparentBucket]);
        reveal_BucketComplement();
        ghost var s3: BCVariables := writeWithNode(k, s2, parentref, newparent);
        reveal_writeBookkeeping();
        assert s3 == s';
        forall ref: NativeTypes.uint64 {:trigger ref in IIndirectionTable(s2.ephemeralIndirectionTable).graph} {:trigger ref in BT.G.Successors(INode(newparent))} | ref in BT.G.Successors(INode(newparent))
          ensures ref in IIndirectionTable(s2.ephemeralIndirectionTable).graph
        {
          if ref == newchildref.value {
          } else {
            assert ref in BT.G.Successors(INode(parent));
            lemmaChildInGraph(k, s, parentref, ref);
            assert ref in IIndirectionTable(s2.ephemeralIndirectionTable).graph;
          }
        }
        assert BC.BlockPointsToValidReferences(INode(newparent), IIndirectionTable(s2.ephemeralIndirectionTable).graph);
        forall ref: NativeTypes.uint64 {:trigger ref in IIndirectionTable(s.ephemeralIndirectionTable).graph} {:trigger ref in BT.G.Successors(INode(newchild))} | ref in BT.G.Successors(INode(newchild))
          ensures ref in IIndirectionTable(s.ephemeralIndirectionTable).graph
        {
          lemmaChildInGraph(k, s, childref, ref);
        }
        WeightBucketListClearEntry(parent.buckets, slot);
        allocCorrect(k, s, newchild);
        writeCorrect(k, s2, parentref, newparent);
        ghost var flushStep: NodeFlush := BT.NodeFlush(parentref, INode(parent), childref, INode(child), newchildref.value, INode(newchild), slot, flushedKeys, INode(newparent).buckets[slot], INode(newchild).buckets);
        assert BT.ValidFlush(flushStep);
        ghost var step: BetreeStep := BT.BetreeFlush(flushStep);
        assert INode(newparent) == BT.FlushOps(flushStep)[1].node;
        assert BC.Alloc(Ik(k).bc, IBlockCache(s), IBlockCache(s2), newchildref.value, INode(newchild));
        assert BC.Dirty(Ik(k).bc, IBlockCache(s2), IBlockCache(s'), parentref, INode(newparent));
        BC.MakeTransaction2(Ik(k).bc, IBlockCache(s), IBlockCache(s2), IBlockCache(s'), BT.BetreeStepOps(step));
        assert BBC.BetreeMove(Ik(k).bc, IBlockCache(s), IBlockCache(s'), BlockDisk.NoDiskOp, AdvanceOp(UI.NoOp, true), step);
        assert stepsBetree(k, IBlockCache(s), IBlockCache(s'), AdvanceOp(UI.NoOp, true), step);
        assert stepsBetree(k, IBlockCache(s), IBlockCache(s'), AdvanceOp(UI.NoOp, true), step);
      }
    }
  }
}