// GrowModel.i.dfy
module GrowModel {
  function {:opaque} {:fuel 0, 0} grow(k: Constants, s: BCVariables): BCVariables
    requires BCInv(k, s)
    requires s.Ready?
    requires BT.G.Root() in s.cache
    requires |s.ephemeralIndirectionTable.graph| <= IndirectionTableModel.MaxSize() - 2
    decreases k, s
  {
    lemmaChildrenConditionsOfNode(k, s, BT.G.Root());
    if s.frozenIndirectionTable.Some? && IndirectionTableModel.HasEmptyLoc(s.frozenIndirectionTable.value, BT.G.Root()) then
      s
    else
      var oldroot: Node := s.cache[BT.G.Root()]; var (s1: BCVariables, newref: Option<Reference>) := allocBookkeeping(k, s, oldroot.children); lemmaChildrenConditionsSingleOfAllocBookkeeping(k, s, oldroot.children); match newref { case None => s1 case Some(_mcc#0: NativeTypes.uint64) => var newref: NativeTypes.uint64 := _mcc#0; var newroot: Node := Node([], Some([newref]), [B(map[])]); var s2: BCVariables := writeBookkeeping(k, s1, BT.G.Root(), newroot.children); var s': BCVariables := s2.(cache := s2.cache[newref := oldroot][BT.G.Root() := newroot]); s' }
  }
  lemma growCorrect(k: Constants, s: BCVariables)
    requires BCInv(k, s)
    requires s.Ready?
    requires BT.G.Root() in s.cache
    requires TotalCacheSize(s) <= MaxCacheSize() - 1
    requires |s.ephemeralIndirectionTable.graph| <= IndirectionTableModel.MaxSize() - 2
    ensures var s': BCVariables := grow(k, s); WFBCVars(s') && betree_next(k, IBlockCache(s), IBlockCache(s'))
    decreases k, s
  {
    reveal_grow();
    ghost var s': BCVariables := grow(k, s);
    lemmaChildrenConditionsOfNode(k, s, BT.G.Root());
    if s.frozenIndirectionTable.Some? && IndirectionTableModel.HasEmptyLoc(s.frozenIndirectionTable.value, BT.G.Root()) {
      assert noop(k, IBlockCache(s), IBlockCache(s));
      return;
    }
    ghost var oldroot: Node := s.cache[BT.G.Root()];
    var (s1: BCVariables, newref: Option<Reference>) := allocWithNode(k, s, oldroot);
    reveal_allocBookkeeping();
    reveal_writeBookkeeping();
    match newref {
      case None =>
        {
          assert noop(k, IBlockCache(s), IBlockCache(s1));
        }
      case Some(newref) =>
        {
          var newroot := Node([], Some([newref]), [B(map[])]);
          WeightBucketListOneEmpty();
          assert BT.G.Root() in s.cache;
          assert BT.G.Root() in ICache(s.cache);
          assert BT.G.Root() in ICache(s1.cache);
          assert BT.G.Root() in s1.cache;
          var s2 := writeWithNode(k, s1, BT.G.Root(), newroot);
          assert s2 == s';
          allocCorrect(k, s, oldroot);
          writeCorrect(k, s1, BT.G.Root(), newroot);
          var growth := BT.RootGrowth(INode(oldroot), newref);
          assert INode(newroot) == BT.G.Node([], Some([growth.newchildref]), [B(map[])]);
          var step := BT.BetreeGrow(growth);
          BC.MakeTransaction2(Ik(k).bc, IBlockCache(s), IBlockCache(s1), IBlockCache(s'), BT.BetreeStepOps(step));
          assert BBC.BetreeMove(Ik(k).bc, IBlockCache(s), IBlockCache(s'), BlockDisk.NoDiskOp, AdvanceOp(UI.NoOp, true), step);
          assert stepsBetree(k, IBlockCache(s), IBlockCache(s'), AdvanceOp(UI.NoOp, true), step);
        }
    }
  }
}