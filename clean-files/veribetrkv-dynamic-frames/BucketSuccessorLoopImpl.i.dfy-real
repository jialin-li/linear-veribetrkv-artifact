// BucketSuccessorLoopImpl.i.dfy
module BucketSuccessorLoopImpl {
  method GetSuccessorInBucketStack(buckets: seq<MutBucket>, maxToFind: uint64, start: UI.RangeStart, upTo: Option<Key>)
      returns (res: UI.SuccResultList)
  {
    var g: Generator := Generator.GenFromBucketStackWithLowerBound(buckets, start);
    var results: array?<UI.SuccResult> := new UI.SuccResult[maxToFind];
    var results_len: uint64 := 0;
    while true
    {
      var next: BucketIteratorModel.IteratorOutput := g.GenLeft();
      var okay: bool := next.Next?;
      if okay && upTo.Some? {
        var c: int32 := cmp(next.key, upTo.value);
        if c >= 0 {
          okay := false;
        }
      }
      if okay {
        var v: Value := Merge(next.msg, DefineDefault()).value;
        if v != DefaultValue() {
          results[results_len] := UI.SuccResult(next.key, v);
          results_len := results_len + 1;
          if results_len < maxToFind {
            g.GenPop();
          } else {
            return UI.SuccResultList(results[..results_len], UI.EInclusive(next.key));
          }
        } else {
          g.GenPop();
        }
      } else {
        return UI.SuccResultList(results[..results_len], if upTo.Some? then UI.EExclusive(upTo.value) else UI.PositiveInf);
      }
    }
  }
}