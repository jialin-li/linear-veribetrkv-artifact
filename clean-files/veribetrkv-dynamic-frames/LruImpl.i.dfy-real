// LruImpl.i.dfy
module LruImpl {
  class Node {
    var prev: Node?
    var next: Node?
    var value: uint64
    constructor (p: Node?, n: Node?, v: uint64)
    {
      prev := p;
      next := n;
      value := v;
    }
  }
  class LruImplQueue {
    ghost var Queue: LruQueue
    ghost var Repr: set<object>
    var nodemap: MutableMap.ResizingHashMap<Node>
    var head_node: Node?
    var tail_node: Node?
    constructor ()
    {
      var m: MutableMap.ResizingHashMap<Node> := new MutableMap.ResizingHashMap<Node>(128);
      nodemap := m;
      head_node := null;
      tail_node := null;
    }
    method Remove(x: uint64)
      modifies this, this.Repr
    {
      var node: Option<Node> := nodemap.RemoveAndGet(x);
      if node.Some? {
        var prev: Node? := node.value.prev;
        var next: Node? := node.value.next;
        if prev == null {
          head_node := next;
        } else {
          prev.next := next;
        }
        if next == null {
          tail_node := prev;
        } else {
          next.prev := prev;
        }
      } else 
    }
    method Use(x: uint64)
      modifies this, this.Repr
    {
      var node: Option<Node> := nodemap.Get(x);
      if node.Some? {
        var prev: Node? := node.value.prev;
        var next: Node? := node.value.next;
        if next != null {
          if prev == null {
            head_node := next;
          } else {
            prev.next := next;
          }
          next.prev := prev;
          node.value.prev := tail_node;
          node.value.next := null;
          if tail_node != null {
            tail_node.next := node.value;
          } else {
            head_node := node.value;
          }
          tail_node := node.value;
        } else 
      } else {
        var newnode: Node := new Node(tail_node, null, x);
        if tail_node != null {
          tail_node.next := newnode;
        } else {
          head_node := newnode;
        }
        tail_node := newnode;
        nodemap.Insert(x, newnode);
      }
    }
    method Next() returns (x: uint64)
    {
      x := head_node.value;
    }
    method NextOpt() returns (x: Option<uint64>)
    {
      if head_node != null {
        x := Some(head_node.value);
      } else {
        x := None;
      }
    }
    method Count() returns (count: uint64)
    {
      if this == null {
        count := 0;
        return;
      }
      var ptr: Node? := head_node;
      count := 0;
      while ptr != null
      {
        count := count + 1;
        ptr := ptr.next;
      }
    }
    method DebugAccumulate() returns (acc: DebugAccumulator.DebugAccumulator)
    {
      var nodeCount: uint64 := Count();
      var r: DebugAccumulator.AccRec := new DebugAccumulator.AccRec(nodeCount, "Node");
      acc := DebugAccumulator.AccPut(acc, "t", r);
    }
  }
}