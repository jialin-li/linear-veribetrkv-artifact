// DeallocImpl.i.dfy
module DeallocImpl {
  method Dealloc(k: ImplConstants, s: ImplVariables, io: DiskIOHandler, ref: BT.G.Reference)
    modifies io, s.Repr()
  {
    if s.frozenIndirectionTable != null {
      var b: bool := s.frozenIndirectionTable.HasEmptyLoc(ref);
      if b {
        print "giving up; dealloc can't run because frozen isn't written";
        return;
      }
    }
    if BC.OutstandingRead(ref) in s.outstandingBlockReads.Values {
      print "giving up; dealloc can't dealloc because of outstanding read\n";
      return;
    }
    var oldLoc: Option<Location> := s.ephemeralIndirectionTable.RemoveRef(ref);
    s.lru.Remove(ref);
    s.cache.Remove(ref);
    if oldLoc.Some? {
      s.blockAllocator.MarkFreeEphemeral(oldLoc.value.addr / NodeBlockSizeUint64());
    }
  }
  method FindDeallocable(s: ImplVariables) returns (ref: Option<Reference>)
  {
    ref := s.ephemeralIndirectionTable.FindDeallocable();
  }
}