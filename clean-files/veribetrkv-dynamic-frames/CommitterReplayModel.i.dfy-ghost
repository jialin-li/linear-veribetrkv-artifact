// CommitterReplayModel.i.dfy
module CommitterReplayModel {
  function {:opaque} {:fuel 0, 0} JournalReplayOne(k: Constants, cm: CM): (cm': CM)
    requires CommitterModel.WF(cm)
    requires cm.status == StatusReady
    requires !JournalistModel.isReplayEmpty(cm.journalist)
    decreases k, cm
  {
    var journalist': JournalistModel := JournalistModel.replayJournalPop(cm.journalist);
    cm.(journalist := journalist')
  }
  lemma JournalReplayOneCorrect(k: Constants, cm: CM, je: JournalEntry)
    requires CommitterModel.WF(cm)
    requires cm.status == StatusReady
    requires !JournalistModel.isReplayEmpty(cm.journalist)
    requires je == JournalistModel.I(cm.journalist).replayJournal[0]
    ensures var cm': CM := JournalReplayOne(k, cm); CommitterModel.WF(cm') && JournalCache.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, AdvanceOp(UI.PutOp(je.key, je.value), true))
    decreases k, cm, je
  {
    ghost var cm': CM := JournalReplayOne(k, cm);
    reveal_JournalReplayOne();
    ghost var vop: VOp := AdvanceOp(UI.PutOp(je.key, je.value), true);
    assert JournalCache.Replay(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, vop);
    assert JournalCache.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, vop, JournalCache.ReplayStep);
  }
}