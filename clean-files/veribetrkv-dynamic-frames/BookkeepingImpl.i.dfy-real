// BookkeepingImpl.i.dfy
module BookkeepingImpl {
  method getFreeRef(s: ImplVariables) returns (ref: Option<BT.G.Reference>)
  {
    var i: uint64 := s.ephemeralIndirectionTable.GetRefUpperBound();
    if i == 18446744073709551615 {
      return None;
    }
    i := i + 1;
    while true
    {
      var cacheLookup: Option<Node> := s.cache.GetOpt(i);
      if cacheLookup.None? {
        return Some(i);
      }
      if i == 18446744073709551615 {
        return None;
      } else {
        i := i + 1;
      }
    }
  }
  method getFreeRef2(s: ImplVariables, avoid: BT.G.Reference) returns (ref: Option<BT.G.Reference>)
  {
    var i: uint64 := s.ephemeralIndirectionTable.GetRefUpperBound();
    if i == 18446744073709551615 {
      return None;
    }
    i := i + 1;
    while true
    {
      if i != avoid {
        var cacheLookup: Option<Node> := s.cache.GetOpt(i);
        if cacheLookup.None? {
          return Some(i);
        }
      }
      if i == 18446744073709551615 {
        return None;
      } else {
        i := i + 1;
      }
    }
  }
  method writeBookkeeping(k: ImplConstants, s: ImplVariables, ref: BT.G.Reference, children: Option<seq<BT.G.Reference>>)
    modifies s.lru.Repr, s.ephemeralIndirectionTable.Repr, s.blockAllocator.Repr
  {
    var oldLoc: Option<Location> := s.ephemeralIndirectionTable.UpdateAndRemoveLoc(ref, if children.Some? then children.value else []);
    s.lru.Use(ref);
    if oldLoc.Some? {
      s.blockAllocator.MarkFreeEphemeral(oldLoc.value.addr / NodeBlockSizeUint64());
    }
  }
  method writeBookkeepingNoSuccsUpdate(k: ImplConstants, s: ImplVariables, ref: BT.G.Reference)
    modifies s.lru.Repr, s.ephemeralIndirectionTable.Repr, s.blockAllocator.Repr
  {
    var oldLoc: Option<Location> := s.ephemeralIndirectionTable.RemoveLoc(ref);
    s.lru.Use(ref);
    if oldLoc.Some? {
      s.blockAllocator.MarkFreeEphemeral(oldLoc.value.addr / NodeBlockSizeUint64());
    }
  }
  method allocBookkeeping(k: ImplConstants, s: ImplVariables, children: Option<seq<BT.G.Reference>>)
      returns (ref: Option<BT.G.Reference>)
    modifies s.lru.Repr, s.ephemeralIndirectionTable.Repr, s.blockAllocator.Repr
  {
    ref := getFreeRef(s);
    if ref.Some? {
      writeBookkeeping(k, s, ref.value, children);
    }
  }
}