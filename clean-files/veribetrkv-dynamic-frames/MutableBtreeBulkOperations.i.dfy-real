// MutableBtreeBulkOperations.i.dfy
abstract module MutableBtreeBulkOperations {
  method CountElements(node: Node) returns (count: uint64)
  {
    if node.contents.Leaf? {
      count := node.contents.nkeys;
    } else {
      count := 0;
      var i: uint64 := 0;
      while i < node.contents.nchildren
      {
        var childcount: uint64 := CountElements(node.contents.children[i]);
        count := count + childcount;
        i := i + 1;
      }
    }
  }
  method ToSeqSubtree(node: Node, keys: array<Key>, values: array<Value>, start: uint64)
      returns (nextstart: uint64)
    modifies keys, values
  {
    if node.contents.Leaf? {
      CopyArrayIntoDifferentArray(node.contents.keys, 0, keys, start, node.contents.nkeys);
      CopyArrayIntoDifferentArray(node.contents.values, 0, values, start, node.contents.nkeys);
      nextstart := start + node.contents.nkeys;
    } else {
      nextstart := start;
      var i: uint64 := 0;
      while i < node.contents.nchildren
      {
        nextstart := ToSeqSubtree(node.contents.children[i], keys, values, nextstart);
        i := i + 1;
      }
    }
  }
  method ToSeq(node: Node) returns (kvlists: (array<Key>, array<Value>))
  {
    var count: uint64 := CountElements(node);
    var keys: array?<seq<NativeTypes.byte>> := newArrayFill(count, DefaultKey());
    var values: array?<Model.Value> := newArrayFill(count, DefaultValue());
    var end: uint64 := ToSeqSubtree(node, keys, values, 0);
    return (keys, values);
  }
}