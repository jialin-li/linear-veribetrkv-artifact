// MkfsModel.i.dfy
module MkfsModel {
  predicate InitDiskContents(diskContents: map<uint64, seq<byte>>)
    decreases diskContents
  {
    true &&
    var s1addr: Addr := Superblock1Location().addr; true && var s2addr: uint64 := Superblock2Location().addr; true && var indirectionTableAddr: uint64 := IndirectionTable1Addr(); true && var nodeAddr: uint64 := NodeBlockSizeUint64() * MinNodeBlockIndexUint64(); diskContents.Keys == {s1addr, s2addr, indirectionTableAddr, nodeAddr} && var bSuperblock: seq<byte> := diskContents[s1addr]; bSuperblock == diskContents[s2addr] && var bIndirectionTable: seq<byte> := diskContents[indirectionTableAddr]; true && var bNode: seq<byte> := diskContents[nodeAddr]; |bIndirectionTable| <= IndirectionTableBlockSize() as int && |bNode| <= NodeBlockSize() as int && |bSuperblock| == 4096 && var indirectionTableLoc: Location := Location(indirectionTableAddr, |bIndirectionTable| as uint64); true && var nodeLoc: Location := Location(nodeAddr, |bNode| as uint64); Marshalling.parseCheckedSector(bIndirectionTable) == Some(SectorIndirectionTable(IndirectionTable(map[BT.G.Root() := nodeLoc], map[BT.G.Root() := []]))) && Marshalling.parseCheckedSector(bNode) == Some(SectorNode(BT.G.Node([], None, [B(map[])]))) && Marshalling.parseCheckedSector(bSuperblock) == Some(SectorSuperblock(Superblock(0, 0, 0, indirectionTableLoc)))
  }
  lemma InitialStateSatisfiesSystemInit(k: ADM.Constants, s: ADM.Variables, diskContents: map<uint64, seq<byte>>)
    requires ADM.M.Init(k.machine, s.machine)
    requires ADM.D.Init(k.disk, s.disk)
    requires InitDiskContents(diskContents)
    requires ADM.BlocksWrittenInByteSeq(diskContents, s.disk.contents)
    ensures ADM.Init(k, s)
    decreases k, s, diskContents
  {
    Marshalling.reveal_parseCheckedSector();
    ghost var s1addr: Addr := Superblock1Location().addr;
    ghost var s2addr: Addr := Superblock1Location().addr;
    ghost var indirectionTableAddr: Addr := IndirectionTable1Addr();
    ghost var nodeAddr: uint64 := NodeBlockSizeUint64() * MinNodeBlockIndexUint64();
    ghost var bSuperblock: seq<byte> := diskContents[s1addr];
    ghost var bIndirectionTable: seq<byte> := diskContents[indirectionTableAddr];
    ghost var bNode: seq<byte> := diskContents[nodeAddr];
    ghost var indirectionTableLoc: Location := Location(indirectionTableAddr, |bIndirectionTable| as uint64);
    ghost var nodeLoc: Location := Location(nodeAddr, |bNode| as uint64);
    assert ValidNodeLocation(nodeLoc) by {
      ValidNodeAddrMul(MinNodeBlockIndexUint64());
    }
    assert ValidIndirectionTableLocation(indirectionTableLoc);
    assert ValidNodeBytes(bNode) && NodeOfBytes(bNode) == BT.G.Node([], None, [B(map[])]) by {
      reveal_SectorOfBytes();
      reveal_ValidCheckedBytes();
      reveal_Parse();
      D.reveal_ChecksumChecksOut();
    }
    assert ValidSuperblockBytes(bSuperblock) && SuperblockOfBytes(bSuperblock) == Superblock(0, 0, 0, indirectionTableLoc) by {
      reveal_SectorOfBytes();
      reveal_ValidCheckedBytes();
      reveal_Parse();
      D.reveal_ChecksumChecksOut();
    }
    assert ValidIndirectionTableBytes(bIndirectionTable) && IndirectionTableOfBytes(bIndirectionTable) == IndirectionTable(map[BT.G.Root() := nodeLoc], map[BT.G.Root() := []]) by {
      reveal_SectorOfBytes();
      reveal_ValidCheckedBytes();
      reveal_Parse();
      D.reveal_ChecksumChecksOut();
    }
    assert atLoc(Superblock1Location(), s.disk.contents) == bSuperblock by {
      reveal_atLoc();
    }
    assert atLoc(Superblock2Location(), s.disk.contents) == bSuperblock by {
      reveal_atLoc();
    }
    assert atLocWithWrites(nodeLoc, s.disk.contents, s.disk.reqWrites) == bNode by {
      reveal_atLoc();
      withEmptyWrites(s.disk.contents, nodeLoc);
    }
    assert atLocWithWrites(indirectionTableLoc, s.disk.contents, s.disk.reqWrites) == bIndirectionTable by {
      reveal_atLoc();
      withEmptyWrites(s.disk.contents, indirectionTableLoc);
    }
    ghost var blockDisk: BlockDisk.Variables := IBlockDisk(s.disk);
    ghost var journalDisk: JournalDisk.Variables := IJournalDisk(s.disk);
    ghost var betreeCache: BetreeCache.Variables := s.machine.bc;
    ghost var journalCache: JournalCache.Variables := s.machine.jc;
    ghost var betreeSystem: AsyncSectorDiskModelVariables<BC.Variables, D.Variables> := AsyncSectorDiskModelTypes.AsyncSectorDiskModelVariables(betreeCache, blockDisk);
    ghost var journalSystem: AsyncSectorDiskModelVariables<M.Variables, D.Variables> := AsyncSectorDiskModelTypes.AsyncSectorDiskModelVariables(journalCache, journalDisk);
    ghost var betreeK: BS.Constants := ByteSystem.Ik(k).bs;
    ghost var journalK: JS.Constants := ByteSystem.Ik(k).js;
    ghost var betreeJournalK: Constants := BetreeJournalSystem.Constants(betreeK, journalK);
    ghost var betreeJournalSystem: Variables := BetreeJournalSystem.Variables(betreeSystem, journalSystem);
    assert BlockSystem.Init(betreeK, betreeSystem, indirectionTableLoc);
    BlockSystem.InitGraphsValue(betreeK, betreeSystem, indirectionTableLoc);
    JournalSystem.InitJournals(journalK, journalSystem, indirectionTableLoc);
    assert BetreeSystem.Init(betreeK, betreeSystem, indirectionTableLoc);
    assert JournalSystem.Init(journalK, journalSystem, indirectionTableLoc);
    JournalSystem.InitImpliesInv(journalK, journalSystem, indirectionTableLoc);
    BetreeSystem.InitImpliesInv(betreeK, betreeSystem, indirectionTableLoc);
    ghost var pivotBt: Variables := BT.Variables(BI.Variables(imap[BT.G.Root() := BT.G.Node([], None, [B(map[])])]));
    BT.InitImpliesInv(BT.Constants(BI.Constants()), pivotBt);
    PivotBetree_Refines_Map.RefinesInit(BT.Constants(BI.Constants()), pivotBt);
    assert BetreeSystem.BetreeDisk(betreeK, betreeSystem)[indirectionTableLoc] == pivotBt;
    ghost var ck: CompositeView.Constants := BetreeJournalSystem.Ik(betreeJournalK);
    ghost var cview: CompositeView.Variables := BetreeJournalSystem.I(betreeJournalK, betreeJournalSystem);
    assert StatesViewMap.Init(ck.tsm, cview.tsm, indirectionTableLoc);
    assert JournalView.Init(ck.jc, cview.jc, indirectionTableLoc);
    assert BetreeJournalSystem.InitWithLoc(betreeJournalK, betreeJournalSystem, indirectionTableLoc);
    assert BetreeJournalSystem.Init(betreeJournalK, betreeJournalSystem);
  }
}