// MainHandlers.i.dfy
module MainHandlers refines Main {
  type Constants = ImplConstants
  type Variables = FullImpl.Full
  function HeapSet(hs: HeapState): set<object>
    reads hs
    decreases {hs}, hs
  {
    hs.Repr
  }
  predicate Inv(k: Constants, hs: HeapState)
    reads hs, HeapSet(hs)
    decreases HeapSet(hs) + {hs}, k, hs
  {
    hs.s in HeapSet(hs) &&
    hs.s.Repr <= HeapSet(hs) &&
    hs.s.Inv(k) &&
    hs !in hs.s.Repr
  }
  function Ik(k: Constants): ADM.M.Constants
    decreases k
  {
    BlockJournalCache.Constants(BC.Constants(), JC.Constants())
  }
  function I(k: Constants, hs: HeapState): ADM.M.Variables
    requires Inv(k, hs)
    reads hs, HeapSet(hs)
    decreases HeapSet(hs) + {hs}, k, hs
  {
    SM.IVars(hs.s.I())
  }
  method PrintMetadata()
  {
    print "metadata NodeBlockSize ", Bounds.NodeBlockSizeUint64(), "\n";
    print "metadata MaxTotalBucketWeight ", Bounds.MaxTotalBucketWeightUint64(), "\n";
    print "metadata MaxCacheSize ", Bounds.MaxCacheSizeUint64(), "\n";
    print "metadata MaxNumChildren ", Bounds.MaxNumChildrenUint64(), "\n";
    print "metadata IndirectionTableBlockSize ", Bounds.IndirectionTableBlockSizeUint64(), "\n";
    print "metadata MinNodeBlockIndex ", Bounds.MinNodeBlockIndexUint64(), "\n";
    print "metadata DiskNumJournalBlocks ", Bounds.DiskNumJournalBlocksUint64(), "\n";
  }
  method handleEvictEverything(k: Constants, hs: HeapState, io: DiskIOHandler)
    requires false
    decreases k, hs, io
  {
    var s: Variables := hs.s;
    print "\nBefore\n";
    var acc: seq<AccRec> := s.bc.DebugAccumulate();
    DebugAccumulator.Display(acc, 0);
    var count: uint64 := s.bc.cache.cache.Count;
    while count > 0
      decreases count as int - 0 as int
    {
      EvictOrDealloc(k, s.bc, io);
      count := s.bc.cache.cache.Count;
    }
    print "\nAfter\n";
    acc := s.bc.DebugAccumulate();
    DebugAccumulator.Display(acc, 0);
  }
  method handleCountAmassAllocations(k: Constants, hs: HeapState, io: DiskIOHandler)
    requires false
    decreases k, hs, io
  {
    AllocationReport.start();
    var s: Variables := hs.s;
    var cache: MM.ResizingHashMap<Node> := s.bc.cache.cache;
    var iter: SimpleIterator := cache.SimpleIterStart();
    var output: IteratorOutput<Node> := cache.SimpleIterOutput(iter);
    while !output.Done?
    {
      var node: Node := output.value;
      AllocationReport.sampleNode(0, node);
      iter := cache.SimpleIterInc(iter);
      output := cache.SimpleIterOutput(iter);
    }
    AllocationReport.stop();
  }
  predicate InitDiskContents(diskContents: map<uint64, seq<byte>>)
    decreases diskContents
  {
    MkfsModel.InitDiskContents(diskContents)
  }
  function SystemIk(k: ADM.Constants): ThreeStateVersionedMap.Constants
    decreases k
  {
    System_Ref.Ik(k)
  }
  function SystemI(k: ADM.Constants, s: ADM.Variables): ThreeStateVersionedMap.Variables
    requires ADM.Inv(k, s)
    decreases k, s
  {
    System_Ref.I(k, s)
  }
}