// MarshallingImpl.i.dfy
module MarshallingImpl {
  type Key = KeyType.Key
  type Reference = IMM.Reference
  type Sector = SI.Sector
  method IsStrictlySortedKeySeq(a: seq<Key>) returns (b: bool)
    requires |a| < 18446744073709551616
    ensures b == Marshalling.isStrictlySortedKeySeq(a)
    decreases a
  {
    Marshalling.reveal_isStrictlySortedKeySeq();
    if |a| as uint64 < 2 {
      return true;
    }
    var i: uint64 := 1;
    while i < |a| as uint64
      invariant 0 <= i as int <= |a|
      invariant Marshalling.isStrictlySortedKeySeq(a) == Marshalling.isStrictlySortedKeySeqIterate(a, i as int)
      decreases |a| as uint64 as int - i as int
    {
      var c: int32 := KeyspaceImpl.cmp(a[i - 1], a[i]);
      if c >= 0 {
        return false;
      }
      i := i + 1;
    }
    return true;
  }
  method KeyValSeqToKeySeq(vs: seq<V>) returns (result: Option<seq<Key>>)
    requires |vs| < Uint64UpperBound()
    requires forall i: int {:trigger vs[i]} | 0 <= i < |vs| :: ValidVal(vs[i])
    requires forall i: int {:trigger vs[i]} | 0 <= i < |vs| :: ValInGrammar(vs[i], GByteArray)
    ensures result == Marshalling.keyValSeqToKeySeq(vs)
    decreases vs
  {
    var aresult: array<Key> := new Key[|vs| as uint64];
    var i: uint64 := 0;
    while i < |vs| as uint64
      invariant i as nat <= |vs|
      invariant Marshalling.keyValSeqToKeySeq(vs[..i]).Some?
      invariant aresult[..i] == Marshalling.keyValSeqToKeySeq(vs[..i]).value
      decreases |vs| as uint64 as int - i as int
    {
      if KeyType.MaxLen() < |vs[i].b| as uint64 {
        return None;
      }
      aresult[i] := vs[i].b;
      i := i + 1;
    }
    assert vs[..i] == vs;
    return Some(aresult[..i]);
  }
  method ValToStrictlySortedKeySeq(v: V) returns (s: Option<seq<Key>>)
    requires Marshalling.valToStrictlySortedKeySeq.requires(v)
    ensures s == Marshalling.valToStrictlySortedKeySeq(v)
    decreases v
  {
    var okeys: Option<seq<Key>> := KeyValSeqToKeySeq(v.a);
    if okeys == None {
      return None;
    }
    var is_sorted: bool := IsStrictlySortedKeySeq(okeys.value);
    if is_sorted {
      return okeys;
    } else {
      return None;
    }
  }
  method ValToPivots(v: V) returns (s: Option<seq<Key>>)
    requires Marshalling.valToPivots.requires(v)
    ensures s == Marshalling.valToPivots(v)
    decreases v
  {
    s := ValToStrictlySortedKeySeq(v);
    if s.Some? && |s.value| as uint64 > 0 && |s.value[0 as uint64]| as uint64 == 0 {
      s := None;
    }
  }
  method ValToBucket(v: V) returns (s: Option<BucketImpl.MutBucket>)
    requires Marshalling.valToBucket.requires(v)
    ensures s.Some? <==> Marshalling.valToBucket(v).Some?
    ensures s.Some? ==> fresh(s.value.Repr)
    ensures s.Some? ==> s.value.Inv()
    ensures s.Some? ==> WFBucket(s.value.I())
    ensures s.Some? ==> Some(s.value.I()) == Marshalling.valToBucket(v)
    decreases v
  {
    var pkv: Option<Pkv> := PackedKVMarshalling.FromVal(v);
    if pkv.Some? && PackedKV.WeightPkv(pkv.value) < 4294967296 {
      var b: MutBucket := new BucketImpl.MutBucket.InitFromPkv(pkv.value, false);
      s := Some(b);
    } else {
      s := None;
    }
  }
  method ValToBuckets(a: seq<V>) returns (s: Option<seq<BucketImpl.MutBucket>>)
    requires Marshalling.valToBuckets.requires(a)
    requires |a| < 18446744073709551616
    requires forall i: int {:trigger a[i]} | 0 <= i < |a| :: SizeOfV(a[i]) < 18446744073709551616
    ensures s.Some? ==> forall i: int {:trigger s.value[i]} | 0 <= i < |s.value| :: s.value[i].Inv()
    ensures s.Some? ==> BucketImpl.MutBucket.ReprSeqDisjoint(s.value)
    ensures s.Some? ==> forall i: int {:trigger s.value[i]} | 0 <= i < |s.value| :: fresh(s.value[i].Repr)
    ensures s.Some? ==> Some(BucketImpl.MutBucket.ISeq(s.value)) == Marshalling.valToBuckets(a)
    ensures s == None <==> Marshalling.valToBuckets(a) == None
    decreases a
  {
    var ar: array?<BucketImpl.MutBucket?> := new BucketImpl.MutBucket?[|a| as uint64];
    var i: uint64 := 0;
    while i < |a| as uint64
      invariant 0 <= i as int <= |a|
      invariant forall k: nat {:trigger ar[k]} | k < i as int :: ar[k] != null
      invariant forall k: nat {:trigger ar[k]} | k < i as int :: ar[k].Inv()
      invariant forall k: nat {:trigger ar[k]} | k < i as int :: ar !in ar[k].Repr
      invariant forall j: int, k: int {:trigger ar[k], ar[j]} | 0 <= j < i as int && 0 <= k < i as int && j != k :: ar[j].Repr !! ar[k].Repr
      invariant forall k: nat {:trigger ar[k]} | k < i as int :: fresh(ar[k].Repr)
      invariant forall k: nat {:trigger ar[k]} | k < i as int :: WFBucket(ar[k].Bucket)
      invariant Some(BucketImpl.MutBucket.ISeq(ar[..i])) == Marshalling.valToBuckets(a[..i])
      decreases |a| as uint64 as int - i as int
    {
      var obucket: Option<BucketImpl.MutBucket> := ValToBucket(a[i]);
      if obucket.Some? {
        var bucket: BucketImpl.MutBucket := obucket.value;
        assert forall k: nat {:trigger ar[k]} | k < i as int :: ar[k].Inv();
        ar[i] := bucket;
        assert forall k: nat {:trigger ar[k]} | k < i as int :: ar[k].Inv();
        assert ar[i as int].Inv();
        assert forall k: nat {:trigger ar[k]} | k < i as int + 1 :: ar[k].Inv();
        assert DropLast(a[..i + 1]) == a[..i];
        assert ar[..i + 1] == ar[..i] + [bucket];
        i := i + 1;
        assert BucketImpl.MutBucket.ISeq(ar[..i]) == Marshalling.valToBuckets(a[..i]).value;
      } else {
        return None;
      }
    }
    assert a[..|a|] == a;
    assert ar[..|a|] == ar[..];
    s := Some(ar[..]);
    BucketImpl.MutBucket.reveal_ReprSeqDisjoint();
  }
  method ValToNode(v: V) returns (s: Option<Node>)
    requires IMM.valToNode.requires(v)
    requires SizeOfV(v) < 18446744073709551616
    ensures s.Some? ==> s.value.Inv()
    ensures s.Some? ==> BucketImpl.MutBucket.ReprSeqDisjoint(s.value.buckets)
    ensures s.Some? ==> forall i: int {:trigger s.value.buckets[i]} | 0 <= i < |s.value.buckets| :: fresh(s.value.buckets[i].Repr)
    ensures INodeOpt(s) == IMM.valToNode(v)
    ensures s.Some? ==> fresh(s.value.Repr)
    decreases v
  {
    assert ValidVal(v.t[0]);
    assert ValidVal(v.t[1]);
    assert ValidVal(v.t[2]);
    var pivots_len: uint64 := |v.t[0 as uint64].a| as uint64;
    var children_len: uint64 := |v.t[1 as uint64].ua| as uint64;
    var buckets_len: uint64 := |v.t[2 as uint64].a| as uint64;
    if !(pivots_len <= MaxNumChildrenUint64() - 1 && (children_len == 0 || children_len == pivots_len + 1) && buckets_len == pivots_len + 1) {
      return None;
    }
    var pivotsOpt: Option<seq<Key>> := ValToPivots(v.t[0 as uint64]);
    if pivotsOpt.None? {
      return None;
    }
    var pivots: seq<KeyType.Key> := pivotsOpt.value;
    var childrenOpt: Option<seq<Reference>> := Marshalling.valToChildren(v.t[1 as uint64]);
    if childrenOpt.None? {
      return None;
    }
    var children: seq<Reference> := childrenOpt.value;
    assert ValidVal(v.t[2]);
    IMM.SizeOfVTupleElem_le_SizeOfV(v, 2);
    IMM.SizeOfVArrayElem_le_SizeOfV_forall(v.t[2]);
    var obuckets: Option<seq<BucketImpl.MutBucket>> := ValToBuckets(v.t[2 as uint64].a);
    if obuckets == None {
      return None;
    }
    var buckets: seq<BucketImpl.MutBucket> := obuckets.value;
    BucketImpl.MutBucket.AllocatedReprSeq(buckets);
    BucketImpl.MutBucket.FreshReprSeqOfFreshEntries(buckets);
    if |buckets| as uint64 > MaxNumChildrenUint64() {
      return None;
    }
    IMM.WeightBucketListLteSize(v.t[2 as uint64], BucketImpl.MutBucket.ISeq(buckets));
    assert WeightBucketList(BucketImpl.MutBucket.ISeq(buckets)) < 18446744073709551616;
    var w: uint64 := BucketImpl.MutBucket.computeWeightOfSeq(buckets);
    if w > MaxTotalBucketWeightUint64() {
      return None;
    }
    var node: Node := new Node(pivots, if |children| as uint64 == 0 then None else childrenOpt, buckets);
    return Some(node);
  }
  function ISectorOpt(s: Option<Sector>): Option<IMM.Sector>
    requires s.Some? ==> StateImpl.WFSector(s.value)
    requires s.Some? ==> IM.WFSector(StateImpl.ISector(s.value))
    reads if s.Some? then StateImpl.SectorObjectSet(s.value) else {}, if s.Some? then SI.SectorRepr(s.value) else {}
    decreases (if s.Some? then StateImpl.SectorObjectSet(s.value) else {}) + if s.Some? then SI.SectorRepr(s.value) else {}, s
  {
    if s.Some? then
      Some(StateImpl.ISector(s.value))
    else
      None
  }
  method ValToSector(v: V) returns (s: Option<StateImpl.Sector>)
    requires IMM.valToSector.requires(v)
    requires SizeOfV(v) < 18446744073709551616
    ensures s.Some? ==> StateImpl.WFSector(s.value)
    ensures s.Some? && s.value.SectorNode? ==> forall i: int {:trigger s.value.node.buckets[i]} | 0 <= i < |s.value.node.buckets| :: fresh(s.value.node.buckets[i].Repr)
    ensures s.Some? ==> IM.WFSector(StateImpl.ISector(s.value))
    ensures MapOption(s, SI.ISector) == IMM.valToSector(v)
    ensures s.Some? ==> fresh(SI.SectorRepr(s.value))
    decreases v
  {
    if v.c == 0 {
      var s: Option<Superblock> := Marshalling.valToSuperblock(v.val);
      if s.Some? {
        return Some(StateImpl.SectorSuperblock(s.value));
      } else {
        return None;
      }
    } else if v.c == 1 {
      var mutMap: IndirectionTable? := IndirectionTableImpl.IndirectionTable.ValToIndirectionTable(v.val);
      if mutMap != null {
        return Some(StateImpl.SectorIndirectionTable(mutMap));
      } else {
        return None;
      }
    } else {
      var node: Option<Node> := ValToNode(v.val);
      match node {
        case Some(s) =>
          return Some(StateImpl.SectorNode(s));
        case None =>
          return None;
      }
    }
  }
  method childrenToVal(children: seq<Reference>) returns (v: V)
    requires |children| < 18446744073709551616
    ensures ValidVal(v)
    ensures SizeOfV(v) <= 8 + |children| * 8
    ensures ValInGrammar(v, GUint64Array)
    ensures Marshalling.valToChildren(v) == Some(children)
    ensures |v.ua| == |children|
    ensures SizeOfV(v) == 8 + 8 * |children|
    decreases children
  {
    return VUint64Array(children);
  }
  lemma WeightKeySeqLe(keys: seq<Key>)
    ensures WeightKeyList(keys) <= |keys| * (8 + KeyType.MaxLen() as int)
    decreases keys
  {
    WeightKeyMultisetUpperBound(multiset(keys));
  }
  method strictlySortedKeySeqToVal(keys: seq<Key>) returns (v: V, size: uint64)
    requires Keyspace.IsStrictlySorted(keys)
    requires |keys| < (Uint64UpperBound() - 8) / (8 + KeyType.MaxLen() as nat)
    ensures ValidVal(v)
    ensures ValInGrammar(v, Marshalling.PivotTableGrammar())
    ensures |v.a| == |keys|
    ensures Marshalling.valToStrictlySortedKeySeq(v) == Some(keys)
    ensures SizeOfV(v) <= 8 + |keys| * (8 + KeyType.MaxLen() as int)
    ensures SizeOfV(v) == 8 + Marshalling.pivotTableWeight(keys)
    ensures size as nat == SizeOfV(v)
    decreases keys
  {
    WeightKeySeqLe(keys);
    var vs: array<V> := new V[|keys| as uint64];
    assert SeqSum(vs[..0]) == 0 by {
      reveal_SeqSum();
    }
    size := 0;
    var i: uint64 := 0;
    while i < |keys| as uint64
      invariant i as nat <= |keys|
      invariant forall j: uint64 {:trigger vs[j]} | 0 <= j < i :: ValidVal(vs[j])
      invariant forall j: uint64 {:trigger keys[j]} {:trigger vs[j]} | 0 <= j < i :: vs[j] == VByteArray(keys[j])
      invariant Marshalling.keyValSeqToKeySeq(vs[..i]).value == keys[..i]
      invariant SeqSum(vs[..i]) == Marshalling.pivotTableWeight(keys[..i])
      invariant size as nat == SeqSum(vs[..i])
      decreases |keys| as uint64 as int - i as int
    {
      vs[i] := VByteArray(keys[i]);
      assert vs[..i + 1] == vs[..i] + [vs[i]];
      lemma_SeqSum_prefix(vs[..i], vs[i]);
      Marshalling.pivotTableWeightUpperBound(keys[..i]);
      calc <= {
        size as nat + 8 + |keys[i]|;
      <=
        SeqSum(vs[..i + 1]);
      <=
        |keys| * (8 + KeyType.MaxLen() as int);
      <=
        (Uint64UpperBound() - 8) / (8 + KeyType.MaxLen() as nat) * (8 + KeyType.MaxLen() as int);
      <=
        Uint64UpperBound() - 8;
      }
      size := size + 8 + |keys[i]| as uint64;
      i := i + 1;
    }
    assert keys[..i] == keys;
    Marshalling.pivotTableWeightUpperBound(keys);
    v := VArray(vs[..i]);
    size := size + 8;
  }
  lemma KeyInPivotsIsNonempty(pivots: seq<Key>)
    requires Pivots.WFPivots(pivots)
    requires |pivots| > 0
    ensures |pivots[0]| != 0
    decreases pivots
  {
    ghost var e: Element := Keyspace.SmallerElement(pivots[0]);
    SeqComparison.reveal_lte();
  }
  method pivotsToVal(pivots: seq<Key>) returns (v: V, size: uint64)
    requires Pivots.WFPivots(pivots)
    requires |pivots| <= MaxNumChildren() as int - 1
    ensures ValidVal(v)
    ensures ValInGrammar(v, Marshalling.PivotTableGrammar())
    ensures |v.a| == |pivots|
    ensures Marshalling.valToPivots(v) == Some(pivots)
    ensures SizeOfV(v) <= 8 + |pivots| * (8 + KeyType.MaxLen() as int)
    ensures SizeOfV(v) == size as int
    decreases pivots
  {
    v, size := strictlySortedKeySeqToVal(pivots);
    ghost var ghosty: bool := true;
    if ghosty && |pivots| > 0 {
      KeyInPivotsIsNonempty(pivots);
    }
  }
  method {:fuel SizeOfV, 3} bucketToVal(bucket: BucketImpl.MutBucket) returns (v: V, size: uint64)
    requires bucket.Inv()
    requires BucketWellMarshalled(bucket.I())
    requires WeightBucket(bucket.Bucket) <= MaxTotalBucketWeight()
    ensures ValInGrammar(v, Marshalling.BucketGrammar())
    ensures ValidVal(v)
    ensures Marshalling.valToBucket(v) == Some(bucket.Bucket)
    ensures SizeOfV(v) == WeightBucket(bucket.Bucket) + 32
    ensures SizeOfV(v) == size as int
    decreases bucket
  {
    var pkv: PKV.Pkv := bucket.GetPkv();
    v := PackedKVMarshalling.ToVal(pkv);
    PackedKVMarshalling.parseMarshalledCorrect(pkv);
    assert PackedKVMarshalling.fromVal(v) == Some(pkv);
    DPKV.WeightBucketPkv_eq_WeightPkv(pkv);
    assert PackedKV.WeightPkv(pkv) < Uint32UpperBound() as uint64;
    size := bucket.Weight + 32;
    PackedKVMarshalling.SizeOfVPackedKVIsBucketWeight(pkv);
  }
  method bucketsToVal(buckets: seq<BucketImpl.MutBucket>) returns (v: V, size: uint64)
    requires forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: buckets[i].Inv()
    requires forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: WFBucket(buckets[i].Bucket)
    requires forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: BucketWellMarshalled(buckets[i].I())
    requires |buckets| <= MaxNumChildren() as int
    requires WeightBucketList(BucketImpl.MutBucket.ISeq(buckets)) <= MaxTotalBucketWeight()
    ensures ValidVal(v)
    ensures ValInGrammar(v, GArray(Marshalling.BucketGrammar()))
    ensures |v.a| == |buckets|
    ensures Marshalling.valToBuckets(v.a) == Some(BucketImpl.MutBucket.ISeq(buckets))
    ensures SizeOfV(v) <= 8 + WeightBucketList(BucketImpl.MutBucket.ISeq(buckets)) + |buckets| * 32
    ensures SizeOfV(v) == size as int
    decreases buckets
  {
    BucketImpl.MutBucket.AllocatedReprSeq(buckets);
    if |buckets| as uint64 == 0 {
      v := VArray([]);
      size := 8;
    } else {
      WeightBucketListSlice(BucketImpl.MutBucket.ISeq(buckets), 0, |buckets| - 1);
      WeightBucketLeBucketList(BucketImpl.MutBucket.ISeq(buckets), |buckets| - 1);
      BucketImpl.MutBucket.Islice(buckets, 0, |buckets| - 1);
      var pref: V, pref_size: uint64 := bucketsToVal(buckets[..|buckets| as uint64 - 1]);
      var bucket: BucketImpl.MutBucket := buckets[|buckets| as uint64 - 1];
      var bucketVal: V, bucket_size: uint64 := bucketToVal(bucket);
      assert buckets == DropLast(buckets) + [Last(buckets)];
      lemma_SeqSum_prefix(pref.a, bucketVal);
      ghost var ibuckets: seq<Bucket> := BucketImpl.MutBucket.ISeq(buckets);
      assert ibuckets == DropLast(ibuckets) + [Last(ibuckets)];
      assert Marshalling.valToBuckets(pref.a).value == DropLast(ibuckets);
      assert Marshalling.valToBuckets(VArray(pref.a + [bucketVal]).a) == Some(BucketImpl.MutBucket.ISeq(buckets));
      reveal_WeightBucketList();
      BucketImpl.MutBucket.ISeqInduction(buckets);
      assert WeightBucketList(BucketImpl.MutBucket.ISeq(buckets)) == WeightBucketList(BucketImpl.MutBucket.ISeq(DropLast(buckets))) + WeightBucket(Last(buckets).I());
      v := VArray(pref.a + [bucketVal]);
      size := pref_size + bucket_size;
    }
  }
  function INodeOpt(s: Option<Node>): Option<IMM.Node>
    requires s.Some? ==> s.value.Inv()
    reads if s.Some? then {s.value} else {}, if s.Some? then s.value.Repr else {}
    decreases (if s.Some? then {s.value} else {}) + if s.Some? then s.value.Repr else {}, s
  {
    if s.Some? then
      Some(s.value.I())
    else
      None
  }
  method {:fuel SizeOfV, 4} nodeToVal(node: Node) returns (v: V, size: uint64)
    requires node.Inv()
    requires IM.WFNode(node.I())
    requires BT.WFNode(IM.INode(node.I()))
    requires forall i: int {:trigger node.buckets[i]} | 0 <= i < |node.buckets| :: BucketWellMarshalled(node.buckets[i].I())
    ensures ValidVal(v)
    ensures ValInGrammar(v, Marshalling.PivotNodeGrammar())
    ensures IMM.valToNode(v) == INodeOpt(Some(node))
    ensures SizeOfV(v) <= NodeBlockSize() - 32 - 8
    ensures SizeOfV(v) == size as int
    decreases node
  {
    BucketImpl.MutBucket.AllocatedReprSeq(node.buckets);
    var buckets: V, size_buckets: uint64 := bucketsToVal(node.buckets);
    var pivots: V, size_pivots: uint64 := pivotsToVal(node.pivotTable);
    var children: V, size_children: uint64;
    if node.children.Some? {
      children := childrenToVal(node.children.value);
      size_children := 8 + 8 * |node.children.value| as uint64;
    } else {
      children := VUint64Array([]);
      size_children := 8;
    }
    assert SizeOfV(children) == size_children as int;
    v := VTuple([pivots, children, buckets]);
    assert SizeOfV(pivots) <= 8 + (MaxNumChildren() - 1) * (8 + KeyType.MaxLen() as int);
    assert SizeOfV(children) <= 8 + MaxNumChildren() * 8;
    assert SizeOfV(buckets) <= 8 + MaxNumChildren() * 32 + MaxTotalBucketWeight();
    assert SizeOfV(v) == SizeOfV(pivots) + SizeOfV(children) + SizeOfV(buckets);
    lemma_node_fits_in_block();
    size := size_buckets + size_pivots + size_children;
  }
  method {:fuel SizeOfV, 7} superblockToVal(superblock: SectorType.Superblock) returns (v: V)
    requires JC.WFSuperblock(superblock)
    ensures ValidVal(v)
    ensures ValInGrammar(v, Marshalling.SuperblockGrammar())
    ensures SizeOfV(v) <= 4000
    ensures Marshalling.valToSuperblock(v) == Some(superblock)
    decreases superblock
  {
    v := VTuple([VUint64(superblock.counter), VUint64(superblock.journalStart), VUint64(superblock.journalLen), VUint64(superblock.indirectionTableLoc.addr), VUint64(superblock.indirectionTableLoc.len)]);
  }
  method sectorToVal(sector: StateImpl.Sector) returns (v: V, size: uint64)
    requires StateImpl.WFSector(sector)
    requires IM.WFSector(StateImpl.ISector(sector))
    requires sector.SectorNode?
    requires sector.SectorNode? ==> IM.WFNode(sector.node.I())
    requires sector.SectorNode? ==> BT.WFNode(IM.INode(sector.node.I()))
    requires sector.SectorNode? ==> forall i: int {:trigger sector.node.buckets[i]} | 0 <= i < |sector.node.buckets| :: BucketWellMarshalled(sector.node.buckets[i].I())
    ensures ValidVal(v)
    ensures ValInGrammar(v, Marshalling.SectorGrammar())
    ensures Marshalling.valToSector(v) == Some(IM.ISector(StateImpl.ISector(sector)))
    ensures sector.SectorNode? ==> SizeOfV(v) <= NodeBlockSize() as int - 32
    ensures SizeOfV(v) < 18446744073709551616 - 32
    ensures SizeOfV(v) == size as int
    decreases sector
  {
    match sector {
      case SectorNode(node) =>
        {
          var w, s := nodeToVal(node);
          v := VCase(2, w);
          size := s + 8;
        }
    }
  }
  method indirectionTableSectorToVal(sector: StateImpl.Sector) returns (v: V, size: uint64)
    requires StateImpl.WFSector(sector)
    requires IM.WFSector(StateImpl.ISector(sector))
    requires sector.SectorIndirectionTable?
    requires sector.indirectionTable.Inv()
    requires BC.WFCompleteIndirectionTable(IM.IIndirectionTable(sector.indirectionTable.I()))
    ensures ValidVal(v)
    ensures ValInGrammar(v, Marshalling.SectorGrammar())
    ensures Marshalling.valToSector(v) == Some(IM.ISector(StateImpl.ISector(sector)))
    ensures SizeOfV(v) < 18446744073709551616 - 32
    ensures SizeOfV(v) == size as int
    decreases sector
  {
    var w: V, s: uint64 := sector.indirectionTable.indirectionTableToVal();
    v := VCase(1, w);
    size := s + 8;
  }
  method ParseSector(data: seq<byte>, start: uint64) returns (s: Option<Sector>)
    requires start as int <= |data| < 18446744073709551616
    ensures s.Some? ==> StateImpl.WFSector(s.value)
    ensures s.Some? ==> IM.WFSector(StateImpl.ISector(s.value))
    ensures s.Some? && s.value.SectorNode? ==> forall i: int {:trigger s.value.node.buckets[i]} | 0 <= i < |s.value.node.buckets| :: fresh(s.value.node.buckets[i].Repr)
    ensures ISectorOpt(s) == IMM.parseSector(data[start..])
    ensures s.Some? && s.value.SectorNode? ==> IM.WFNode(s.value.node.I())
    ensures s.Some? && s.value.SectorNode? ==> BT.WFNode(IM.INode(s.value.node.I()))
    ensures s.Some? ==> fresh(SI.SectorRepr(s.value))
    decreases data, start
  {
    IMM.reveal_parseSector();
    var success: bool, v: V, rest_index: uint64 := ParseVal(data, start, Marshalling.SectorGrammar());
    if success {
      lemma_SizeOfV_parse_Val(data[start..], Marshalling.SectorGrammar());
      assert SizeOfV(v) < 18446744073709551616;
      var s: Option<StateImpl.Sector> := ValToSector(v);
      return s;
    } else {
      return None;
    }
  }
  method MarshallIntoFixedSize(val: V, ghost grammar: G, start: uint64, n: uint64)
      returns (data: array<byte>)
    requires ValidGrammar(grammar)
    requires ValInGrammar(val, grammar)
    requires ValidVal(val)
    requires start <= n
    requires 0 <= SizeOfV(val) <= n as int - start as int
    ensures fresh(data)
    ensures |data[..]| == n as int
    ensures parse_Val(data[start..], grammar).0.Some? && parse_Val(data[start..], grammar).0.value == val
    decreases val, grammar, start, n
  {
    data := new byte[n];
    var computed_size: uint64 := GenericMarshalling.MarshallVal(val, grammar, data, start);
    GenericMarshalling.lemma_parse_Val_view_specific(data[..], val, grammar, start as int, n as int);
    assert data[start..] == data[start .. n];
  }
  method ParseCheckedSector(data: seq<byte>) returns (s: Option<Sector>)
    requires |data| < 18446744073709551616
    ensures s.Some? ==> StateImpl.WFSector(s.value)
    ensures s.Some? ==> IM.WFSector(StateImpl.ISector(s.value))
    ensures ISectorOpt(s) == IMM.parseCheckedSector(data)
    ensures s.Some? && s.value.SectorNode? ==> IM.WFNode(s.value.node.I())
    ensures s.Some? && s.value.SectorNode? ==> BT.WFNode(IM.INode(s.value.node.I()))
    ensures s.Some? ==> fresh(SI.SectorRepr(s.value))
    decreases data
  {
    s := None;
    if |data| as uint64 >= 32 {
      var hash: seq<byte> := Crypto.Crc32C(data[32 as uint64..]);
      if hash == data[..32 as uint64] {
        s := ParseSector(data, 32);
      }
    }
    IMM.reveal_parseCheckedSector();
  }
  method MarshallCheckedSector(sector: Sector) returns (data: array?<byte>)
    requires StateImpl.WFSector(sector)
    requires IM.WFSector(StateImpl.ISector(sector))
    requires sector.SectorNode? ==> IM.WFNode(sector.node.I())
    requires sector.SectorNode? ==> BT.WFNode(IM.INode(sector.node.I()))
    requires sector.SectorSuperblock? ==> JC.WFSuperblock(sector.superblock)
    ensures data != null ==> IMM.parseCheckedSector(data[..]).Some?
    ensures data != null ==> true && IM.ISector(IMM.parseCheckedSector(data[..]).value) == IM.ISector(StateImpl.ISector(sector))
    ensures data != null ==> 32 <= data.Length
    ensures data != null && sector.SectorNode? ==> data.Length <= NodeBlockSize() as int
    ensures data != null && sector.SectorIndirectionTable? ==> data.Length <= IndirectionTableBlockSize() as int
    ensures sector.SectorSuperblock? ==> data != null && data.Length == 4096
    ensures sector.SectorIndirectionTable? && Marshalling.IsInitIndirectionTable(IndirectionTableModel.I(sector.indirectionTable.I())) ==> data != null
    ensures sector.SectorNode? && BucketListWellMarshalled(BucketImpl.MutBucket.ISeq(sector.node.buckets)) ==> data != null
    decreases sector
  {
    if sector.SectorSuperblock? {
      var v0: V := superblockToVal(sector.superblock);
      var v: V := VCase(0, v0);
      var data: array?<byte> := MarshallIntoFixedSize(v, Marshalling.SectorGrammar(), 32, 4096);
      IMM.reveal_parseSector();
      IMM.reveal_parseCheckedSector();
      var hash: seq<byte> := Crypto.Crc32CArray(data, 32, data.Length as uint64 - 32);
      assert data[32..] == data[32 .. data.Length];
      assert hash == Crypto.Crc32C(data[32..]);
      ghost var data_suffix: seq<byte> := data[32..];
      NativeArrays.CopySeqIntoArray(hash, 0, data, 0, 32);
      assert data_suffix == data[32..];
      return data;
    } else if sector.SectorIndirectionTable? {
      var v: V, computedSize: uint64 := indirectionTableSectorToVal(sector);
      var size: uint64 := computedSize + 32;
      ghost var ghosty: bool := true;
      if ghosty {
        if Marshalling.IsInitIndirectionTable(IndirectionTableModel.I(sector.indirectionTable.I())) {
          Marshalling.InitIndirectionTableSizeOfV(IndirectionTableModel.I(sector.indirectionTable.I()), v);
        }
      }
      if size > IndirectionTableBlockSizeUint64() {
        return null;
      }
      var data: array?<byte> := MarshallIntoFixedSize(v, Marshalling.SectorGrammar(), 32, size);
      IMM.reveal_parseSector();
      IMM.reveal_parseCheckedSector();
      var hash: seq<byte> := Crypto.Crc32CArray(data, 32, data.Length as uint64 - 32);
      assert data[32..] == data[32 .. data.Length];
      assert hash == Crypto.Crc32C(data[32..]);
      ghost var data_suffix: seq<byte> := data[32..];
      NativeArrays.CopySeqIntoArray(hash, 0, data, 0, 32);
      assert data_suffix == data[32..];
      return data;
    } else {
      var node: Node := sector.node;
      var wellmarshalled: bool := node.BucketsWellMarshalled();
      if !wellmarshalled {
        return null;
      }
      var v: V, computedSize: uint64 := sectorToVal(sector);
      var size: uint64 := computedSize + 32;
      var data: array?<byte> := MarshallIntoFixedSize(v, Marshalling.SectorGrammar(), 32, size);
      IMM.reveal_parseSector();
      IMM.reveal_parseCheckedSector();
      var hash: seq<byte> := Crypto.Crc32CArray(data, 32, data.Length as uint64 - 32);
      assert data[32..] == data[32 .. data.Length];
      assert hash == Crypto.Crc32C(data[32..]);
      ghost var data_suffix: seq<byte> := data[32..];
      NativeArrays.CopySeqIntoArray(hash, 0, data, 0, 32);
      assert data_suffix == data[32..];
      return data;
    }
  }
}