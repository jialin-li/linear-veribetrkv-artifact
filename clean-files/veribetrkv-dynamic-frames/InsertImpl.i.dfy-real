// InsertImpl.i.dfy
module InsertImpl {
  method InsertKeyValue(k: ImplConstants, s: ImplVariables, key: Key, value: Value)
      returns (success: bool)
    modifies s.Repr()
  {
    if s.frozenIndirectionTable != null {
      var b: bool := s.frozenIndirectionTable.HasEmptyLoc(BT.G.Root());
      if b {
        success := false;
        print "giving up; can't dirty root because frozen isn't written";
        return;
      }
    }
    var msg: Message := ValueMessage.Define(value);
    s.cache.InsertKeyValue(BT.G.Root(), key, msg);
    writeBookkeepingNoSuccsUpdate(k, s, BT.G.Root());
    success := true;
  }
  method insert(k: ImplConstants, s: ImplVariables, io: DiskIOHandler, key: Key, value: Value)
      returns (success: bool)
    modifies s.Repr(), io
  {
    var indirectionTableSize: uint64 := s.ephemeralIndirectionTable.GetSize();
    if !(indirectionTableSize <= IndirectionTableModel.MaxSizeUint64() - 3) {
      success := false;
      return;
    }
    var rootLookup: Option<Node> := s.cache.GetOpt(BT.G.Root());
    if rootLookup.None? {
      if TotalCacheSize(s) <= MaxCacheSizeUint64() - 1 {
        PageInNodeReq(k, s, io, BT.G.Root());
        success := false;
      } else {
        print "insert: root not in cache, but cache is full\n";
        success := false;
      }
      return;
    }
    var weightSeq: uint64 := MutBucket.computeWeightOfSeq(rootLookup.value.buckets);
    if WeightKeyUint64(key) + WeightMessageUint64(ValueMessage.Define(value)) + weightSeq <= MaxTotalBucketWeightUint64() {
      success := InsertKeyValue(k, s, key, value);
    } else {
      runFlushPolicy(k, s, io);
      success := false;
    }
  }
}