// BitmapImpl.i.dfy
module BitmapImpl {
  class Bitmap {
    var bits: array<uint64>
    method DebugAccumulate() returns (acc: DebugAccumulator.DebugAccumulator)
    {
      acc := DebugAccumulator.EmptyAccumulator();
      var a: DebugAccumulator.AccRec := new DebugAccumulator.AccRec(bits.Length as uint64, "uint64");
      acc := DebugAccumulator.AccPut(acc, "bits", a);
    }
    ghost var Repr: set<object>
    constructor (len: uint64)
    {
      new;
      bits := NativeArrays.newArrayFill(len / 64, 0);
    }
    static function method SetBit(word: uint64, b: uint64): uint64
    {
      BitsetLemmas.set_bit_to_1_uint64(word, b)
    }
    method Set(c: uint64)
      modifies this, this.Repr
    {
      var i: uint64 := c / 64;
      var b: uint64 := c % 64;
      this.bits[i] := SetBit(this.bits[i], b);
    }
    static function method UnsetBit(word: uint64, b: uint64): uint64
    {
      BitsetLemmas.set_bit_to_0_uint64(word, b)
    }
    method Unset(c: uint64)
      modifies this, this.Repr
    {
      var i: uint64 := c / 64;
      var b: uint64 := c % 64;
      this.bits[i] := UnsetBit(this.bits[i], b);
    }
    method GetIsSet(c: uint64) returns (result: bool)
    {
      var i: uint64 := c / 64;
      var b: uint64 := c % 64;
      result := BitsetLemmas.in_set_uint64(b, this.bits[i]);
    }
    method Alloc() returns (res: Option<uint64>)
    {
      var i: uint64 := 0;
      while i < this.bits.Length as uint64
      {
        if this.bits[i] != 18446744073709551615 {
          var j: uint64 := 0;
          while j < 64
          {
            if !BitsetLemmas.in_set_uint64(j, this.bits[i]) {
              res := Some(64 * i + j);
              return;
            }
            j := j + 1;
          }
        }
        i := i + 1;
      }
      res := None;
    }
    constructor Union(a: Bitmap, b: Bitmap)
    {
      bits := new uint64[a.bits.Length as uint64];
      new;
      var i: uint64 := 0;
      while i < a.bits.Length as uint64
      {
        bits[i] := BitsetLemmas.bit_or_uint64(a.bits[i], b.bits[i]);
        i := i + 1;
      }
    }
    constructor Clone(a: Bitmap)
    {
      new;
      bits := NativeArrays.newArrayClone(a.bits);
    }
  }
}