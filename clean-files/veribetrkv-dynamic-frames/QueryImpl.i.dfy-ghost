// QueryImpl.i.dfy
module QueryImpl {
  method queryIterate(k: ImplConstants, s: ImplVariables, key: Key, msg: Message, ref: BT.G.Reference, io: DiskIOHandler, counter: uint64)
      returns (res: Option<Value>)
    requires io.initialized()
    requires Inv(k, s)
    requires io !in s.Repr()
    requires s.ready
    requires ref in SM.IIndirectionTable(IIndirectionTable(s.ephemeralIndirectionTable)).graph
    modifies io, s.Repr()
    ensures WellUpdated(s)
    ensures QueryModel.queryIterate(Ic(k), old(s.I()), key, msg, ref, old(IIO(io)), counter, s.I(), res, IIO(io))
    decreases counter
  {
    QueryModel.reveal_queryIterate();
    if counter == 0 {
      res := None;
      return;
    }
    var nodeOpt: Option<Node> := s.cache.GetOpt(ref);
    if nodeOpt.None? {
      PageInNodeReqOrMakeRoom(k, s, io, ref);
      res := None;
      return;
    } else {
      var node: Node := nodeOpt.value;
      node.LemmaReprSeqBucketsLeRepr();
      s.cache.LemmaNodeReprLeRepr(ref);
      MutBucket.AllocatedReprSeq(node.buckets);
      MutBucket.LemmaReprBucketLeReprSeq(node.buckets, Pivots.Route(node.pivotTable, key));
      ghost var oldIVars: SM.BCVariables := s.I();
      LruModel.LruUse(s.lru.Queue, ref);
      s.lru.Use(ref);
      assert SM.IBlockCache(oldIVars) == SM.IBlockCache(s.I());
      var r: uint64 := Pivots.ComputeRoute(node.pivotTable, key);
      var bucket: BucketImpl.MutBucket := node.buckets[r];
      var kmtMsg: Option<Message> := bucket.Query(key);
      var newmsg: Message := if kmtMsg.Some? then ValueMessage.Merge(msg, kmtMsg.value) else msg;
      if newmsg.Define? {
        res := Some(newmsg.value);
        return;
      } else {
        if node.children.Some? {
          BookkeepingModel.lemmaChildInGraph(Ic(k), s.I(), ref, node.children.value[r]);
          res := queryIterate(k, s, key, newmsg, node.children.value[r], io, counter - 1);
        } else {
          res := Some(ValueType.DefaultValue());
          return;
        }
      }
    }
  }
  method query(k: ImplConstants, s: ImplVariables, io: DiskIOHandler, key: Key)
      returns (res: Option<Value>)
    requires io.initialized()
    requires Inv(k, s)
    requires io !in s.Repr()
    requires s.ready
    modifies io, s.Repr()
    ensures WellUpdated(s)
    ensures QueryModel.query(Ic(k), old(s.I()), old(IIO(io)), key, s.I(), res, IIO(io))
    decreases k, s, io, key
  {
    QueryModel.reveal_query();
    var ref: Reference := BT.G.Root();
    var msg: Message := ValueMessage.IdentityMessage();
    var counter: uint64 := 40;
    res := queryIterate(k, s, key, msg, ref, io, counter);
  }
}