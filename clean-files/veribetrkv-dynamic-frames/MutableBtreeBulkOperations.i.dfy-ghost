// MutableBtreeBulkOperations.i.dfy
abstract module MutableBtreeBulkOperations {
  function NumElements(node: Node): nat
    requires WF(node)
    reads node, node.repr
    decreases node.repr + {node}, node
  {
    Model.NumElements(I(node))
  }
  method CountElements(node: Node) returns (count: uint64)
    requires WFShape(node)
    requires Model.WF(I(node))
    requires NumElements(node) < Uint64UpperBound()
    ensures count as nat == Model.NumElements(I(node))
    decreases node.height
  {
    reveal_I();
    if node.contents.Leaf? {
      count := node.contents.nkeys;
    } else {
      ghost var inode: Model.Node := I(node);
      count := 0;
      ghost var icount: int := 0;
      var i: uint64 := 0;
      while i < node.contents.nchildren
        invariant i <= node.contents.nchildren
        invariant icount == Model.NumElementsOfChildren(inode.children[..i])
        invariant icount < Uint64UpperBound()
        invariant count == icount as uint64
        decreases node.contents.nchildren as int - i as int
      {
        ghost var ichildcount: nat := Model.NumElements(inode.children[i]);
        assert inode.children[..i + 1][..i] == inode.children[..i];
        Model.NumElementsOfChildrenNotZero(inode);
        Model.NumElementsOfChildrenDecreases(inode.children, (i + 1) as int);
        icount := icount + ichildcount;
        IOfChild(node, i as int);
        var childcount: uint64 := CountElements(node.contents.children[i]);
        count := count + childcount;
        i := i + 1;
      }
      assert inode.children[..node.contents.nchildren] == inode.children;
    }
  }
  method ToSeqSubtree(node: Node, keys: array<Key>, values: array<Value>, start: uint64)
      returns (nextstart: uint64)
    requires WF(node)
    requires !Arrays.Aliases(keys, values)
    requires keys.Length == values.Length
    requires keys !in node.repr
    requires values !in node.repr
    requires start as nat + NumElements(node) <= keys.Length
    requires start as nat + NumElements(node) < Uint64UpperBound()
    modifies keys, values
    ensures nextstart as nat == start as nat + NumElements(node)
    ensures keys[..start] == old(keys[..start])
    ensures keys[start .. nextstart] == Model.ToSeq(I(node)).0
    ensures keys[nextstart..] == old(keys[nextstart..])
    ensures values[..start] == old(values[..start])
    ensures values[start .. nextstart] == Model.ToSeq(I(node)).1
    ensures values[nextstart..] == old(values[nextstart..])
    decreases node.height
  {
    if node.contents.Leaf? {
      CopyArrayIntoDifferentArray(node.contents.keys, 0, keys, start, node.contents.nkeys);
      CopyArrayIntoDifferentArray(node.contents.values, 0, values, start, node.contents.nkeys);
      nextstart := start + node.contents.nkeys;
      forall  | true
        ensures keys[start .. nextstart] == Model.ToSeq(I(node)).0 && values[start .. nextstart] == Model.ToSeq(I(node)).1
      {
        reveal_I();
        Model.reveal_ToSeq();
      }
    } else {
      nextstart := start;
      var i: uint64 := 0;
      while i < node.contents.nchildren
        invariant 0 <= i <= node.contents.nchildren
        invariant nextstart as nat == start as nat + Model.NumElementsOfChildren(I(node).children[..i])
        invariant nextstart as nat <= keys.Length
        invariant keys[..start] == old(keys[..start])
        invariant keys[start .. nextstart] == Model.Seq.Flatten(Model.ToSeqChildren(I(node).children[..i]).0)
        invariant keys[nextstart..] == old(keys[nextstart..])
        invariant values[..start] == old(values[..start])
        invariant values[start .. nextstart] == Model.Seq.Flatten(Model.ToSeqChildren(I(node).children[..i]).1)
        invariant values[nextstart..] == old(values[nextstart..])
        decreases node.contents.nchildren as int - i as int
      {
        assert WFShapeChildren(node.contents.children[..node.contents.nchildren], node.repr, node.height);
        assert I(node).children[..i + 1][..i] == I(node).children[..i];
        Model.NumElementsOfChildrenDecreases(I(node).children, (i + 1) as int);
        Model.ToSeqChildrenDecomposition(I(node).children[..i + 1]);
        IOfChild(node, i as int);
        nextstart := ToSeqSubtree(node.contents.children[i], keys, values, nextstart);
        i := i + 1;
        Model.reveal_ToSeq();
      }
      assert I(node).children[..node.contents.nchildren] == I(node).children;
      Model.reveal_ToSeq();
    }
  }
  method ToSeq(node: Node) returns (kvlists: (array<Key>, array<Value>))
    requires WF(node)
    requires NumElements(node) < Uint64UpperBound()
    ensures (kvlists.0[..], kvlists.1[..]) == Model.ToSeq(I(node))
    ensures fresh(kvlists.0)
    ensures fresh(kvlists.1)
    decreases node
  {
    var count: uint64 := CountElements(node);
    var keys: array?<seq<NativeTypes.byte>> := newArrayFill(count, DefaultKey());
    var values: array?<Model.Value> := newArrayFill(count, DefaultValue());
    var end: uint64 := ToSeqSubtree(node, keys, values, 0);
    assert keys[..] == keys[0 .. end];
    assert values[..] == values[0 .. end];
    return (keys, values);
  }
}