// BitmapModel.i.dfy
module BitmapModel {
  type BitmapModelT = seq<bool>
  function Len(bm: BitmapModelT): int
    decreases bm
  {
    |bm|
  }
  function {:opaque} {:fuel 0, 0} BitSet(bm: BitmapModelT, i: int): (bm': BitmapModelT)
    requires 0 <= i < Len(bm)
    ensures Len(bm') == Len(bm)
    decreases bm, i
  {
    bm[i := true]
  }
  function {:opaque} {:fuel 0, 0} BitUnset(bm: BitmapModelT, i: int): (bm': BitmapModelT)
    requires 0 <= i < Len(bm)
    ensures Len(bm') == Len(bm)
    decreases bm, i
  {
    bm[i := false]
  }
  predicate {:opaque} {:fuel 0, 0} IsSet(bm: BitmapModelT, i: int)
    requires 0 <= i < Len(bm)
    decreases bm, i
  {
    bm[i]
  }
  function {:opaque} {:fuel 0, 0} EmptyBitmap(n: int): (bm: BitmapModelT)
    requires n >= 0
    ensures Len(bm) == n
    ensures forall i: int {:trigger IsSet(bm, i)} | 0 <= i < Len(bm) :: !IsSet(bm, i)
    decreases n
  {
    if n == 0 then
      []
    else
      var bm: seq<bool> := EmptyBitmap(n - 1) + [false]; reveal_IsSet(); assert forall i: int | 0 <= i < n - 1 :: !IsSet(EmptyBitmap(n - 1), i); assert forall i: int {:trigger IsSet(bm, i)} {:trigger bm[i]} | 0 <= i < n - 1 :: bm[i] == IsSet(bm, i); assert forall i: int | 0 <= i < n - 1 :: EmptyBitmap(n - 1)[i] == IsSet(EmptyBitmap(n - 1), i); assert forall i: int {:trigger bm[i]} | 0 <= i < n - 1 :: bm[i] == EmptyBitmap(n - 1)[i]; assert forall i: int {:trigger IsSet(bm, i)} | 0 <= i < n - 1 :: !IsSet(bm, i); assert !IsSet(bm, n - 1); assert forall i: int {:trigger IsSet(bm, i)} | 0 <= i < n :: !IsSet(bm, i); bm
  }
  function BitAllocIter(bm: BitmapModelT, i: int): (res: Option<int>)
    requires 0 <= i <= |bm|
    ensures res.Some? ==> 0 <= res.value < |bm|
    decreases |bm| - i
  {
    if i == |bm| then
      None
    else if !bm[i] then
      Some(i)
    else
      BitAllocIter(bm, i + 1)
  }
  function {:opaque} {:fuel 0, 0} BitAlloc(bm: BitmapModelT): (res: Option<int>)
    ensures res.Some? ==> 0 <= res.value < Len(bm)
    decreases bm
  {
    BitAllocIter(bm, 0)
  }
  function {:opaque} {:fuel 0, 0} BitUnion(a: BitmapModelT, b: BitmapModelT): (res: BitmapModelT)
    requires Len(a) == Len(b)
    ensures Len(res) == Len(a)
    ensures forall i: int {:trigger IsSet(b, i)} {:trigger IsSet(a, i)} {:trigger IsSet(res, i)} | 0 <= i < Len(res) :: IsSet(res, i) == (IsSet(a, i) || IsSet(b, i))
    decreases a, b
  {
    reveal_IsSet();
    if |a| == 0 then
      []
    else
      var res: seq<bool> := BitUnion(a[..|a| - 1], b[..|b| - 1]) + [a[|a| - 1] || b[|b| - 1]]; assert IsSet(res, |a| - 1) == (IsSet(a, |a| - 1) || IsSet(b, |a| - 1)); assert forall i: int {:trigger IsSet(a, i)} | 0 <= i < Len(res) - 1 :: IsSet(a, i) == IsSet(a[..|a| - 1], i); assert forall i: int {:trigger IsSet(b, i)} | 0 <= i < Len(res) - 1 :: IsSet(b, i) == IsSet(b[..|a| - 1], i); assert forall i: int {:trigger IsSet(b, i)} {:trigger IsSet(a, i)} {:trigger IsSet(res, i)} | 0 <= i < Len(res) - 1 :: IsSet(res, i) == (IsSet(a, i) || IsSet(b, i)); assert forall i: int {:trigger IsSet(b, i)} {:trigger IsSet(a, i)} {:trigger IsSet(res, i)} | 0 <= i < Len(res) :: IsSet(res, i) == (IsSet(a, i) || IsSet(b, i)); res
  }
  lemma  LemmaBitAllocIterResult(bm: BitmapModelT, i: int)
    requires 0 <= i <= |bm|
    ensures var j: Option<int> := BitAllocIter(bm, i); true && (j.Some? ==> !IsSet(bm, j.value))
    decreases |bm| - i
  {
    reveal_IsSet();
    if i == |bm| {
    } else if !bm[i] {
    } else {
      LemmaBitAllocIterResult(bm, i + 1);
    }
  }
  lemma LemmaBitAllocResult(bm: BitmapModelT)
    ensures var j: Option<int> := BitAlloc(bm); true && (j.Some? ==> !IsSet(bm, j.value))
    decreases bm
  {
    reveal_BitAlloc();
    LemmaBitAllocIterResult(bm, 0);
  }
  lemma  LemmaBitAllocIterResultStronger(bm: BitmapModelT, i: int)
    requires 0 <= i <= |bm|
    ensures var j: Option<int> := BitAllocIter(bm, i); (j.Some? ==> !IsSet(bm, j.value)) && (j.Some? ==> forall k: int {:trigger IsSet(bm, k)} | i <= k < j.value :: IsSet(bm, k)) && (j.None? ==> forall k: int {:trigger IsSet(bm, k)} | i <= k < Len(bm) :: IsSet(bm, k))
    decreases |bm| - i
  {
    reveal_IsSet();
    if i == |bm| {
    } else if !bm[i] {
    } else {
      LemmaBitAllocIterResultStronger(bm, i + 1);
    }
  }
  lemma LemmaBitAllocResultStronger(bm: BitmapModelT)
    ensures var j: Option<int> := BitAlloc(bm); (j.Some? ==> !IsSet(bm, j.value)) && (j.Some? ==> forall i: int {:trigger IsSet(bm, i)} | 0 <= i < j.value :: IsSet(bm, i)) && (j.None? ==> forall i: int {:trigger IsSet(bm, i)} | 0 <= i < Len(bm) :: IsSet(bm, i))
    decreases bm
  {
    reveal_BitAlloc();
    reveal_IsSet();
    LemmaBitAllocIterResultStronger(bm, 0);
  }
}