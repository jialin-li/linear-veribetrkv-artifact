// FlushPolicyModel.i.dfy
module FlushPolicyModel {
  datatype Action = ActionPageIn(ref: BT.G.Reference) | ActionSplit(parentref: BT.G.Reference, slot: uint64) | ActionFlush(parentref: BT.G.Reference, slot: uint64) | ActionRepivot(ref: BT.G.Reference) | ActionGrow | ActionEvict | ActionFail
  function biggestSlotIterate(buckets: seq<Bucket>, j: uint64, bestIdx: uint64, bestWeight: uint64): (res: (uint64, uint64))
    requires 0 <= bestIdx as int < |buckets|
    requires 0 <= bestWeight as int <= MaxTotalBucketWeight()
    requires 1 <= j as int <= |buckets| <= MaxNumChildren()
    requires forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: WFBucket(buckets[i])
    requires WeightBucketList(buckets) <= MaxTotalBucketWeight()
    requires WeightBucket(buckets[bestIdx]) == bestWeight as int
    ensures 0 <= res.0 as int < |buckets|
    ensures 0 <= res.1 as int <= MaxTotalBucketWeight()
    ensures WeightBucket(buckets[res.0]) == res.1 as int
    decreases |buckets| - j as int
  {
    if j == |buckets| as uint64 then
      (bestIdx, bestWeight)
    else
      WeightBucketLeBucketList(buckets, j as int); var w: uint64 := WeightBucket(buckets[j]) as uint64; if w > bestWeight then biggestSlotIterate(buckets, j + 1, j, w) else biggestSlotIterate(buckets, j + 1, bestIdx, bestWeight)
  }
  function biggestSlot(buckets: seq<Bucket>): (res: (uint64, uint64))
    requires |buckets| > 0
    requires |buckets| <= MaxNumChildren()
    requires forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: WFBucket(buckets[i])
    requires WeightBucketList(buckets) <= MaxTotalBucketWeight()
    ensures 0 <= res.0 as int < |buckets|
    ensures 0 <= res.1 as int <= MaxTotalBucketWeight()
    ensures WeightBucket(buckets[res.0]) == res.1 as int
    decreases buckets
  {
    WeightBucketLeBucketList(buckets, 0);
    biggestSlotIterate(buckets, 1, 0, WeightBucket(buckets[0]) as uint64)
  }
  predicate ValidStackSlots(k: Constants, s: BCVariables, stack: seq<BT.G.Reference>, slots: seq<uint64>)
    decreases k, s, stack, slots
  {
    |stack| == |slots| + 1 &&
    s.Ready? &&
    (forall j: int {:trigger stack[j]} | 0 <= j < |stack| :: 
      stack[j] in s.cache) &&
    (forall j: int {:trigger stack[j]} | 0 <= j < |stack| - 1 :: 
      s.cache[stack[j]].children.Some?) &&
    (forall j: int {:trigger stack[j]} {:trigger slots[j]} | 0 <= j < |stack| - 1 :: 
      slots[j] as int < |s.cache[stack[j]].children.value| &&
      |s.cache[stack[j]].children.value| <= MaxNumChildren()) &&
    forall j: int {:trigger stack[j]} {:trigger slots[j]} | 0 <= j < |stack| - 1 :: 
      slots[j] as int < |s.cache[stack[j]].children.value| &&
      |s.cache[stack[j]].children.value| <= MaxNumChildren()
  }
  predicate ValidAction(k: Constants, s: BCVariables, action: Action)
    decreases k, s, action
  {
    s.Ready? &&
    (action.ActionPageIn? ==>
      action.ref in s.ephemeralIndirectionTable.graph &&
      action.ref !in s.cache &&
      action.ref in s.ephemeralIndirectionTable.locs &&
      TotalCacheSize(s) <= MaxCacheSize() - 1) &&
    (action.ActionSplit? || action.ActionFlush? ==>
      action.parentref in s.ephemeralIndirectionTable.graph &&
      action.parentref in s.cache &&
      s.cache[action.parentref].children.Some? &&
      0 <= action.slot as int < |s.cache[action.parentref].children.value| &&
      s.cache[action.parentref].children.value[action.slot] in s.cache &&
      s.cache[action.parentref].children.value[action.slot] in s.ephemeralIndirectionTable.graph) &&
    (action.ActionSplit? ==>
      |s.cache[s.cache[action.parentref].children.value[action.slot]].buckets| >= 2 &&
      |s.cache[action.parentref].buckets| <= MaxNumChildren() - 1 &&
      TotalCacheSize(s) <= MaxCacheSize() - 2) &&
    (action.ActionFlush? ==>
      true &&
      TotalCacheSize(s) <= MaxCacheSize() - 1) &&
    (action.ActionGrow? ==>
      true &&
      TotalCacheSize(s) <= MaxCacheSize() - 1) &&
    (action.ActionRepivot? ==>
      action.ref in s.ephemeralIndirectionTable.graph &&
      action.ref in s.cache &&
      s.cache[action.ref].children.None? &&
      |s.cache[action.ref].buckets| == 1)
  }
  function {:opaque} {:fuel 0, 0} getActionToSplit(k: Constants, s: BCVariables, stack: seq<BT.G.Reference>, slots: seq<uint64>, i: uint64): (action: Action)
    requires 0 <= i as int < |stack|
    requires WFBCVars(s)
    requires ValidStackSlots(k, s, stack, slots)
    decreases k, s, stack, slots, i
  {
    if i == 0 then
      if TotalCacheSize(s) <= MaxCacheSize() - 1 then
        ActionGrow
      else
        ActionEvict
    else
      if |s.cache[stack[i - 1]].children.value| as uint64 < MaxNumChildren() as uint64 then if |s.cache[stack[i]].buckets| as uint64 == 1 then ActionRepivot(stack[i]) else if TotalCacheSize(s) <= MaxCacheSize() - 2 then ActionSplit(stack[i - 1], slots[i - 1]) else ActionEvict else getActionToSplit(k, s, stack, slots, i - 1)
  }
  function {:opaque} {:fuel 0, 0} getActionToFlush(k: Constants, s: BCVariables, stack: seq<BT.G.Reference>, slots: seq<uint64>): (BCVariables, Action)
    requires |stack| <= 40
    requires ValidStackSlots(k, s, stack, slots)
    requires WFBCVars(s)
    decreases 18446744073709551616 - |stack|
  {
    if |stack| as uint64 == 40 then
      (s, ActionFail)
    else
      var ref: NativeTypes.uint64 := stack[|stack| as uint64 - 1]; var node: Node := s.cache[ref]; if node.children.None? || |node.buckets| == MaxNumChildren() then (s, getActionToSplit(k, s, stack, slots, |stack| as uint64 - 1)) else var (slot: uint64, slotWeight: uint64) := biggestSlot(node.buckets); if |node.buckets| < 8 then var childref: NativeTypes.uint64 := node.children.value[slot]; if childref in s.cache then var child: Node := s.cache[childref]; var s1: BCVariables := s.(lru := LruModel.Use(s.lru, childref)); LruModel.LruUse(s.lru, childref); assert IBlockCache(s) == IBlockCache(s1); var childTotalWeight: uint64 := WeightBucketList(child.buckets) as uint64; if childTotalWeight + FlushTriggerWeight() as uint64 <= MaxTotalBucketWeight() as uint64 then if TotalCacheSize(s1) <= MaxCacheSize() - 1 then (s1, ActionFlush(ref, slot)) else (s1, ActionEvict) else getActionToFlush(k, s1, stack + [childref], slots + [slot]) else if TotalCacheSize(s) <= MaxCacheSize() - 1 then (s, ActionPageIn(childref)) else (s, ActionEvict) else (s, getActionToSplit(k, s, stack, slots, |stack| as uint64 - 1))
  }
  lemma  getActionToSplitValidAction(k: Constants, s: BCVariables, stack: seq<BT.G.Reference>, slots: seq<uint64>, i: uint64)
    requires 0 <= i as int < |stack|
    requires BCInv(k, s)
    requires ValidStackSlots(k, s, stack, slots)
    requires forall j: int {:trigger stack[j]} | 0 <= j < |stack| :: stack[j] in s.ephemeralIndirectionTable.graph
    requires forall j: int, _t#0: int {:trigger stack[_t#0], slots[j]} {:trigger stack[_t#0], stack[j]} | _t#0 == j + 1 :: 0 <= j && j < |stack| - 1 ==> s.cache[stack[j]].children.value[slots[j]] == stack[_t#0]
    requires s.cache[stack[|stack| - 1]].children.Some? ==> |s.cache[stack[|stack| - 1]].buckets| >= 2
    requires i as int < |stack| - 1 ==> |s.cache[stack[i]].buckets| >= MaxNumChildren()
    ensures ValidAction(k, s, getActionToSplit(k, s, stack, slots, i))
    ensures var action: Action := getActionToSplit(k, s, stack, slots, i); action.ActionGrow? || action.ActionRepivot? || action.ActionSplit? || action.ActionEvict?
    decreases k, s, stack, slots, i
  {
    reveal_getActionToSplit();
    ghost var action: Action := getActionToSplit(k, s, stack, slots, i);
    if i == 0 {
    } else {
      if |s.cache[stack[i - 1]].children.value| as uint64 < MaxNumChildren() as uint64 {
      } else {
        getActionToSplitValidAction(k, s, stack, slots, i - 1);
      }
    }
  }
  lemma  getActionToFlushValidAction(k: Constants, s: BCVariables, stack: seq<BT.G.Reference>, slots: seq<uint64>)
    requires |stack| <= 40
    requires ValidStackSlots(k, s, stack, slots)
    requires BCInv(k, s)
    requires forall j: int {:trigger stack[j]} | 0 <= j < |stack| :: stack[j] in s.ephemeralIndirectionTable.graph
    requires forall j: int, _t#0: int {:trigger stack[_t#0], slots[j]} {:trigger stack[_t#0], stack[j]} | _t#0 == j + 1 :: 0 <= j && j < |stack| - 1 ==> s.cache[stack[j]].children.value[slots[j]] == stack[_t#0]
    ensures var (s': BCVariables, action: Action) := getActionToFlush(k, s, stack, slots); WFBCVars(s') && IBlockCache(s) == IBlockCache(s') && ValidAction(k, s', action)
    decreases 18446744073709551616 - |stack|
  {
    reveal_getActionToFlush();
    ghost var action: Action := getActionToFlush(k, s, stack, slots).1;
    if |stack| as uint64 == 40 {
    } else {
      ghost var ref: NativeTypes.uint64 := stack[|stack| as uint64 - 1];
      ghost var node: Node := s.cache[ref];
      if node.children.None? || |node.buckets| == MaxNumChildren() {
        getActionToSplitValidAction(k, s, stack, slots, |stack| as uint64 - 1);
      } else {
        var (slot: uint64, slotWeight: uint64) := biggestSlot(node.buckets);
        if |node.buckets| < 8 {
          ghost var childref: NativeTypes.uint64 := node.children.value[slot];
          lemmaChildInGraph(k, s, ref, childref);
          if childref in s.cache {
            ghost var child: Node := s.cache[childref];
            ghost var s1: BCVariables := s.(lru := LruModel.Use(s.lru, childref));
            LruModel.LruUse(s.lru, childref);
            ghost var childTotalWeight: uint64 := WeightBucketList(child.buckets) as uint64;
            if childTotalWeight + FlushTriggerWeight() as uint64 <= MaxTotalBucketWeight() as uint64 {
              assert ValidAction(k, s1, action);
            } else {
              getActionToFlushValidAction(k, s1, stack + [childref], slots + [slot]);
            }
          } else {
            assert childref !in IBlockCache(s).cache;
            assert childref in IIndirectionTable(s.ephemeralIndirectionTable).graph;
            assert childref in IIndirectionTable(s.ephemeralIndirectionTable).locs;
            assert ValidAction(k, s, action);
          }
        } else {
          getActionToSplitValidAction(k, s, stack, slots, |stack| as uint64 - 1);
        }
      }
    }
  }
  predicate {:opaque} {:fuel 0, 0} runFlushPolicy(k: Constants, s: BCVariables, io: IO, s': BCVariables, io': IO)
    requires BCInv(k, s)
    requires io.IOInit?
    requires s.Ready?
    requires |s.ephemeralIndirectionTable.graph| <= IndirectionTableModel.MaxSize() - 3
    requires BT.G.Root() in s.cache
    decreases k, s, io, s', io'
  {
    var s0: BCVariables := s.(lru := LruModel.Use(s.lru, BT.G.Root()));
    LruModel.LruUse(s.lru, BT.G.Root());
    assert IBlockCache(s0) == IBlockCache(s);
    var (s1: BCVariables, action: Action) := getActionToFlush(k, s0, [BT.G.Root()], []);
    getActionToFlushValidAction(k, s0, [BT.G.Root()], []);
    match action {
      case ActionPageIn(ref) =>
        (s', io') == PageInNodeReq(k, s1, io, ref)
      case ActionSplit(parentref, slot) =>
        s' == doSplit(k, s1, parentref, s1.cache[parentref].children.value[slot], slot as int) &&
        io' == io
      case ActionRepivot(ref) =>
        s' == repivotLeaf(k, s1, ref, s1.cache[ref]) &&
        io' == io
      case ActionFlush(parentref, slot) =>
        s' == flush(k, s1, parentref, slot as int, s1.cache[parentref].children.value[slot], s1.cache[s1.cache[parentref].children.value[slot]]) &&
        io' == io
      case ActionGrow =>
        s' == grow(k, s1) &&
        io' == io
      case ActionEvict =>
        EvictOrDealloc(k, s1, io, s', io')
      case ActionFail =>
        s' == s1 &&
        io' == io
    }
  }
  lemma runFlushPolicyCorrect(k: Constants, s: BCVariables, io: IO, s': BCVariables, io': IO)
    requires BCInv(k, s)
    requires io.IOInit?
    requires s.Ready?
    requires BT.G.Root() in s.cache
    requires |s.ephemeralIndirectionTable.graph| <= IndirectionTableModel.MaxSize() - 3
    requires runFlushPolicy(k, s, io, s', io')
    ensures WFBCVars(s')
    ensures ValidDiskOp(diskOp(io'))
    ensures IDiskOp(diskOp(io')).jdop.NoDiskOp?
    ensures betree_next_dop(k, IBlockCache(s), IBlockCache(s'), IDiskOp(diskOp(io')).bdop)
    decreases k, s, io, s', io'
  {
    ghost var s0: BCVariables := s.(lru := LruModel.Use(s.lru, BT.G.Root()));
    LruModel.LruUse(s.lru, BT.G.Root());
    assert IBlockCache(s0) == IBlockCache(s);
    var (s1: BCVariables, action: Action) := getActionToFlush(k, s0, [BT.G.Root()], []);
    getActionToFlushValidAction(k, s0, [BT.G.Root()], []);
    reveal_runFlushPolicy();
    match action {
      case ActionPageIn(ref) =>
        {
          PageInNodeReqCorrect(k, s1, io, ref);
        }
      case ActionSplit(parentref, slot) =>
        {
          doSplitCorrect(k, s1, parentref, s1.cache[parentref].children.value[slot], slot as int);
        }
      case ActionRepivot(ref) =>
        {
          repivotLeafCorrect(k, s1, ref, s1.cache[ref]);
        }
      case ActionFlush(parentref, slot) =>
        {
          flushCorrect(k, s1, parentref, slot as int, s1.cache[parentref].children.value[slot], s1.cache[s1.cache[parentref].children.value[slot]]);
        }
      case ActionGrow =>
        {
          growCorrect(k, s1);
        }
      case ActionEvict =>
        {
          EvictOrDeallocCorrect(k, s1, io, s', io');
        }
      case ActionFail =>
        {
          assert noop(k, IBlockCache(s), IBlockCache(s1));
        }
    }
  }
}