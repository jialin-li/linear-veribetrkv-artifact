// NodeImpl.i.dfy
module NodeImpl {
  class Node {
    var pivotTable: Pivots.PivotTable
    var children: Option<seq<BT.G.Reference>>
    var buckets: seq<BucketImpl.MutBucket>
    ghost var Repr: set<object>
    constructor (pivotTable: Pivots.PivotTable, children: Option<seq<BT.G.Reference>>, buckets: seq<BucketImpl.MutBucket>)
      requires forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: buckets[i].Inv()
      requires MutBucket.ReprSeqDisjoint(buckets)
      ensures this.pivotTable == pivotTable
      ensures this.children == children
      ensures this.buckets == buckets
      ensures Inv()
      ensures forall o: object {:trigger o in old(MutBucket.ReprSeq(buckets))} {:trigger o in Repr} | o in Repr :: fresh(o) || o in old(MutBucket.ReprSeq(buckets))
      decreases pivotTable, children, buckets
    {
      this.pivotTable := pivotTable;
      this.children := children;
      this.buckets := buckets;
      new;
      this.Repr := {this} + MutBucket.ReprSeq(buckets);
      MutBucket.reveal_ReprSeq();
    }
    protected predicate Inv()
      reads this, Repr
      ensures Inv() ==> this in Repr
      ensures Inv() ==> forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: buckets[i].Inv()
      decreases Repr + {this}
    {
      (forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: 
        buckets[i] in Repr) &&
      Repr == {this} + MutBucket.ReprSeq(buckets) &&
      MutBucket.ReprSeqDisjoint(buckets) &&
      MutBucket.reveal_ReprSeq(); (forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: buckets[i].Inv()) && forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: this !in buckets[i].Repr
    }
    lemma  LemmaRepr()
      requires Inv()
      ensures Repr == {this} + MutBucket.ReprSeq(buckets)
    {
    }
    function I(): IM.Node
      requires Inv()
      reads this, Repr
      decreases Repr + {this}
    {
      IM.Node(pivotTable, children, BucketImpl.MutBucket.ISeq(buckets))
    }
    method BucketWellMarshalled(slot: uint64) returns (result: bool)
      requires Inv()
      requires slot as nat < |buckets|
      ensures result == BucketsLib.BucketWellMarshalled(buckets[slot].I())
      decreases slot
    {
      result := buckets[slot].WellMarshalled();
    }
    method BucketsWellMarshalled() returns (result: bool)
      requires Inv()
      requires |buckets| < Uint64UpperBound()
      ensures result == BucketsLib.BucketListWellMarshalled(MutBucket.ISeq(buckets))
    {
      var i: uint64 := 0;
      while i < |buckets| as uint64
        invariant i as nat <= |buckets|
        invariant BucketListWellMarshalled(MutBucket.ISeq(buckets[..i]))
        decreases |buckets| as uint64 as int - i as int
      {
        var bwm: bool := buckets[i].WellMarshalled();
        if !bwm {
          return false;
        }
        assert buckets[..i + 1] == buckets[..i] + [buckets[i]];
        i := i + 1;
      }
      assert buckets == buckets[..i];
      return true;
    }
    method UpdateSlot(slot: uint64, bucket: BucketImpl.MutBucket, childref: BT.G.Reference)
      requires Inv()
      requires bucket.Inv()
      requires children.Some?
      requires 0 <= slot as int < |children.value|
      requires 0 <= slot as int < |buckets|
      requires slot as int + 1 < 18446744073709551616
      requires bucket.Repr !! Repr
      modifies Repr
      ensures Inv()
      ensures I() == old(IM.Node(I().pivotTable, Some(I().children.value[slot as int := childref]), I().buckets[slot as int := bucket.Bucket]))
      ensures forall o: object {:trigger o in old(bucket.Repr)} {:trigger o in old(Repr)} {:trigger o in Repr} | o in Repr :: o in old(Repr) || o in old(bucket.Repr) || fresh(o)
      decreases slot, bucket, childref
    {
      buckets := SeqIndexUpdate(buckets, slot, bucket);
      children := Some(SeqIndexUpdate(children.value, slot, childref));
      MutBucket.reveal_ReprSeq();
      MutBucket.reveal_ReprSeqDisjoint();
      Repr := {this} + MutBucket.ReprSeq(buckets);
      assert Inv();
    }
    lemma  LemmaReprFacts()
      requires Repr == {this} + MutBucket.ReprSeq(buckets)
      requires forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: buckets[i].Inv()
      ensures forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: buckets[i] in Repr
    {
      MutBucket.reveal_ReprSeq();
    }
    twostate lemma  SplitParentReprSeqFacts(new s: seq<MutBucket>)
      requires forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: this !in buckets[i].Repr
      requires forall o: object {:trigger o in MutBucket.ReprSeq(buckets)} {:trigger o in MutBucket.ReprSeq(s)} | o in MutBucket.ReprSeq(s) :: o in MutBucket.ReprSeq(buckets) || fresh(o)
      ensures forall i: int {:trigger s[i]} | 0 <= i < |s| :: this !in s[i].Repr
      ensures this !in MutBucket.ReprSeq(s)
      ensures forall o: object {:trigger o in MutBucket.ReprSeq(s)} :: o in MutBucket.ReprSeq(s) ==> allocated(o)
      decreases s
    {
      MutBucket.reveal_ReprSeq();
      forall i: int {:trigger s[i]} | 0 <= i < |s|
        ensures this !in s[i].Repr
      {
        if this in s[i].Repr {
          assert this in MutBucket.ReprSeq(s);
        }
      }
    }
    method SplitParent(slot: uint64, pivot: Key, left_childref: BT.G.Reference, right_childref: BT.G.Reference)
      requires Inv()
      requires IM.WFNode(I())
      requires children.Some?
      requires 0 <= slot as int < |children.value|
      requires 0 <= slot as int < |buckets|
      requires children.Some?
      modifies Repr
      ensures Inv()
      ensures I() == old(NodeModel.SplitParent(I(), pivot, slot as int, left_childref, right_childref))
      ensures forall o: object {:trigger o in old(Repr)} {:trigger o in Repr} | o in Repr :: o in old(Repr) || fresh(o)
      decreases slot, pivot, left_childref, right_childref
    {
      ghost var b: Node := NodeModel.SplitParent(I(), pivot, slot as int, left_childref, right_childref);
      NodeModel.reveal_SplitParent();
      this.pivotTable := Sequences.Insert(this.pivotTable, pivot, slot);
      ghost var node2: IM.Node := I();
      var bucks: seq<MutBucket> := MutBucket.SplitOneInList(this.buckets, slot, pivot);
      assert forall o: object {:trigger o in MutBucket.ReprSeq(this.buckets)} {:trigger o in MutBucket.ReprSeq(bucks)} | o in MutBucket.ReprSeq(bucks) :: o in MutBucket.ReprSeq(this.buckets) || fresh(o);
      assert MutBucket.ISeq(bucks) == SplitBucketInList(node2.buckets, slot as int, pivot);
      assert node2.buckets == old(I()).buckets;
      SplitParentReprSeqFacts(bucks);
      this.buckets := bucks;
      var childrenReplaced: seq<NativeTypes.uint64> := Replace1with2(children.value, left_childref, right_childref, slot);
      this.children := Some(childrenReplaced);
      Repr := {this} + MutBucket.ReprSeq(buckets);
      LemmaReprFacts();
      assert Inv();
      assert forall o: object {:trigger o in old(Repr)} {:trigger o in Repr} | o in Repr :: o in old(Repr) || fresh(o);
      ghost var a: IM.Node := I();
      assert a == b;
    }
    lemma ReprSeqDisjointAppend(s: seq<MutBucket>, t: MutBucket)
      requires MutBucket.ReprSeqDisjoint(s)
      requires MutBucket.ReprSeq(s) !! t.Repr
      ensures MutBucket.ReprSeqDisjoint(s + [t])
      decreases s, t
    {
      MutBucket.reveal_ReprSeqDisjoint();
      MutBucket.reveal_ReprSeq();
    }
    lemma ReprSeqAppend(s: seq<MutBucket>, t: MutBucket)
      ensures MutBucket.ReprSeq(s + [t]) == MutBucket.ReprSeq(s) + t.Repr
      decreases s, t
    {
      MutBucket.reveal_ReprSeq();
      ghost var a: set<object> := MutBucket.ReprSeq(s + [t]);
      ghost var b: set<object> := MutBucket.ReprSeq(s) + t.Repr;
      forall o: object {:trigger o in b} {:trigger o in a} | o in a
        ensures o in b
      {
      }
      forall o: object {:trigger o in a} {:trigger o in b} | o in b
        ensures o in a
      {
        if o in MutBucket.ReprSeq(s) {
          ghost var i: int :| 0 <= i < |s| && o in s[i].Repr;
          assert o in (s + [t])[i].Repr;
          assert o in a;
        } else {
          assert o in (s + [t])[|s|].Repr;
          assert o in a;
        }
      }
    }
    method CutoffNodeAndKeepLeft(pivot: Key) returns (node': Node)
      requires Inv()
      requires IM.WFNode(I())
      ensures node'.Inv()
      ensures node'.I() == NodeModel.CutoffNodeAndKeepLeft(old(I()), pivot)
      decreases pivot
    {
      NodeModel.reveal_CutoffNodeAndKeepLeft();
      var cLeft: uint64 := Pivots.ComputeCutoffForLeft(this.pivotTable, pivot);
      var leftPivots: seq<Key> := this.pivotTable[..cLeft];
      var leftChildren: Option<seq<BT.G.Reference>> := if this.children.Some? then Some(this.children.value[..cLeft + 1]) else None;
      WeightBucketLeBucketList(MutBucket.ISeq(this.buckets), cLeft as int);
      var splitBucket: MutBucket := this.buckets[cLeft].SplitLeft(pivot);
      var slice: seq<MutBucket> := MutBucket.CloneSeq(this.buckets[..cLeft]);
      var leftBuckets: seq<MutBucket> := slice + [splitBucket];
      ReprSeqDisjointAppend(slice, splitBucket);
      ReprSeqAppend(slice, splitBucket);
      node' := new Node(leftPivots, leftChildren, leftBuckets);
    }
    static lemma ReprSeqDisjointPrepend(t: MutBucket, s: seq<MutBucket>)
      requires MutBucket.ReprSeqDisjoint(s)
      requires MutBucket.ReprSeq(s) !! t.Repr
      ensures MutBucket.ReprSeqDisjoint([t] + s)
      decreases t, s
    {
      MutBucket.reveal_ReprSeqDisjoint();
      MutBucket.reveal_ReprSeq();
    }
    static lemma ReprSeqPrepend(t: MutBucket, s: seq<MutBucket>)
      ensures MutBucket.ReprSeq([t] + s) == MutBucket.ReprSeq(s) + t.Repr
      decreases t, s
    {
      MutBucket.ReprSeqAdditive([t], s);
      MutBucket.ReprSeq1Eq([t]);
    }
    method CutoffNodeAndKeepRight(pivot: Key) returns (node': Node)
      requires Inv()
      requires IM.WFNode(I())
      ensures node'.Inv()
      ensures node'.I() == NodeModel.CutoffNodeAndKeepRight(old(I()), pivot)
      decreases pivot
    {
      NodeModel.reveal_CutoffNodeAndKeepRight();
      var cRight: uint64 := Pivots.ComputeCutoffForRight(this.pivotTable, pivot);
      var rightPivots: seq<Key> := this.pivotTable[cRight..];
      var rightChildren: Option<seq<BT.G.Reference>> := if this.children.Some? then Some(this.children.value[cRight..]) else None;
      WeightBucketLeBucketList(MutBucket.ISeq(this.buckets), cRight as int);
      var splitBucket: MutBucket := this.buckets[cRight].SplitRight(pivot);
      var slice: seq<MutBucket> := MutBucket.CloneSeq(this.buckets[cRight + 1..]);
      var rightBuckets: seq<MutBucket> := [splitBucket] + slice;
      ReprSeqDisjointPrepend(splitBucket, slice);
      ReprSeqPrepend(splitBucket, slice);
      node' := new Node(rightPivots, rightChildren, rightBuckets);
      assert node'.I().buckets == NodeModel.CutoffNodeAndKeepRight(old(I()), pivot).buckets;
      assert node'.I().children == NodeModel.CutoffNodeAndKeepRight(old(I()), pivot).children;
      assert node'.I().pivotTable == NodeModel.CutoffNodeAndKeepRight(old(I()), pivot).pivotTable;
    }
    static method CutoffNode(node: Node, lbound: Option<Key>, rbound: Option<Key>)
        returns (node': Node)
      requires node.Inv()
      requires IM.WFNode(node.I())
      ensures node'.Inv()
      ensures node'.I() == NodeModel.CutoffNode(old(node.I()), lbound, rbound)
      decreases node, lbound, rbound
    {
      NodeModel.reveal_CutoffNode();
      match lbound {
        case None =>
          {
            match rbound {
              case None =>
                {
                  node' := node;
                }
              case Some(rbound) =>
                {
                  node' := node.CutoffNodeAndKeepLeft(rbound);
                }
            }
          }
        case Some(lbound) =>
          {
            match rbound {
              case None =>
                {
                  node' := node.CutoffNodeAndKeepRight(lbound);
                }
              case Some(rbound) =>
                {
                  var node1 := node.CutoffNodeAndKeepLeft(rbound);
                  NodeModel.CutoffNodeAndKeepLeftCorrect(node.I(), rbound);
                  node' := node1.CutoffNodeAndKeepRight(lbound);
                }
            }
          }
      }
    }
    method SplitChildLeft(num_children_left: uint64) returns (node': Node)
      requires Inv()
      requires 0 <= num_children_left as int - 1 <= |this.pivotTable|
      requires this.children.Some? ==> 0 <= num_children_left as int <= |this.children.value|
      requires 0 <= num_children_left as int <= |this.buckets|
      ensures node'.Inv()
      ensures node'.I() == old(NodeModel.SplitChildLeft(I(), num_children_left as int))
      ensures fresh(node'.Repr)
      decreases num_children_left
    {
      NodeModel.reveal_SplitChildLeft();
      var slice: seq<MutBucket> := MutBucket.CloneSeq(this.buckets[..num_children_left]);
      node' := new Node(this.pivotTable[..num_children_left - 1], if this.children.Some? then Some(this.children.value[..num_children_left]) else None, slice);
    }
    method SplitChildRight(num_children_left: uint64) returns (node': Node)
      requires Inv()
      requires 0 <= num_children_left as int <= |this.pivotTable|
      requires this.children.Some? ==> 0 <= num_children_left as int <= |this.children.value|
      requires 0 <= num_children_left as int <= |this.buckets|
      requires |this.buckets| < 18446744073709551616
      ensures node'.Inv()
      ensures node'.I() == old(NodeModel.SplitChildRight(I(), num_children_left as int))
      ensures fresh(node'.Repr)
      decreases num_children_left
    {
      NodeModel.reveal_SplitChildRight();
      var slice: seq<MutBucket> := MutBucket.CloneSeq(this.buckets[num_children_left..]);
      node' := new Node(this.pivotTable[num_children_left..], if this.children.Some? then Some(this.children.value[num_children_left..]) else None, slice);
    }
    twostate lemma ReprSeqDisjointAfterUpdate(buckets: seq<MutBucket>, r: int)
      requires 0 <= r < |buckets|
      requires old(MutBucket.ReprSeqDisjoint(buckets))
      requires forall o: object {:trigger o in old(buckets[r].Repr)} {:trigger o in buckets[r].Repr} | o in buckets[r].Repr :: o in old(buckets[r].Repr) || fresh(o)
      requires forall i: int {:trigger old(buckets[i])} {:trigger buckets[i]} | 0 <= i < |buckets| && i != r :: buckets[i].Repr == old(buckets[i].Repr)
      ensures MutBucket.ReprSeqDisjoint(buckets)
      decreases buckets, r
    {
      MutBucket.reveal_ReprSeqDisjoint();
      MutBucket.reveal_ReprSeq();
    }
    twostate lemma ReprSeqReplace(buckets: seq<MutBucket>, r: int)
      requires 0 <= r < |buckets|
      requires forall i: int {:trigger old(buckets[i])} {:trigger buckets[i]} | 0 <= i < |buckets| && i != r :: buckets[i].Repr == old(buckets[i].Repr)
      ensures MutBucket.ReprSeq(buckets) <= old(MutBucket.ReprSeq(buckets)) + buckets[r].Repr
      decreases buckets, r
    {
      MutBucket.reveal_ReprSeq();
    }
    method InsertKeyValue(key: Key, msg: Message)
      requires Inv()
      requires IM.WFNode(I())
      requires WeightBucketList(MutBucket.ISeq(buckets)) + WeightKey(key) + WeightMessage(msg) < 18446744073709551616
      modifies Repr
      ensures Inv()
      ensures forall o: object {:trigger o in old(Repr)} {:trigger o in Repr} | o in Repr :: o in old(Repr) || fresh(o)
      ensures I() == NodeModel.NodeInsertKeyValue(old(I()), key, msg)
      decreases key, msg
    {
      NodeModel.reveal_NodeInsertKeyValue();
      var r: uint64 := Pivots.ComputeRoute(pivotTable, key);
      MutBucket.LemmaReprBucketLeReprSeq(buckets, r as int);
      WeightBucketLeBucketList(MutBucket.ISeq(buckets), r as int);
      buckets[r].Insert(key, msg);
      forall i: int {:trigger old(buckets[i])} {:trigger buckets[i]} | 0 <= i < |buckets|
        ensures buckets[i].Inv() && (i != r as int ==> buckets[i].Bucket == old(buckets[i].Bucket)) && (i != r as int ==> buckets[i].Repr == old(buckets[i].Repr)) && this !in buckets[i].Repr
      {
        MutBucket.reveal_ReprSeqDisjoint();
      }
      ReprSeqDisjointAfterUpdate(buckets, r as int);
      ReprSeqReplace(buckets, r as int);
      Repr := {this} + MutBucket.ReprSeq(buckets);
      LemmaReprFacts();
      assert Inv();
      assert I().buckets == NodeModel.NodeInsertKeyValue(old(I()), key, msg).buckets;
    }
    lemma  LemmaReprSeqBucketsLeRepr()
      requires Inv()
      ensures MutBucket.ReprSeq(buckets) <= Repr
    {
    }
  }
}