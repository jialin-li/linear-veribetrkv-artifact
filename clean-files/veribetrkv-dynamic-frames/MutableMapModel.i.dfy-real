// MutableMapModel.i.dfy
module MutableMapModel {
  datatype Slot = Slot(ghost slot: nat)
  datatype Item<V> = Empty | Entry(key: uint64, value: V) | Tombstone(key: uint64)
  datatype FixedSizeLinearHashMap<V> = FixedSizeLinearHashMap(storage: seq<Item<V>>, count: uint64, contents: map<uint64, Option<V>>)
  datatype ProbeResult<V> = ProbeResult(slotIdx: uint64, ghost startSlotIdx: uint64, ghost ghostSkips: uint64)
  datatype LinearHashMap<V> = LinearHashMap(underlying: FixedSizeLinearHashMap<V>, count: uint64, contents: map<uint64, V>)
  datatype IteratorOutput<V> = Next(key: uint64, value: V) | Done
  datatype Iterator<V> = Iterator(i: uint64, ghost s: set<uint64>, ghost decreaser: ORDINAL, next: IteratorOutput<V>)
  datatype SimpleIterator = SimpleIterator(i: uint64, ghost s: set<uint64>, ghost decreaser: ORDINAL)
  function method {:opaque} {:fuel 0, 0} lshift(a: uint64, b: uint32): uint64
  {
    (a as bv64 << b) as uint64
  }
  function method {:opaque} {:fuel 0, 0} rshift(a: uint64, b: uint32): uint64
  {
    (a as bv64 >> b) as uint64
  }
  function method {:opaque} {:fuel 0, 0} bitnot(a: uint64): uint64
  {
    (a as bv64 ^ 18446744073709551615) as uint64
  }
  function method {:opaque} {:fuel 0, 0} bitxor(a: uint64, b: uint64): uint64
  {
    (a as bv64 ^ b as bv64) as uint64
  }
  function method {:opaque} {:fuel 0, 0} hash64(k: uint64): uint64
  {
    var k0: uint64 := u64add(bitnot(k), lshift(k, 21));
    var k1: uint64 := bitxor(k0, rshift(k0, 24));
    var k2: uint64 := u64add(u64add(k1, lshift(k1, 3)), lshift(k1, 8));
    var k3: uint64 := bitxor(k2, rshift(k2, 14));
    var k4: uint64 := u64add(u64add(k3, lshift(k3, 2)), lshift(k3, 4));
    var k5: uint64 := bitxor(k4, rshift(k4, 28));
    var k6: uint64 := u64add(k5, lshift(k5, 31));
    k6
  }
}