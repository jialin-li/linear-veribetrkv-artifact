// PackedKV.i.dfy
module PackedKV {
  datatype Pkv = Pkv(keys: PSA.Psa, messages: PSA.Psa)
  function method EmptyPkv(): (result: Pkv)
  {
    Pkv(PSA.EmptyPsa(), PSA.EmptyPsa())
  }
  function method NumKVPairs(pkv: Pkv): uint64
  {
    PSA.psaNumStrings(pkv.keys)
  }
  method ComputeValidStringLens(psa: PSA.Psa, upper_bound: uint64) returns (b: bool)
  {
    var i: uint64 := 0;
    while i < PSA.psaNumStrings(psa)
    {
      if upper_bound < PSA.psaEnd(psa, i) as uint64 - PSA.psaStart(psa, i) as uint64 {
        b := false;
        return;
      }
      i := i + 1;
    }
    return true;
  }
  method ComputeIsSorted(pkv: Pkv) returns (b: bool)
  {
    if |pkv.keys.offsets| <= 1 {
      return true;
    }
    var i: uint64 := 0;
    while i < |pkv.keys.offsets| as uint64 - 1
    {
      var c: int32 := KeyspaceImpl.cmp(PSA.psaElement(pkv.keys, i), PSA.psaElement(pkv.keys, i + 1));
      if c >= 0 {
        return false;
      }
      i := i + 1;
    }
    return true;
  }
  function method SizeOfPkvUint64(pkv: Pkv): uint64
  {
    PSA.SizeOfPsaUint64(pkv.keys) + PSA.SizeOfPsaUint64(pkv.messages)
  }
  function method WeightPkv(pkv: Pkv): uint64
  {
    4 * |pkv.keys.offsets| as uint64 + |pkv.keys.data| as uint64 + 4 * |pkv.messages.offsets| as uint64 + |pkv.messages.data| as uint64
  }
  function method FirstKey(pkv: Pkv): Key
  {
    PSA.FirstElement(pkv.keys)
  }
  function method LastKey(pkv: Pkv): Key
  {
    PSA.LastElement(pkv.keys)
  }
  function method GetKey(pkv: Pkv, i: uint64): Key
  {
    PSA.psaElement(pkv.keys, i)
  }
  function method GetMessage(pkv: Pkv, i: uint64): Message
  {
    bytestring_to_Message(PSA.psaElement(pkv.messages, i))
  }
  method BinarySearchQuery(pkv: Pkv, key: Key) returns (msg: Option<Message>)
  {
    var lo: uint64 := 0;
    var hi: uint64 := |pkv.keys.offsets| as uint64;
    while lo < hi
    {
      var mid: uint64 := (lo + hi) / 2;
      var c: int32 := KeyspaceImpl.cmp(key, GetKey(pkv, mid));
      if c == 0 {
        msg := Some(GetMessage(pkv, mid));
        return;
      } else if c < 0 {
        hi := mid;
      } else {
        lo := mid + 1;
      }
    }
    msg := None;
  }
  method SubPkv(pkv: Pkv, from: uint64, to: uint64)
      returns (result: Pkv)
  {
    var subkeys: Psa := PSA.PsaSubSeq(pkv.keys, from, to);
    var submessages: Psa := PSA.PsaSubSeq(pkv.messages, from, to);
    result := Pkv(subkeys, submessages);
  }
  method SplitLeft(pkv: Pkv, pivot: Key) returns (result: Pkv)
  {
    var idx: uint64 := PSA.IndexOfFirstKeyGte(pkv.keys, pivot);
    result := SubPkv(pkv, 0, idx);
  }
  method SplitRight(pkv: Pkv, pivot: Key) returns (result: Pkv)
  {
    var idx: uint64 := PSA.IndexOfFirstKeyGte(pkv.keys, pivot);
    result := SubPkv(pkv, idx, NumKVPairs(pkv));
  }
}
module DynamicPkv {
  datatype Capacity = Capacity(num_kv_pairs: uint32, total_key_len: uint32, total_message_len: uint32)
  class DynamicPkv {
    var keys: PKV.PSA.DynamicPsa
    var messages: PKV.PSA.DynamicPsa
    ghost var Repr: set<object>
    function method toPkv(): PKV.Pkv
      reads this, this.Repr
    {
      PKV.Pkv(keys.toPsa(), messages.toPsa())
    }
    function method weight(): uint64
      reads this, this.Repr
    {
      keys.weight() + messages.weight()
    }
    method AppendEncodedMessage(key: Key, msg: seq<byte>)
      modifies this, Repr
    {
      keys.Append(key);
      messages.Append(msg);
    }
    method Append(key: Key, msg: Message)
      modifies this, Repr
    {
      AppendEncodedMessage(key, Message_to_bytestring(msg));
    }
    method AppendPkv(pkv: PKV.Pkv, start: uint64, end: uint64)
      modifies this, Repr
    {
      var i: uint64 := start;
      while i < end
      {
        var key: seq<NativeTypes.byte> := PKV.GetKey(pkv, i);
        var msg: Message := PKV.GetMessage(pkv, i);
        Append(key, msg);
        i := i + 1;
      }
    }
    constructor PreSized(capacity: Capacity)
    {
      keys := new PKV.PSA.DynamicPsa.PreSized(capacity.num_kv_pairs, capacity.total_key_len);
      messages := new PKV.PSA.DynamicPsa.PreSized(capacity.num_kv_pairs, capacity.total_message_len);
      new;
    }
  }
  datatype SingleMergeResult = MergeCompleted(bot: PKV.Pkv, slack: uint64) | SlackExhausted(bot: PKV.Pkv, end: uint64, slack: uint64) {
  }
  datatype MergeResult = MergeResult(top: PKV.Pkv, bots: seq<PKV.Pkv>, slack: uint64) {
  }
  datatype PartialFlushResult = PartialFlushResult(top: PKV.Pkv, bots: seq<PKV.Pkv>) {
  }
  function method EmptyCapacity(): Capacity
  {
    Capacity(0, 0, 0)
  }
  method MergeToOneChild(top: PKV.Pkv, from0: uint64, to: uint64, bot: PKV.Pkv, slack0: uint64)
      returns (result: SingleMergeResult)
  {
    var from: uint64 := from0;
    var slack: uint64 := slack0;
    var bot_from: uint64 := 0;
    var maxkeys: uint32 := (to - from + PKV.NumKVPairs(bot)) as uint32;
    var maxkeyspace: uint32 := (PSA.psaTotalLength(bot.keys) + slack) as uint32;
    var maxmsgspace: uint32 := (PSA.psaTotalLength(bot.messages) + slack) as uint32;
    var cap: Capacity := Capacity(maxkeys, maxkeyspace, maxmsgspace);
    var dresult: DynamicPkv := new DynamicPkv.PreSized(cap);
    while true
    {
      if from == to {
        dresult.AppendPkv(bot, bot_from, PKV.NumKVPairs(bot));
        result := MergeCompleted(dresult.toPkv(), slack);
        return;
      } else {
        var topkey: Key := PSA.psaElement(top.keys, from);
        var botkey: Key;
        var c: int32;
        if bot_from < PKV.NumKVPairs(bot) {
          botkey := PSA.psaElement(bot.keys, bot_from);
          c := KeyspaceImpl.cmp(topkey, botkey);
        }
        if bot_from < PKV.NumKVPairs(bot) && c == 0 {
          var key: seq<NativeTypes.byte> := topkey;
          var topmsg: Message := PKV.GetMessage(top, from);
          var botmsg: Message := PKV.GetMessage(bot, bot_from);
          var msg: Message := ValueMessage.Merge(topmsg, botmsg);
          if msg == IdentityMessage() {
            from := from + 1;
            bot_from := bot_from + 1;
            slack := slack + WeightKeyUint64(key) + WeightMessageUint64(botmsg);
          } else {
            var wm1: uint64 := WeightMessageUint64(msg);
            var wm2: uint64 := WeightMessageUint64(botmsg);
            if wm1 > slack + wm2 {
              dresult.AppendPkv(bot, bot_from, PKV.NumKVPairs(bot));
              result := SlackExhausted(dresult.toPkv(), from, slack);
              return;
            } else {
              dresult.Append(key, msg);
              from := from + 1;
              bot_from := bot_from + 1;
              slack := slack + wm2 - wm1;
            }
          }
        } else if bot_from == PKV.NumKVPairs(bot) || c < 0 {
          var key: seq<NativeTypes.byte> := topkey;
          var msg: Message := PKV.GetMessage(top, from);
          var delta: uint64 := WeightKeyUint64(key) + WeightMessageUint64(msg);
          if delta > slack {
            dresult.AppendPkv(bot, bot_from, PKV.NumKVPairs(bot));
            result := SlackExhausted(dresult.toPkv(), from, slack);
            return;
          } else {
            dresult.Append(key, msg);
            from := from + 1;
            slack := slack - delta;
          }
        } else {
          var key: seq<NativeTypes.byte> := botkey;
          var msg: Message := PKV.GetMessage(bot, bot_from);
          dresult.Append(key, msg);
          bot_from := bot_from + 1;
        }
      }
    }
  }
  method MergeToChildrenIter(top: PKV.Pkv, bots: seq<PKV.Pkv>, idxs: seq<uint64>, tmp: SingleMergeResult, i: uint64, results: array<PKV.Pkv>)
      returns (res: MergeResult)
    modifies results
  {
    if i == |bots| as uint64 {
      if tmp.SlackExhausted? {
        var leftover_top: Pkv := PKV.SubPkv(top, tmp.end, PKV.NumKVPairs(top));
        return MergeResult(leftover_top, results[..], tmp.slack);
      } else {
        return MergeResult(PKV.EmptyPkv(), results[..], tmp.slack);
      }
    } else {
      if tmp.MergeCompleted? {
        var from: uint64 := if i == 0 then 0 else idxs[i - 1];
        var to1: uint64 := if i == |idxs| as uint64 then PKV.NumKVPairs(top) else idxs[i];
        var to: uint64 := if to1 < from then from else to1;
        var tmp': SingleMergeResult := MergeToOneChild(top, from, to, bots[i], tmp.slack);
        results[i] := tmp'.bot;
        res := MergeToChildrenIter(top, bots, idxs, tmp', i + 1, results);
        return;
      } else {
        results[i] := bots[i];
        res := MergeToChildrenIter(top, bots, idxs, tmp, i + 1, results);
        return;
      }
    }
  }
  method computePivotIndexes(keys: PSA.Psa, pivots: seq<Key>) returns (pivotIdxs: seq<uint64>)
  {
    var results: array?<uint64> := new uint64[|pivots| as uint64];
    var i: uint64 := 0;
    while i < |pivots| as uint64
    {
      results[i] := PSA.BinarySearchIndexOfFirstKeyGte(keys, pivots[i]);
      i := i + 1;
    }
    pivotIdxs := results[..];
  }
  method MergeToChildren(top: PKV.Pkv, pivots: seq<Key>, bots: seq<PKV.Pkv>, slack: uint64)
      returns (result: MergeResult)
  {
    var idxs: seq<uint64> := computePivotIndexes(top.keys, pivots);
    var tmp: SingleMergeResult := MergeCompleted(PKV.EmptyPkv(), slack);
    var ar: array?<PKV.Pkv> := new PKV.Pkv[|bots| as uint64];
    result := MergeToChildrenIter(top, bots, idxs, tmp, 0, ar);
  }
  method PartialFlush(top: PKV.Pkv, pivots: seq<Key>, bots: seq<PKV.Pkv>)
      returns (result: PartialFlushResult)
  {
    var slack: uint64 := MaxTotalBucketWeightUint64();
    var i: uint64 := 0;
    while i < |bots| as uint64
    {
      slack := slack - PKV.WeightPkv(bots[i]);
      i := i + 1;
    }
    var res: MergeResult := MergeToChildren(top, pivots, bots, slack);
    return PartialFlushResult(res.top, res.bots);
  }
}