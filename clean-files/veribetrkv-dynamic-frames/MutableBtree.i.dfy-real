// MutableBtree.i.dfy
abstract module MutableBtree {
  type Key = Model.Key
  type Value = Model.Value
  class Node {
    var contents: NodeContents
    ghost var repr: set<object>
    ghost var height: nat
  }
  datatype NodeContents = Leaf(nkeys: uint64, keys: array<Key>, values: array<Value>) | Index(nchildren: uint64, pivots: array<Key>, children: array<Node?>)
  function method MaxKeysPerLeaf(): uint64
  function method MaxChildren(): uint64
  function method DefaultValue(): Value
  function method DefaultKey(): Key
  method QueryLeaf(node: Node, needle: Key) returns (result: Option<Value>)
  {
    var posplus1: uint64 := Model.KeysImpl.ArrayLargestLtePlus1(node.contents.keys, 0, node.contents.nkeys, needle);
    if 1 <= posplus1 && node.contents.keys[posplus1 - 1] == needle {
      result := Some(node.contents.values[posplus1 - 1]);
    } else {
      result := None;
    }
  }
  method QueryIndex(node: Node, needle: Key) returns (result: Option<Value>)
  {
    var posplus1: uint64 := Model.KeysImpl.ArrayLargestLtePlus1(node.contents.pivots, 0, node.contents.nchildren - 1, needle);
    result := Query(node.contents.children[posplus1], needle);
  }
  method Query(node: Node, needle: Key) returns (result: Option<Value>)
  {
    match node.contents {
      case Leaf(_v0, _v1, _v2) =>
        result := QueryLeaf(node, needle);
      case Index(_v3, _v4, _v5) =>
        result := QueryIndex(node, needle);
    }
  }
  method Empty(node: Node) returns (result: bool)
  {
    if node.contents.Leaf? {
      result := 0 == node.contents.nkeys;
    } else {
      result := false;
    }
  }
  method MinKeyInternal(node: Node) returns (result: Key)
  {
    if node.contents.Leaf? {
      result := node.contents.keys[0];
    } else {
      result := MinKeyInternal(node.contents.children[0]);
    }
  }
  method MinKey(node: Node) returns (result: Key)
  {
    result := MinKeyInternal(node);
  }
  method MaxKeyInternal(node: Node) returns (result: Key)
  {
    if node.contents.Leaf? {
      var nkeys: uint64 := node.contents.nkeys;
      result := node.contents.keys[nkeys - 1];
    } else {
      var nchildren: uint64 := node.contents.nchildren;
      result := MaxKeyInternal(node.contents.children[nchildren - 1]);
    }
  }
  method MaxKey(node: Node) returns (result: Key)
  {
    result := MaxKeyInternal(node);
  }
  method EmptyTree() returns (root: Node)
  {
    var rootkeys: array<Key> := newArrayFill(MaxKeysPerLeaf(), DefaultKey());
    var rootvalues: array<Model.Value> := newArrayFill(MaxKeysPerLeaf(), DefaultValue());
    root := new Node;
    root.contents := Leaf(0, rootkeys, rootvalues);
  }
  method LeafFromSeqs(keys: seq<Key>, values: seq<Value>) returns (node: Node)
  {
    node := EmptyTree();
    CopySeqIntoArray(keys, 0, node.contents.keys, 0, |keys| as uint64);
    CopySeqIntoArray(values, 0, node.contents.values, 0, |values| as uint64);
    node.contents := node.contents.(nkeys := |keys| as uint64);
  }
  method IndexFromChildren(pivots: seq<Key>, children: seq<Node>, ghost height: nat)
      returns (node: Node)
  {
    var pivotarray: array<Key> := newArrayFill(MaxChildren() - 1, DefaultKey());
    var childarray: array<Node?> := newArrayFill(MaxChildren(), null);
    CopySeqIntoArray(pivots, 0, pivotarray, 0, |pivots| as uint64);
    CopySeqIntoArray(children, 0, childarray, 0, |children| as uint64);
    node := new Node;
    node.contents := Index(|children| as uint64, pivotarray, childarray);
  }
  predicate method Full(node: Node)
    reads node
  {
    match node.contents {
      case Leaf(nkeys, _v6, _v7) =>
        nkeys == MaxKeysPerLeaf()
      case Index(nchildren, _v8, _v9) =>
        nchildren == MaxChildren()
    }
  }
  method SplitLeaf(node: Node, nleft: uint64, ghost pivot: Key)
      returns (right: Node)
    modifies node
  {
    right := LeafFromSeqs(node.contents.keys[nleft .. node.contents.nkeys], node.contents.values[nleft .. node.contents.nkeys]);
    node.contents := Leaf(nleft, node.contents.keys, node.contents.values);
  }
  method IndexPrefix(node: Node, newnchildren: uint64)
    modifies node
  {
    node.contents := node.contents.(nchildren := newnchildren);
  }
  method SubIndex(node: Node, from: uint64, to: uint64)
      returns (subnode: Node)
  {
    subnode := IndexFromChildren(node.contents.pivots[from .. to - 1], node.contents.children[from .. to], node.height);
  }
  method SplitIndex(node: Node, nleft: uint64)
      returns (right: Node, pivot: Key)
    modifies node
  {
    right := SubIndex(node, nleft, node.contents.nchildren);
    pivot := node.contents.pivots[nleft - 1];
    IndexPrefix(node, nleft);
  }
  method SplitNode(node: Node) returns (right: Node, pivot: Key)
    modifies node
  {
    if node.contents.Leaf? {
      var boundary: uint64 := node.contents.nkeys / 2;
      pivot := node.contents.keys[boundary];
      right := SplitLeaf(node, node.contents.nkeys / 2, pivot);
    } else {
      var boundary: uint64 := node.contents.nchildren / 2;
      right, pivot := SplitIndex(node, boundary);
    }
  }
  method SplitChildOfIndex(node: Node, childidx: uint64)
    modifies node, node.contents.pivots, node.contents.children, node.contents.children[childidx]
  {
    var right: Node, pivot: Key := SplitNode(node.contents.children[childidx]);
    Arrays.Insert(node.contents.pivots, node.contents.nchildren - 1, pivot, childidx);
    Arrays.Insert(node.contents.children, node.contents.nchildren, right, childidx + 1);
    node.contents := node.contents.(nchildren := node.contents.nchildren + 1);
  }
  method InsertLeaf(node: Node, key: Key, value: Value)
      returns (oldvalue: Option<Value>)
    modifies node, node.contents.keys, node.contents.values
  {
    var posplus1: uint64 := Model.KeysImpl.ArrayLargestLtePlus1(node.contents.keys, 0, node.contents.nkeys, key);
    if 1 <= posplus1 && node.contents.keys[posplus1 - 1] == key {
      oldvalue := Some(node.contents.values[posplus1 - 1]);
      node.contents.values[posplus1 - 1] := value;
    } else {
      oldvalue := None;
      Arrays.Insert(node.contents.keys, node.contents.nkeys, key, posplus1);
      Arrays.Insert(node.contents.values, node.contents.nkeys, value, posplus1);
      node.contents := node.contents.(nkeys := node.contents.nkeys + 1);
    }
  }
  method InsertIndexChildNotFull(node: Node, childidx: uint64, key: Key, value: Value)
      returns (oldvalue: Option<Value>)
    modifies node, node.contents.children[childidx], node.contents.children[childidx].repr
  {
    oldvalue := InsertNode(node.contents.children[childidx], key, value);
  }
  method InsertIndexSelectAndPrepareChild(node: Node, key: Key) returns (childidx: uint64)
    modifies node, node.repr
  {
    childidx := Model.KeysImpl.ArrayLargestLtePlus1(node.contents.pivots, 0, node.contents.nchildren - 1, key);
    if Full(node.contents.children[childidx]) {
      SplitChildOfIndex(node, childidx);
      var t: int32 := Model.KeysImpl.cmp(node.contents.pivots[childidx], key);
      if t <= 0 {
        childidx := childidx + 1;
      }
    }
  }
  method InsertIndex(node: Node, key: Key, value: Value)
      returns (oldvalue: Option<Value>)
    modifies node, node.repr
  {
    var childidx: uint64 := InsertIndexSelectAndPrepareChild(node, key);
    oldvalue := InsertIndexChildNotFull(node, childidx, key, value);
  }
  method InsertNode(node: Node, key: Key, value: Value)
      returns (oldvalue: Option<Value>)
    modifies node, node.repr
  {
    if node.contents.Leaf? {
      oldvalue := InsertLeaf(node, key, value);
    } else {
      oldvalue := InsertIndex(node, key, value);
    }
  }
  method Grow(root: Node) returns (newroot: Node)
  {
    newroot := new Node;
    var newpivots: array<Key> := newArrayFill(MaxChildren() - 1, DefaultKey());
    var newchildren: array?<Node?> := newArrayFill(MaxChildren(), null);
    newchildren[0] := root;
    newroot.contents := Index(1, newpivots, newchildren);
  }
  method Insert(root: Node, key: Key, value: Value)
      returns (newroot: Node, oldvalue: Option<Value>)
    modifies root.repr
  {
    if Full(root) {
      newroot := Grow(root);
    } else {
      newroot := root;
    }
    oldvalue := InsertNode(newroot, key, value);
  }
}
module TestBtreeModel refines BtreeModel {
  type Value = uint64
}
module TestMutableBtree refines MutableBtree {
  function method MaxKeysPerLeaf(): uint64
  {
    64
  }
  function method MaxChildren(): uint64
  {
    64
  }
  function method DefaultValue(): Value
  {
    0
  }
  function method DefaultKey(): Key
  {
    [0]
  }
}
module MainModule {
  method SeqFor(i: uint64) returns (result: TMB.Key)
  {
    result := [(i / 1 % 256) as byte, (i / (1 * 256) % 256) as byte, (i / (1 * 256 * 256) % 256) as byte, (i / (1 * 256 * 256 * 256) % 256) as byte, (i / (1 * 256 * 256 * 256 * 256) % 256) as byte, (i / (1 * 256 * 256 * 256 * 256 * 256) % 256) as byte, (i / (1 * 256 * 256 * 256 * 256 * 256 * 256) % 256) as byte, (i / (1 * 256 * 256 * 256 * 256 * 256 * 256 * 256) % 256) as byte];
  }
  method Run(seed: uint64, n: uint64, dry: bool)
  {
    var p: uint64 := 3000017;
    var t: Node := TMB.EmptyTree();
    var i: uint64 := 0;
    var lcg: LCG := new LCG(seed);
    var write_start: uint64 := steadyClockMillis();
    while i < n
    {
      var oldvalue: Option<Value>;
      var keyv: uint64 := lcg.next();
      var key: TMB.Key := SeqFor(keyv);
      if !dry {
        t, oldvalue := TMB.Insert(t, key, i);
      }
      i := i + 1;
    }
    var write_end: uint64 := steadyClockMillis();
    var write_duration: uint64 := write_end - write_start;
    print (n, "\twrite\t", write_duration, "\n");
    i := 0;
    var read_start: uint64 := steadyClockMillis();
    while i < n
    {
      var keyv: uint64 := lcg.next();
      var key: TMB.Key := SeqFor(keyv);
      if !dry {
        var result: Option<Value> := TMB.Query(t, key);
        if result.Some? {
          opaqueBlackhole(result.value);
        }
      }
      i := i + 1;
    }
    var read_end: uint64 := steadyClockMillis();
    var read_duration: uint64 := read_end - read_start;
    print (n, "\tread\t", read_duration, "\n");
  }
}