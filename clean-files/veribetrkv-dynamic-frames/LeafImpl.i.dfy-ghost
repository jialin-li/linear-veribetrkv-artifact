// LeafImpl.i.dfy
module LeafImpl {
  method CopyKey(k: KeyType.Key) returns (k2: KeyType.Key)
    ensures k2 == k
    decreases k
  {
    k2 := [] + k;
  }
  method repivotLeaf(k: ImplConstants, s: ImplVariables, ref: BT.G.Reference, node: Node)
    requires Inv(k, s)
    requires s.ready
    requires ref in s.ephemeralIndirectionTable.I().graph
    requires s.cache.ptr(ref) == Some(node)
    requires node.Inv()
    requires node.children.None?
    requires |node.buckets| == 1
    requires |s.ephemeralIndirectionTable.I().graph| <= IndirectionTableModel.MaxSize() - 1
    modifies s.Repr()
    ensures s.ready
    ensures WellUpdated(s)
    ensures s.I() == LeafModel.repivotLeaf(Ic(k), old(s.I()), ref, old(node.I()))
    decreases k, s, ref, node
  {
    LeafModel.reveal_repivotLeaf();
    if s.frozenIndirectionTable != null {
      var b: bool := s.frozenIndirectionTable.HasEmptyLoc(ref);
      if b {
        print "giving up; repivotLeaf can't run because frozen isn't written";
        return;
      }
    }
    var pivot: Key := node.buckets[0 as uint64].GetMiddleKey();
    pivot := CopyKey(pivot);
    var pivots: seq<Key> := [pivot];
    var left: MutBucket, right: MutBucket := node.buckets[0 as uint64].SplitLeftRight(pivot);
    var buckets': seq<MutBucket> := [left, right];
    MutBucket.ReprSeqDisjointOfLen2(buckets');
    MutBucket.ListReprOfLen2(buckets');
    var newnode: Node := new Node(pivots, None, buckets');
    writeBookkeeping(k, s, ref, None);
    newnode.LemmaRepr();
    assert fresh(newnode.Repr);
    assert s.cache.Repr !! newnode.Repr;
    s.cache.Insert(ref, newnode);
    assert s.W();
    ghost var a: SM.BCVariables := s.I();
    ghost var b: BCVariables := LeafModel.repivotLeaf(Ic(k), old(s.I()), ref, old(node.I()));
    assert newnode.I() == old(IM.Node(pivots, None, [SplitBucketLeft(node.I().buckets[0], pivot), SplitBucketRight(node.I().buckets[0], pivot)]));
    assert a.cache == b.cache;
  }
}