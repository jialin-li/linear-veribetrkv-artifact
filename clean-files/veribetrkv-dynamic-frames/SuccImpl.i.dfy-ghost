// SuccImpl.i.dfy
module SuccImpl {
  method getPathInternal(k: ImplConstants, s: ImplVariables, io: DiskIOHandler, key: Key, acc: seq<MutBucket>, start: UI.RangeStart, upTo: Option<Key>, maxToFind: uint64, ref: BT.G.Reference, counter: uint64, node: Node)
      returns (res: Option<UI.SuccResultList>)
    requires Inv(k, s)
    requires node.Inv()
    requires StateModel.WFNode(node.I())
    requires s.ready
    requires io.initialized()
    requires ref in s.I().cache
    requires ref in s.I().ephemeralIndirectionTable.graph
    requires node.I() == s.I().cache[ref]
    requires maxToFind >= 1
    requires |acc| + counter as int < 18446744073709551616 - 1
    requires forall i: int {:trigger acc[i]} | 0 <= i < |acc| :: acc[i].Inv()
    requires io !in s.Repr()
    modifies s.Repr(), io
    ensures WellUpdated(s)
    ensures (s.I(), IIO(io), res) == SuccModel.getPathInternal(Ic(k), old(s.I()), old(IIO(io)), key, old(MutBucket.ISeq(acc)), start, upTo, maxToFind as int, ref, counter, old(node.I()))
    decreases counter, 0
  {
    SuccModel.reveal_getPathInternal();
    var r: uint64 := Pivots.ComputeRoute(node.pivotTable, key);
    var bucket: BucketImpl.MutBucket := node.buckets[r];
    var acc': seq<MutBucket> := acc + [bucket];
    assert bucket.I() == node.I().buckets[r];
    assert MutBucket.ISeq(acc') == MutBucket.ISeq(acc) + [bucket.I()];
    var upTo': Option<Key>;
    if r == |node.pivotTable| as uint64 {
      upTo' := upTo;
    } else {
      var ub: Key := node.pivotTable[r];
      if upTo.Some? {
        var c: int32 := cmp(upTo.value, ub);
        var k: Key := if c < 0 then upTo.value else ub;
        upTo' := Some(k);
      } else {
        upTo' := Some(ub);
      }
    }
    assert MutBucket.ISeq(acc') == old(MutBucket.ISeq(acc) + [node.I().buckets[r]]);
    assert MutBucket.ISeq(acc') == old(MutBucket.ISeq(acc)) + [old(node.I()).buckets[r]];
    if node.children.Some? {
      if counter == 0 {
        print "getPathInternal failure: count ran down\n";
        res := None;
        assert (s.I(), IIO(io), res) == SuccModel.getPathInternal(Ic(k), old(s.I()), old(IIO(io)), key, old(MutBucket.ISeq(acc)), start, upTo, maxToFind as int, ref, counter, old(node.I()));
      } else {
        BookkeepingModel.lemmaChildInGraph(Ic(k), s.I(), ref, node.I().children.value[r]);
        res := getPath(k, s, io, key, acc', start, upTo', maxToFind, node.children.value[r], counter - 1);
        assert (s.I(), IIO(io), res) == SuccModel.getPathInternal(Ic(k), old(s.I()), old(IIO(io)), key, old(MutBucket.ISeq(acc)), start, upTo, maxToFind as int, ref, counter, old(node.I()));
      }
    } else {
      MutBucket.AllocatedReprSeq(acc');
      var res0: UI.SuccResultList := BucketSuccessorLoopImpl.GetSuccessorInBucketStack(acc', maxToFind, start, upTo');
      res := Some(res0);
      assert (s.I(), IIO(io), res) == SuccModel.getPathInternal(Ic(k), old(s.I()), old(IIO(io)), key, old(MutBucket.ISeq(acc)), start, upTo, maxToFind as int, ref, counter, old(node.I()));
    }
  }
  method getPath(k: ImplConstants, s: ImplVariables, io: DiskIOHandler, key: Key, acc: seq<MutBucket>, start: UI.RangeStart, upTo: Option<Key>, maxToFind: uint64, ref: BT.G.Reference, counter: uint64)
      returns (res: Option<UI.SuccResultList>)
    requires Inv(k, s)
    requires s.ready
    requires io.initialized()
    requires maxToFind >= 1
    requires ref in s.I().ephemeralIndirectionTable.graph
    requires forall i: int {:trigger acc[i]} | 0 <= i < |acc| :: acc[i].Inv()
    requires io !in s.Repr()
    requires |acc| + counter as int < 18446744073709551616 - 1
    modifies s.Repr(), io
    ensures WellUpdated(s)
    ensures (s.I(), IIO(io), res) == SuccModel.getPath(Ic(k), old(s.I()), old(IIO(io)), key, old(MutBucket.ISeq(acc)), start, upTo, maxToFind as int, ref, counter)
    decreases counter, 1
  {
    SuccModel.reveal_getPath();
    MutBucket.AllocatedReprSeq(acc);
    var nodeOpt: Option<Node> := s.cache.GetOpt(ref);
    if nodeOpt.Some? {
      var node: Node := nodeOpt.value;
      assert node.I() == s.I().cache[ref];
      res := getPathInternal(k, s, io, key, acc, start, upTo, maxToFind, ref, counter, node);
      LruModel.LruUse(s.I().lru, ref);
      s.lru.Use(ref);
    } else {
      if s.cache.Count() + |s.outstandingBlockReads| as uint64 <= MaxCacheSizeUint64() - 1 {
        PageInNodeReq(k, s, io, ref);
      } else {
        print "getPath: Can't page in anything because cache is full\n";
      }
      res := None;
    }
  }
  method doSucc(k: ImplConstants, s: ImplVariables, io: DiskIOHandler, start: UI.RangeStart, maxToFind: uint64)
      returns (res: Option<UI.SuccResultList>)
    requires Inv(k, s)
    requires io.initialized()
    requires io !in s.Repr()
    requires maxToFind >= 1
    requires s.ready
    modifies io, s.Repr()
    ensures WellUpdated(s)
    ensures (s.I(), IIO(io), res) == SuccModel.doSucc(Ic(k), old(s.I()), old(IIO(io)), start, maxToFind as int)
    decreases k, s, io, start, maxToFind
  {
    SuccModel.reveal_doSucc();
    var startKey: seq<NativeTypes.byte> := if start.NegativeInf? then [] else start.key;
    res := getPath(k, s, io, startKey, [], start, None, maxToFind, BT.G.Root(), 40);
  }
}