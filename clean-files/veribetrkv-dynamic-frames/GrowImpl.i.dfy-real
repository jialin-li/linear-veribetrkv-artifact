// GrowImpl.i.dfy
module GrowImpl {
  method grow(k: ImplConstants, s: ImplVariables)
    modifies s.Repr()
  {
    if s.frozenIndirectionTable != null {
      var b: bool := s.frozenIndirectionTable.HasEmptyLoc(BT.G.Root());
      if b {
        print "giving up; grow can't run because frozen isn't written";
        return;
      }
    }
    var oldrootOpt: Option<Node> := s.cache.GetOpt(BT.G.Root());
    var oldroot: Node := oldrootOpt.value;
    var newref: Option<BT.G.Reference> := allocBookkeeping(k, s, oldroot.children);
    match newref {
      case None =>
        {
          print "giving up; could not allocate ref\n";
        }
      case Some(newref) =>
        {
          WeightBucketEmpty();
          var mutbucket := new MutBucket();
          MutBucket.ListReprOfLen1([mutbucket]);
          MutBucket.ReprSeqDisjointOfLen1([mutbucket]);
          var newroot := new Node([], Some([newref]), [mutbucket]);
          writeBookkeeping(k, s, BT.G.Root(), newroot.children);
          s.cache.MoveAndReplace(BT.G.Root(), newref, newroot);
        }
    }
  }
}