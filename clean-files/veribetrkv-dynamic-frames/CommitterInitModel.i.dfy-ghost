// CommitterInitModel.i.dfy
module CommitterInitModel {
  function {:opaque} {:fuel 0, 0} PageInSuperblockReq(k: Constants, cm: CM, io: IO, which: uint64): (res: (CM, IO))
    requires which == 0 || which == 1
    requires which == 0 ==> cm.superblock1.SuperblockUnfinished?
    requires which == 1 ==> cm.superblock2.SuperblockUnfinished?
    requires io.IOInit?
    requires cm.status.StatusLoadingSuperblock?
    decreases k, cm, io, which
  {
    if which == 0 then
      if cm.superblock1Read.None? then
        var loc: Location := Superblock1Location();
        var (id: D.ReqId, io': IO) := RequestRead(io, loc);
        var cm': CM := cm.(superblock1Read := Some(id));
        (cm', io')
      else
        (cm, io)
    else
      if cm.superblock2Read.None? then var loc: Location := Superblock2Location(); var (id: D.ReqId, io': IO) := RequestRead(io, loc); var cm': CM := cm.(superblock2Read := Some(id)); (cm', io') else (cm, io)
  }
  lemma PageInSuperblockReqCorrect(k: Constants, cm: CM, io: IO, which: uint64)
    requires CommitterModel.WF(cm)
    requires PageInSuperblockReq.requires(k, cm, io, which)
    ensures var (cm': CM, io': IO) := PageInSuperblockReq(k, cm, io, which); CommitterModel.WF(cm') && ValidDiskOp(diskOp(io')) && IDiskOp(diskOp(io')).bdop.NoDiskOp? && JournalCache.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp)
    decreases k, cm, io, which
  {
    reveal_PageInSuperblockReq();
    var (cm': CM, io': IO) := PageInSuperblockReq(k, cm, io, which);
    ghost var loc: Location;
    if which == 0 {
      loc := Superblock1Location();
    } else {
      loc := Superblock2Location();
    }
    RequestReadCorrect(io, loc);
    if (which == 0 && cm.superblock1Read.None?) || (which == 1 && cm.superblock2Read.None?) {
      assert JournalCache.PageInSuperblockReq(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp, which as int);
      assert JournalCache.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp, JournalCache.PageInSuperblockReqStep(which as int));
    } else {
      assert JournalCache.NoOp(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp);
      assert JournalCache.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp, JournalCache.NoOpStep);
    }
  }
  function {:opaque} {:fuel 0, 0} FinishLoadingSuperblockPhase(k: Constants, cm: CM): (cm': CM)
    requires cm.status.StatusLoadingSuperblock?
    requires cm.superblock1.SuperblockSuccess?
    requires cm.superblock2.SuperblockSuccess?
    decreases k, cm
  {
    var idx: uint64 := if JournalCache.increments1(cm.superblock1.value.counter, cm.superblock2.value.counter) then 1 else 0;
    var sup: Superblock := if idx == 1 then cm.superblock2.value else cm.superblock1.value;
    cm.(whichSuperblock := idx).(superblock := sup).(status := StatusLoadingOther).(journalFrontRead := None).(journalBackRead := None)
  }
  lemma FinishLoadingSuperblockPhaseCorrect(k: Constants, cm: CM)
    requires cm.status.StatusLoadingSuperblock?
    requires cm.superblock1.SuperblockSuccess?
    requires cm.superblock2.SuperblockSuccess?
    requires CommitterModel.WF(cm)
    ensures var cm': CM := FinishLoadingSuperblockPhase(k, cm); CommitterModel.WF(cm') && JournalCache.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, SendPersistentLocOp(cm'.superblock.indirectionTableLoc))
    decreases k, cm
  {
    ghost var cm': CM := FinishLoadingSuperblockPhase(k, cm);
    ghost var vop: VOp := SendPersistentLocOp(cm'.superblock.indirectionTableLoc);
    reveal_FinishLoadingSuperblockPhase();
    assert JournalCache.FinishLoadingSuperblockPhase(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, vop);
    assert JournalCache.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, vop, JournalCache.FinishLoadingSuperblockPhaseStep);
  }
  function {:opaque} {:fuel 0, 0} FinishLoadingOtherPhase(k: Constants, cm: CM): (cm': CM)
    requires cm.status.StatusLoadingOther?
    requires CommitterModel.WF(cm)
    decreases k, cm
  {
    var (journalist1: JournalistModel, success: bool) := JournalistModel.parseJournals(cm.journalist);
    if success then
      var journalist2: JournalistModel := JournalistModel.setWrittenJournalLen(journalist1, cm.superblock.journalLen);
      cm.(status := StatusReady).(frozenLoc := None).(isFrozen := false).(frozenJournalPosition := 0).(superblockWrite := None).(outstandingJournalWrites := {}).(newSuperblock := None).(commitStatus := JournalCache.CommitNone).(journalist := journalist2)
    else
      cm.(journalist := journalist1)
  }
  lemma FinishLoadingOtherPhaseCorrect(k: Constants, cm: CM)
    requires cm.status.StatusLoadingOther?
    requires CommitterModel.Inv(cm)
    requires JournalCache.JournalFrontIntervalOfSuperblock(cm.superblock).Some? ==> JournalistModel.hasFront(cm.journalist)
    requires JournalCache.JournalBackIntervalOfSuperblock(cm.superblock).Some? ==> JournalistModel.hasBack(cm.journalist)
    ensures var cm': CM := FinishLoadingOtherPhase(k, cm); CommitterModel.WF(cm') && JournalCache.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, JournalInternalOp)
    decreases k, cm
  {
    ghost var cm': CM := FinishLoadingOtherPhase(k, cm);
    reveal_FinishLoadingOtherPhase();
    var (journalist1: JournalistModel, success: bool) := JournalistModel.parseJournals(cm.journalist);
    assert JournalCache.JournalFrontIntervalOfSuperblock(cm.superblock).Some? <==> JournalistModel.hasFront(cm.journalist);
    assert JournalCache.JournalBackIntervalOfSuperblock(cm.superblock).Some? <==> JournalistModel.hasBack(cm.journalist);
    if success {
      ghost var s: JC.Variables := CommitterModel.I(cm);
      ghost var fullRange: seq<JournalBlock> := if JournalCache.JournalBackIntervalOfSuperblock(s.superblock).Some? then JournalRanges.JournalRangeConcat(s.journalFront.value, s.journalBack.value) else if JournalCache.JournalFrontIntervalOfSuperblock(s.superblock).Some? then s.journalFront.value else JournalRanges.JournalRangeEmpty();
      ghost var jm: JournalistModel.JournalistModel := cm.journalist;
      assert fullRange == (if JournalistModel.I(jm).journalFront.Some? then JournalistModel.I(jm).journalFront.value else []) + if JournalistModel.I(jm).journalBack.Some? then JournalistModel.I(jm).journalBack.value else [];
      assert JournalCache.FinishLoadingOtherPhase(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, JournalInternalOp);
      assert JournalCache.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, JournalInternalOp, JournalCache.FinishLoadingOtherPhaseStep);
    } else {
      assert JournalCache.NoOp(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, JournalInternalOp);
      assert JournalCache.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, JournalInternalOp, JournalCache.NoOpStep);
    }
  }
  function isReplayEmpty(cm: CM): bool
    requires JournalistModel.Inv(cm.journalist)
    decreases cm
  {
    JournalistModel.isReplayEmpty(cm.journalist)
  }
  function {:opaque} {:fuel 0, 0} PageInJournalReqFront(k: Constants, cm: CM, io: IO): (CM, IO)
    requires CommitterModel.WF(cm)
    requires cm.status.StatusLoadingOther?
    requires cm.superblock.journalLen > 0
    requires io.IOInit?
    decreases k, cm, io
  {
    var len: uint64 := if cm.superblock.journalStart + cm.superblock.journalLen >= NumJournalBlocks() then NumJournalBlocks() - cm.superblock.journalStart else cm.superblock.journalLen;
    var loc: Location := JournalRangeLocation(cm.superblock.journalStart, len);
    var (id: D.ReqId, io': IO) := RequestRead(io, loc);
    var cm': CM := cm.(journalFrontRead := Some(id)).(journalBackRead := if cm.journalBackRead == Some(id) then None else cm.journalBackRead);
    (cm', io')
  }
  lemma PageInJournalReqFrontCorrect(k: Constants, cm: CM, io: IO)
    requires CommitterModel.WF(cm)
    requires cm.status.StatusLoadingOther?
    requires cm.superblock.journalLen > 0
    requires io.IOInit?
    requires cm.journalFrontRead.None?
    requires JournalistModel.I(cm.journalist).journalFront.None?
    ensures var (cm': CM, io': IO) := PageInJournalReqFront(k, cm, io); CommitterModel.WF(cm') && ValidDiskOp(diskOp(io')) && IDiskOp(diskOp(io')).bdop.NoDiskOp? && JournalCache.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp)
    decreases k, cm, io
  {
    reveal_PageInJournalReqFront();
    var (cm': CM, io': IO) := PageInJournalReqFront(k, cm, io);
    ghost var len: uint64 := if cm.superblock.journalStart + cm.superblock.journalLen >= NumJournalBlocks() then NumJournalBlocks() - cm.superblock.journalStart else cm.superblock.journalLen;
    ghost var loc: Location := JournalRangeLocation(cm.superblock.journalStart, len);
    RequestReadCorrect(io, loc);
    assert JournalCache.PageInJournalReq(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp, 0);
    assert JournalCache.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp, JournalCache.PageInJournalReqStep(0));
  }
  function {:opaque} {:fuel 0, 0} PageInJournalReqBack(k: Constants, cm: CM, io: IO): (CM, IO)
    requires CommitterModel.WF(cm)
    requires cm.status.StatusLoadingOther?
    requires cm.superblock.journalLen > 0
    requires io.IOInit?
    requires cm.superblock.journalStart + cm.superblock.journalLen > NumJournalBlocks()
    decreases k, cm, io
  {
    var len: uint64 := cm.superblock.journalStart + cm.superblock.journalLen - NumJournalBlocks();
    var loc: Location := JournalRangeLocation(0, len);
    var (id: D.ReqId, io': IO) := RequestRead(io, loc);
    var cm': CM := cm.(journalBackRead := Some(id)).(journalFrontRead := if cm.journalFrontRead == Some(id) then None else cm.journalFrontRead);
    (cm', io')
  }
  lemma PageInJournalReqBackCorrect(k: Constants, cm: CM, io: IO)
    requires CommitterModel.WF(cm)
    requires cm.status.StatusLoadingOther?
    requires cm.superblock.journalLen > 0
    requires io.IOInit?
    requires cm.journalBackRead.None?
    requires JournalistModel.I(cm.journalist).journalBack.None?
    requires cm.superblock.journalStart + cm.superblock.journalLen > NumJournalBlocks()
    ensures var (cm': CM, io': IO) := PageInJournalReqBack(k, cm, io); CommitterModel.WF(cm') && ValidDiskOp(diskOp(io')) && IDiskOp(diskOp(io')).bdop.NoDiskOp? && JournalCache.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp)
    decreases k, cm, io
  {
    reveal_PageInJournalReqBack();
    var (cm': CM, io': IO) := PageInJournalReqBack(k, cm, io);
    ghost var len: uint64 := cm.superblock.journalStart + cm.superblock.journalLen - NumJournalBlocks();
    ghost var loc: Location := JournalRangeLocation(0, len);
    RequestReadCorrect(io, loc);
    assert JournalCache.PageInJournalReq(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp, 1);
    assert JournalCache.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp, JournalCache.PageInJournalReqStep(1));
  }
  function {:opaque} {:fuel 0, 0} PageInJournalResp(k: Constants, cm: CM, io: IO): CM
    requires CommitterModel.WF(cm)
    requires cm.status.StatusLoadingOther?
    requires diskOp(io).RespReadOp?
    requires ValidDiskOp(diskOp(io))
    requires ValidJournalLocation(LocOfRespRead(diskOp(io).respRead))
    decreases k, cm, io
  {
    var id: uint64 := io.id;
    var jr: Option<JournalRange> := JournalBytes.JournalRangeOfByteSeq(io.respRead.bytes);
    if jr.Some? then
      assert |jr.value| <= NumJournalBlocks() as int by {
        reveal_ValidJournalLocation();
      }
      if cm.journalFrontRead == Some(id) then
        cm.(journalist := JournalistModel.setFront(cm.journalist, jr.value)).(journalFrontRead := None)
      else if cm.journalBackRead == Some(id) then
        cm.(journalist := JournalistModel.setBack(cm.journalist, jr.value)).(journalBackRead := None)
      else
        cm
    else
      cm
  }
  lemma PageInJournalRespCorrect(k: Constants, cm: CM, io: IO)
    requires PageInJournalResp.requires(k, cm, io)
    requires CommitterModel.WF(cm)
    ensures var cm': CM := PageInJournalResp(k, cm, io); CommitterModel.WF(cm') && ValidDiskOp(diskOp(io)) && IDiskOp(diskOp(io)).bdop.NoDiskOp? && JournalCache.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, JournalInternalOp)
    decreases k, cm, io
  {
    reveal_PageInJournalResp();
    ghost var jr: Option<JournalRange> := JournalBytes.JournalRangeOfByteSeq(io.respRead.bytes);
    ghost var cm': CM := PageInJournalResp(k, cm, io);
    if jr.Some? {
      assert |jr.value| <= NumJournalBlocks() as int by {
        reveal_ValidJournalLocation();
      }
      if cm.journalFrontRead == Some(io.id) {
        assert JournalCache.PageInJournalResp(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, JournalInternalOp, 0);
        assert JournalCache.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, JournalInternalOp, JournalCache.PageInJournalRespStep(0));
      } else if cm.journalBackRead == Some(io.id) {
        assert JournalCache.PageInJournalResp(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, JournalInternalOp, 1);
        assert JournalCache.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, JournalInternalOp, JournalCache.PageInJournalRespStep(1));
      } else {
        assert JournalCache.NoOp(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, JournalInternalOp);
        assert JournalCache.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, JournalInternalOp, JournalCache.NoOpStep);
      }
    } else {
      assert JournalCache.NoOp(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, JournalInternalOp);
      assert JournalCache.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, JournalInternalOp, JournalCache.NoOpStep);
    }
  }
  function {:opaque} {:fuel 0, 0} tryFinishLoadingOtherPhase(k: Constants, cm: CM, io: IO): (res: (CM, IO))
    requires CommitterModel.Inv(cm)
    requires cm.status.StatusLoadingOther?
    requires io.IOInit?
    decreases k, cm, io
  {
    var hasFront: bool := JournalistModel.hasFront(cm.journalist);
    var hasBack: bool := JournalistModel.hasBack(cm.journalist);
    if cm.superblock.journalLen > 0 && !cm.journalFrontRead.Some? && !hasFront then
      PageInJournalReqFront(k, cm, io)
    else if cm.superblock.journalStart + cm.superblock.journalLen > NumJournalBlocks() && !cm.journalBackRead.Some? && !hasBack then
      PageInJournalReqBack(k, cm, io)
    else if (cm.superblock.journalLen > 0 ==> hasFront) && (cm.superblock.journalStart + cm.superblock.journalLen > NumJournalBlocks() ==> hasBack) then
      var cm': CM := FinishLoadingOtherPhase(k, cm);
      (cm', io)
    else
      (cm, io)
  }
  lemma tryFinishLoadingOtherPhaseCorrect(k: Constants, cm: CM, io: IO)
    requires cm.status.StatusLoadingOther?
    requires CommitterModel.Inv(cm)
    requires io.IOInit?
    ensures var (cm': CM, io': IO) := tryFinishLoadingOtherPhase(k, cm, io); CommitterModel.WF(cm') && ValidDiskOp(diskOp(io')) && IDiskOp(diskOp(io')).bdop.NoDiskOp? && JournalCache.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io')).jdop, JournalInternalOp)
    decreases k, cm, io
  {
    reveal_tryFinishLoadingOtherPhase();
    var (cm': CM, io': IO) := tryFinishLoadingOtherPhase(k, cm, io);
    ghost var hasFront: bool := JournalistModel.hasFront(cm.journalist);
    ghost var hasBack: bool := JournalistModel.hasBack(cm.journalist);
    if cm.superblock.journalLen > 0 && !cm.journalFrontRead.Some? && !hasFront {
      PageInJournalReqFrontCorrect(k, cm, io);
    } else if cm.superblock.journalStart + cm.superblock.journalLen > NumJournalBlocks() && !cm.journalBackRead.Some? && !hasBack {
      PageInJournalReqBackCorrect(k, cm, io);
    } else if (cm.superblock.journalLen > 0 ==> hasFront) && (cm.superblock.journalStart + cm.superblock.journalLen > NumJournalBlocks() ==> hasBack) {
      FinishLoadingOtherPhaseCorrect(k, cm);
    } else {
      assert JournalCache.NoOp(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, JournalInternalOp);
      assert JournalCache.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), IDiskOp(diskOp(io)).jdop, JournalInternalOp, JournalCache.NoOpStep);
    }
  }
}