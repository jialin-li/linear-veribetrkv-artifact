// QueryModel.i.dfy
module QueryModel {
  predicate {:opaque} {:fuel 0, 0} queryIterate(k: Constants, s: BCVariables, key: Key, msg: Message, ref: BT.G.Reference, io: IO, counter: uint64, s': BCVariables, result: Option<Value>, io': IO)
    requires s.Ready?
    requires BCInv(k, s)
    requires io.IOInit?
    requires ref in s.ephemeralIndirectionTable.graph
    requires counter >= 0
    decreases counter
  {
    if counter == 0 then
      s' == s &&
      result == None &&
      io' == io
    else
      if ref !in s.cache then PageInNodeReqOrMakeRoom(k, s, io, ref, s', io') && result == None else var node: Node := s.cache[ref]; var s0: BCVariables := s.(lru := LruModel.Use(s.lru, ref)); LruModel.LruUse(s.lru, ref); assert IBlockCache(s0) == IBlockCache(s); var r: int := Pivots.Route(node.pivotTable, key); var bucket: Bucket := node.buckets[r]; var kmtMsg: Option<Message> := bucketBinarySearchLookup(bucket, key); var newmsg: Message := if kmtMsg.Some? then Messages.Merge(msg, kmtMsg.value) else msg; if newmsg.Define? then s' == s0 && result == Some(newmsg.value) && io' == io else if node.children.Some? then lemmaChildInGraph(k, s0, ref, node.children.value[r]); queryIterate(k, s0, key, newmsg, node.children.value[r], io, counter - 1, s', result, io') else s' == s0 && result == Some(ValueType.DefaultValue()) && io' == io
  }
  predicate {:opaque} {:fuel 0, 0} query(k: Constants, s: BCVariables, io: IO, key: Key, s': BCVariables, result: Option<Value>, io': IO)
    requires io.IOInit?
    requires s.Ready?
    requires BCInv(k, s)
    decreases k, s, io, key, s', result, io'
  {
    queryIterate(k, s, key, Messages.IdentityMessage(), BT.G.Root(), io, 40, s', result, io')
  }
  predicate queryInv(k: Constants, s: BCVariables, key: Key, msg: Message, ref: BT.G.Reference, io: IO, counter: uint64, lookup: seq<BT.G.ReadOp>)
    decreases k, s, key, msg, ref, io, counter, lookup
  {
    s.Ready? &&
    BCInv(k, s) &&
    io.IOInit? &&
    ref in s.ephemeralIndirectionTable.graph &&
    counter >= 0 &&
    (|lookup| == 0 ==>
      ref == BT.G.Root()) &&
    (msg.Define? ==>
      |lookup| > 0) &&
    (|lookup| > 0 ==>
      BT.WFLookupForKey(lookup, key)) &&
    (!msg.Define? ==>
      |lookup| > 0 ==>
        Last(lookup).node.children.Some?) &&
    (!msg.Define? ==>
      |lookup| > 0 ==>
        Last(lookup).node.children.value[Pivots.Route(Last(lookup).node.pivotTable, key)] == ref) &&
    (forall i: int {:trigger lookup[i]} | 0 <= i < |lookup| :: 
      lookup[i].ref in IIndirectionTable(s.ephemeralIndirectionTable).graph) &&
    (forall i: int {:trigger lookup[i]} | 0 <= i < |lookup| :: 
      MapsTo(ICache(s.cache), lookup[i].ref, lookup[i].node)) &&
    ref in IIndirectionTable(s.ephemeralIndirectionTable).graph &&
    (PBS.LookupVisitsWellMarshalledBuckets(lookup, key) ==>
      msg == BT.InterpretLookup(lookup, key))
  }
  function {:opaque} {:fuel 0, 0} new_lookup(lookup: seq<BT.G.ReadOp>, ref: BT.G.Reference, node: BT.G.Node): seq<BT.G.ReadOp>
    decreases lookup, ref, node
  {
    lookup + [BT.G.ReadOp(ref, node)]
  }
  lemma  AugmentLookup(lookup': seq<BT.G.ReadOp>, lookup: seq<BT.G.ReadOp>, ref: BT.G.Reference, node: BT.G.Node, key: Key, cache: map<BT.G.Reference, BT.G.Node>, graph: map<BT.G.Reference, seq<BT.G.Reference>>)
    requires lookup' == new_lookup(lookup, ref, node)
    requires |lookup| > 0 ==> BT.WFLookupForKey(lookup, key)
    requires forall i: int {:trigger lookup[i]} | 0 <= i < |lookup| :: lookup[i].ref in graph
    requires forall i: int {:trigger lookup[i]} | 0 <= i < |lookup| :: MapsTo(cache, lookup[i].ref, lookup[i].node)
    requires |lookup| == 0 ==> ref == BT.G.Root()
    requires |lookup| > 0 ==> Last(lookup).node.children.Some?
    requires |lookup| > 0 ==> Last(lookup).node.children.value[Pivots.Route(Last(lookup).node.pivotTable, key)] == ref
    requires BT.WFNode(node)
    requires MapsTo(cache, ref, node)
    requires ref in graph
    ensures BT.WFLookupForKey(lookup', key)
    ensures Last(lookup').node == node
    ensures BT.InterpretLookup(lookup', key) == Messages.Merge(BT.InterpretLookup(lookup, key), BT.NodeLookup(node, key))
    ensures forall i: int {:trigger lookup'[i]} | 0 <= i < |lookup'| :: lookup'[i].ref in graph
    ensures forall i: int {:trigger lookup'[i]} | 0 <= i < |lookup'| :: MapsTo(cache, lookup'[i].ref, lookup'[i].node)
    decreases lookup', lookup, ref, node, key, cache, graph
  {
    reveal_new_lookup();
    forall idx: int {:trigger LookupFollowsChildRefAtLayer(key, lookup', idx)} {:trigger BT.ValidLayerIndex(lookup', idx)} | BT.ValidLayerIndex(lookup', idx) && idx < |lookup'| - 1
      ensures LookupFollowsChildRefAtLayer(key, lookup', idx)
    {
      if idx == |lookup'| - 2 {
        assert BT.LookupFollowsChildRefAtLayer(key, lookup', idx);
      } else {
        assert BT.LookupFollowsChildRefAtLayer(key, lookup, idx);
        assert BT.LookupFollowsChildRefAtLayer(key, lookup', idx);
      }
    }
    assert BT.LookupFollowsChildRefs(key, lookup');
  }
  lemma  queryIterateCorrect(k: Constants, s: BCVariables, key: Key, msg: Message, ref: BT.G.Reference, io: IO, counter: uint64, lookup: seq<BT.G.ReadOp>, s': BCVariables, res: Option<Value>, io': IO)
    requires queryInv(k, s, key, msg, ref, io, counter, lookup)
    requires !msg.Define?
    requires queryIterate(k, s, key, msg, ref, io, counter, s', res, io')
    ensures WFBCVars(s')
    ensures ValidDiskOp(diskOp(io'))
    ensures IDiskOp(diskOp(io')).jdop.NoDiskOp?
    ensures res.Some? ==> BBC.Next(Ik(k).bc, IBlockCache(s), IBlockCache(s'), IDiskOp(diskOp(io')).bdop, AdvanceOp(UI.GetOp(key, res.value), false))
    ensures res.None? ==> betree_next_dop(k, IBlockCache(s), IBlockCache(s'), IDiskOp(diskOp(io')).bdop)
    decreases counter
  {
    reveal_queryIterate();
    if counter == 0 {
      assert noop(k, IBlockCache(s), IBlockCache(s));
    } else {
      if ref !in s.cache {
        PageInNodeReqOrMakeRoomCorrect(k, s, io, ref, s', io');
      } else {
        ghost var node: Node := s.cache[ref];
        ghost var s0: BCVariables := s.(lru := LruModel.Use(s.lru, ref));
        LruModel.LruUse(s.lru, ref);
        assert IBlockCache(s0) == IBlockCache(s);
        ghost var r: int := Pivots.Route(node.pivotTable, key);
        ghost var bucket: Bucket := node.buckets[r];
        ghost var kmtMsg: Option<Message> := bucketBinarySearchLookup(bucket, key);
        ghost var newmsg: Message := if kmtMsg.Some? then Messages.Merge(msg, kmtMsg.value) else msg;
        ghost var lookupMsg: Message := if kmtMsg.Some? then kmtMsg.value else Messages.IdentityMessage();
        assert newmsg == Messages.Merge(msg, lookupMsg);
        ghost var inode: BT.G.Node := INode(s0.cache[ref]);
        assert BucketWellMarshalled(bucket) ==> lookupMsg == BT.NodeLookup(inode, key);
        ghost var newlookup: seq<BT.G.ReadOp> := new_lookup(lookup, ref, inode);
        AugmentLookup(newlookup, lookup, ref, inode, key, ICache(s0.cache), IIndirectionTable(s0.ephemeralIndirectionTable).graph);
        assert PBS.LookupVisitsWellMarshalledBuckets(newlookup, key) ==> BucketWellMarshalled(bucket);
        assert PBS.LookupVisitsWellMarshalledBuckets(newlookup, key) ==> PBS.LookupVisitsWellMarshalledBuckets(lookup, key) by {
          reveal_new_lookup();
        }
        if newmsg.Define? {
          assert BT.ValidQuery(BT.LookupQuery(key, res.value, newlookup));
          assert BBC.BetreeMove(Ik(k).bc, IBlockCache(s), IBlockCache(s0), IDiskOp(diskOp(io)).bdop, AdvanceOp(UI.GetOp(key, res.value), false), BT.BetreeQuery(BT.LookupQuery(key, res.value, newlookup)));
          assert stepsBetree(k, IBlockCache(s), IBlockCache(s0), AdvanceOp(UI.GetOp(key, res.value), false), BT.BetreeQuery(BT.LookupQuery(key, res.value, newlookup)));
        } else {
          if node.children.Some? {
            lemmaChildInGraph(k, s0, ref, node.children.value[r]);
            queryIterateCorrect(k, s0, key, newmsg, node.children.value[r], io, counter - 1, newlookup, s', res, io');
          } else {
            assert BC.OpTransaction(Ik(k).bc, IBlockCache(s), IBlockCache(s0), PBS.BetreeStepOps(BT.BetreeQuery(BT.LookupQuery(key, res.value, newlookup))));
            assert BBC.BetreeMove(Ik(k).bc, IBlockCache(s), IBlockCache(s0), IDiskOp(diskOp(io)).bdop, AdvanceOp(UI.GetOp(key, res.value), false), BT.BetreeQuery(BT.LookupQuery(key, res.value, newlookup)));
            assert stepsBetree(k, IBlockCache(s), IBlockCache(s0), AdvanceOp(UI.GetOp(key, res.value), false), BT.BetreeQuery(BT.LookupQuery(key, res.value, newlookup)));
          }
        }
      }
    }
  }
  lemma queryCorrect(k: Constants, s: BCVariables, io: IO, key: Key, s': BCVariables, res: Option<Value>, io': IO)
    requires io.IOInit?
    requires BCInv(k, s)
    requires s.Ready?
    requires query(k, s, io, key, s', res, io')
    ensures WFBCVars(s')
    ensures ValidDiskOp(diskOp(io'))
    ensures IDiskOp(diskOp(io')).jdop.NoDiskOp?
    ensures res.Some? ==> BBC.Next(Ik(k).bc, IBlockCache(s), IBlockCache(s'), IDiskOp(diskOp(io')).bdop, AdvanceOp(UI.GetOp(key, res.value), false))
    ensures res.None? ==> betree_next_dop(k, IBlockCache(s), IBlockCache(s'), IDiskOp(diskOp(io')).bdop)
    decreases k, s, io, key, s', res, io'
  {
    reveal_query();
    queryIterateCorrect(k, s, key, Messages.IdentityMessage(), BT.G.Root(), io, 40, [], s', res, io');
  }
}