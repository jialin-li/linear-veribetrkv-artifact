// InsertModel.i.dfy
module InsertModel {
  function {:opaque} {:fuel 0, 0} InsertKeyValue(k: Constants, s: BCVariables, key: Key, value: Value): (BCVariables, bool)
    requires BCInv(k, s)
    requires s.Ready?
    requires BT.G.Root() in s.cache
    requires |s.ephemeralIndirectionTable.graph| <= IndirectionTableModel.MaxSize() - 1
    decreases k, s, key, value
  {
    lemmaChildrenConditionsOfNode(k, s, BT.G.Root());
    if s.frozenIndirectionTable.Some? && IndirectionTableModel.HasEmptyLoc(s.frozenIndirectionTable.value, BT.G.Root()) then
      (s, false)
    else
      var msg: Message := Messages.Define(value); var newCache: map<BT.G.Reference, Node> := CacheInsertKeyValue(s.cache, BT.G.Root(), key, msg); var s0: BCVariables := s.(cache := newCache); var s': BCVariables := writeBookkeepingNoSuccsUpdate(k, s0, BT.G.Root()); (s', true)
  }
  lemma InsertKeyValueCorrect(k: Constants, s: BCVariables, key: Key, value: Value, replay: bool)
    requires BCInv(k, s)
    requires s.Ready?
    requires BT.G.Root() in s.cache
    requires |s.ephemeralIndirectionTable.graph| <= IndirectionTableModel.MaxSize() - 1
    requires WeightKey(key) + WeightMessage(Messages.Define(value)) + WeightBucketList(s.cache[BT.G.Root()].buckets) <= MaxTotalBucketWeight()
    ensures var (s': BCVariables, success: bool) := InsertKeyValue(k, s, key, value); WFBCVars(s') && (success ==> BBC.Next(Ik(k).bc, IBlockCache(s), IBlockCache(s'), BlockDisk.NoDiskOp, AdvanceOp(UI.PutOp(key, value), replay))) && (!success ==> betree_next(k, IBlockCache(s), IBlockCache(s')))
    decreases k, s, key, value, replay
  {
    reveal_InsertKeyValue();
    reveal_CacheInsertKeyValue();
    reveal_NodeInsertKeyValue();
    if s.frozenIndirectionTable.Some? && IndirectionTableModel.HasEmptyLoc(s.frozenIndirectionTable.value, BT.G.Root()) {
      assert s.frozenIndirectionTable.Some? && BT.G.Root() in IIndirectionTable(s.frozenIndirectionTable.value).graph && !(BT.G.Root() in IIndirectionTable(s.frozenIndirectionTable.value).locs);
      assert noop(k, IBlockCache(s), IBlockCache(s));
      return;
    }
    ghost var msg: Message := Messages.Define(value);
    ghost var root: Node := s.cache[BT.G.Root()];
    ghost var r: int := Pivots.Route(root.pivotTable, key);
    ghost var bucket: Bucket := root.buckets[r];
    ghost var newBucket: Bucket := B(bucket.b[key := msg]);
    ghost var newRoot: Node := root.(buckets := root.buckets[r := newBucket]);
    ghost var newCache: map<Reference, Node> := s.cache[BT.G.Root() := newRoot];
    WeightBucketListInsert(root.buckets, root.pivotTable, key, msg);
    assert BC.BlockPointsToValidReferences(INode(root), IIndirectionTable(s.ephemeralIndirectionTable).graph);
    assert WFBucket(newBucket);
    assert WFNode(newRoot);
    ghost var s0: BCVariables := s.(cache := newCache);
    ghost var s': BCVariables := writeBookkeepingNoSuccsUpdate(k, s0, BT.G.Root());
    reveal_writeBookkeepingNoSuccsUpdate();
    writeCorrect(k, s0, BT.G.Root(), newRoot);
    ghost var oldroot: BT.G.Node := INode(root);
    ghost var newroot: BT.G.Node := INode(newRoot);
    assert newroot == BT.AddMessageToNode(oldroot, key, msg);
    assert BT.G.Successors(newroot) == BT.G.Successors(oldroot);
    ghost var btStep: BetreeStep := BT.BetreeInsert(BT.MessageInsertion(key, msg, oldroot));
    assert BT.ValidInsertion(BT.MessageInsertion(key, msg, oldroot));
    assert WFNode(newRoot);
    assert WFBCVars(s');
    assert BC.Dirty(Ik(k).bc, IBlockCache(s), IBlockCache(s'), BT.G.Root(), newroot);
    assert BC.OpStep(Ik(k).bc, IBlockCache(s), IBlockCache(s'), BT.G.WriteOp(BT.G.Root(), newroot));
    assert BT.ValidBetreeStep(btStep);
    assert BC.OpStep(Ik(k).bc, IBlockCache(s), IBlockCache(s'), BT.BetreeStepOps(btStep)[0]);
    assert BC.OpTransaction(Ik(k).bc, IBlockCache(s), IBlockCache(s'), BT.BetreeStepOps(btStep));
    assert BBC.BetreeMove(Ik(k).bc, IBlockCache(s), IBlockCache(s'), BlockDisk.NoDiskOp, AdvanceOp(UI.PutOp(key, value), replay), btStep);
    assert stepsBetree(k, IBlockCache(s), IBlockCache(s'), AdvanceOp(UI.PutOp(key, value), replay), btStep);
  }
  predicate {:opaque} {:fuel 0, 0} insert(k: Constants, s: BCVariables, io: IO, key: Key, value: Value, s': BCVariables, success: bool, io': IO)
    requires io.IOInit?
    requires s.Ready?
    requires BCInv(k, s)
    decreases k, s, io, key, value, s', success, io'
  {
    if !(|s.ephemeralIndirectionTable.graph| <= IndirectionTableModel.MaxSize() - 3) then
      s' == s &&
      io' == io &&
      success == false
    else if BT.G.Root() !in s.cache then
      if TotalCacheSize(s) <= MaxCacheSize() - 1 then
        (s', io') == PageInNodeReq(k, s, io, BT.G.Root()) &&
        success == false
      else
        s' == s && io' == io && success == false
    else if WeightKey(key) + WeightMessage(Messages.Define(value)) + WeightBucketList(s.cache[BT.G.Root()].buckets) <= MaxTotalBucketWeight() then
      (s', success) == InsertKeyValue(k, s, key, value) &&
      io' == io
    else
      runFlushPolicy(k, s, io, s', io') && success == false
  }
  lemma insertCorrect(k: Constants, s: BCVariables, io: IO, key: Key, value: Value, s': BCVariables, success: bool, io': IO, replay: bool)
    requires io.IOInit?
    requires s.Ready?
    requires BCInv(k, s)
    requires insert(k, s, io, key, value, s', success, io')
    ensures WFBCVars(s')
    ensures ValidDiskOp(diskOp(io'))
    ensures IDiskOp(diskOp(io')).jdop.NoDiskOp?
    ensures success ==> BBC.Next(Ik(k).bc, IBlockCache(s), IBlockCache(s'), IDiskOp(diskOp(io')).bdop, AdvanceOp(UI.PutOp(key, value), replay))
    ensures !success ==> betree_next_dop(k, IBlockCache(s), IBlockCache(s'), IDiskOp(diskOp(io')).bdop)
    decreases k, s, io, key, value, s', success, io', replay
  {
    reveal_insert();
    if !(|s.ephemeralIndirectionTable.graph| <= IndirectionTableModel.MaxSize() - 3) {
      assert noop(k, IBlockCache(s), IBlockCache(s));
    } else if BT.G.Root() !in s.cache {
      if TotalCacheSize(s) <= MaxCacheSize() - 1 {
        PageInNodeReqCorrect(k, s, io, BT.G.Root());
      } else {
        assert noop(k, IBlockCache(s), IBlockCache(s));
      }
    } else if WeightKey(key) + WeightMessage(Messages.Define(value)) + WeightBucketList(s.cache[BT.G.Root()].buckets) <= MaxTotalBucketWeight() {
      InsertKeyValueCorrect(k, s, key, value, replay);
    } else {
      runFlushPolicyCorrect(k, s, io, s', io');
    }
  }
}