// CommitterAppendModel.i.dfy
module CommitterAppendModel {
  function {:opaque} {:fuel 0, 0} JournalAppend(k: Constants, cm: CM, key: Key, value: Value): (cm': CM)
    requires CommitterModel.WF(cm)
    requires cm.status == StatusReady
    requires JournalistModel.canAppend(cm.journalist, JournalInsert(key, value))
    decreases k, cm, key, value
  {
    var je: JournalEntry := JournalInsert(key, value);
    var journalist': JournalistModel := JournalistModel.append(cm.journalist, je);
    cm.(journalist := journalist')
  }
  lemma JournalAppendCorrect(k: Constants, cm: CM, key: Key, value: Value)
    requires CommitterModel.WF(cm)
    requires cm.status == StatusReady
    requires JournalistModel.canAppend(cm.journalist, JournalInsert(key, value))
    requires JournalistModel.I(cm.journalist).replayJournal == []
    ensures var cm': CM := JournalAppend(k, cm, key, value); CommitterModel.WF(cm') && JournalCache.Next(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, AdvanceOp(UI.PutOp(key, value), false))
    decreases k, cm, key, value
  {
    ghost var cm': CM := JournalAppend(k, cm, key, value);
    reveal_JournalAppend();
    assert JournalCache.Advance(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, AdvanceOp(UI.PutOp(key, value), false));
    assert JournalCache.NextStep(Ik(k).jc, CommitterModel.I(cm), CommitterModel.I(cm'), JournalDisk.NoDiskOp, AdvanceOp(UI.PutOp(key, value), false), JournalCache.AdvanceStep);
  }
}