// FlushPolicyImpl.i.dfy
module FlushPolicyImpl {
  method biggestSlot(buckets: seq<MutBucket>) returns (res: (uint64, uint64))
  {
    var j: uint64 := 1;
    var bestIdx: uint64 := 0;
    var bestWeight: uint64 := buckets[0 as uint64].Weight;
    while j < |buckets| as uint64
    {
      var w: uint64 := buckets[j].Weight;
      if w > bestWeight {
        bestIdx := j;
        bestWeight := w;
      }
      j := j + 1;
    }
    return (bestIdx, bestWeight);
  }
  method getActionToSplit(k: ImplConstants, s: ImplVariables, stack: seq<BT.G.Reference>, slots: seq<uint64>, i: uint64)
      returns (action: FlushPolicyModel.Action)
  {
    if i == 0 {
      if TotalCacheSize(s) <= MaxCacheSizeUint64() - 1 {
        action := FlushPolicyModel.ActionGrow;
      } else {
        action := FlushPolicyModel.ActionEvict;
      }
    } else {
      var nodePrev: Option<Node> := s.cache.GetOpt(stack[i - 1]);
      if |nodePrev.value.children.value| as uint64 < MaxNumChildrenUint64() {
        var nodeThis: Option<Node> := s.cache.GetOpt(stack[i]);
        if |nodeThis.value.buckets| as uint64 == 1 {
          action := FlushPolicyModel.ActionRepivot(stack[i]);
        } else {
          if TotalCacheSize(s) <= MaxCacheSizeUint64() - 2 {
            action := FlushPolicyModel.ActionSplit(stack[i - 1], slots[i - 1]);
          } else {
            action := FlushPolicyModel.ActionEvict;
          }
        }
      } else {
        action := getActionToSplit(k, s, stack, slots, i - 1);
      }
    }
  }
  method getActionToFlush(k: ImplConstants, s: ImplVariables, stack: seq<BT.G.Reference>, slots: seq<uint64>)
      returns (action: FlushPolicyModel.Action)
    modifies s.Repr()
  {
    if |stack| as uint64 == 40 {
      action := FlushPolicyModel.ActionFail;
    } else {
      var ref: NativeTypes.uint64 := stack[|stack| as uint64 - 1];
      var nodeOpt: Option<Node> := s.cache.GetOpt(ref);
      var node: Node := nodeOpt.value;
      if node.children.None? || |node.buckets| as uint64 == MaxNumChildrenUint64() {
        action := getActionToSplit(k, s, stack, slots, |stack| as uint64 - 1);
      } else {
        var bs: (uint64, uint64) := biggestSlot(node.buckets);
        var (slot: uint64, slotWeight: uint64) := bs;
        if |node.buckets| as uint64 < 8 {
          var childref: NativeTypes.uint64 := node.children.value[slot];
          var childOpt: Option<Node> := s.cache.GetOpt(childref);
          if childOpt.Some? {
            var child: Node := childOpt.value;
            s.lru.Use(childref);
            var childTotalWeight: uint64 := MutBucket.computeWeightOfSeq(child.buckets);
            if childTotalWeight + FlushTriggerWeightUint64() <= MaxTotalBucketWeightUint64() {
              if TotalCacheSize(s) <= MaxCacheSizeUint64() - 1 {
                action := FlushPolicyModel.ActionFlush(ref, slot);
              } else {
                action := FlushPolicyModel.ActionEvict;
              }
            } else {
              action := getActionToFlush(k, s, stack + [childref], slots + [slot]);
            }
          } else {
            if TotalCacheSize(s) <= MaxCacheSizeUint64() - 1 {
              action := FlushPolicyModel.ActionPageIn(childref);
            } else {
              action := FlushPolicyModel.ActionEvict;
            }
          }
        } else {
          action := getActionToSplit(k, s, stack, slots, |stack| as uint64 - 1);
        }
      }
    }
  }
  method runFlushPolicy(k: ImplConstants, s: ImplVariables, io: DiskIOHandler)
    modifies io, s.Repr()
  {
    s.lru.Use(BT.G.Root());
    var action: FlushPolicyModel.Action := getActionToFlush(k, s, [BT.G.Root()], []);
    match action {
      case ActionPageIn(ref) =>
        {
          PageInNodeReq(k, s, io, ref);
        }
      case ActionSplit(parentref, slot) =>
        {
          var parent := s.cache.GetOpt(parentref);
          doSplit(k, s, parentref, parent.value.children.value[slot], slot);
        }
      case ActionRepivot(ref) =>
        {
          var node := s.cache.GetOpt(ref);
          repivotLeaf(k, s, ref, node.value);
        }
      case ActionFlush(parentref, slot) =>
        {
          var parent := s.cache.GetOpt(parentref);
          var childref := parent.value.children.value[slot];
          var child := s.cache.GetOpt(childref);
          flush(k, s, parentref, slot, parent.value.children.value[slot], child.value);
        }
      case ActionGrow =>
        {
          grow(k, s);
        }
      case ActionEvict =>
        {
          EvictOrDealloc(k, s, io);
        }
      case ActionFail =>
        {
          print "ActionFail\n";
        }
    }
  }
}