// NodeModel.i.dfy
module NodeModel {
  function {:opaque} {:fuel 0, 0} SplitParent(fused_parent: Node, pivot: Key, slot: int, left_childref: BT.G.Reference, right_childref: BT.G.Reference): (res: Node)
    requires WFNode(fused_parent)
    requires 0 <= slot < |fused_parent.buckets|
    requires fused_parent.children.Some?
    decreases fused_parent, pivot, slot, left_childref, right_childref
  {
    var pivots: seq<Key> := Sequences.insert(fused_parent.pivotTable, pivot, slot);
    var buckets: BucketList := SplitBucketInList(fused_parent.buckets, slot, pivot);
    Node(pivots, Some(replace1with2(fused_parent.children.value, left_childref, right_childref, slot)), buckets)
  }
  lemma SplitParentCorrect(parentref: BT.G.Reference, fused_parent: Node, pivot: Key, slot: int, left_childref: BT.G.Reference, right_childref: BT.G.Reference)
    requires WFNode(fused_parent)
    requires BT.WFNode(INode(fused_parent))
    requires 0 <= slot < |fused_parent.buckets|
    requires PivotsLib.PivotInsertable(fused_parent.pivotTable, slot, pivot)
    requires |fused_parent.buckets| <= MaxNumChildren() - 1
    requires fused_parent.children.Some?
    ensures true && var res: Node := SplitParent(fused_parent, pivot, slot, left_childref, right_childref); WFNode(res) && var inode: BT.G.Node := INode(fused_parent); true && var inode': BT.G.Node := INode(res); inode' == BT.SplitParent(inode, pivot, slot, left_childref, right_childref) && WeightBucketList(res.buckets) <= WeightBucketList(fused_parent.buckets)
    decreases parentref, fused_parent, pivot, slot, left_childref, right_childref
  {
    reveal_SplitParent();
    ghost var res: Node := SplitParent(fused_parent, pivot, slot, left_childref, right_childref);
    WFSplitBucketInList(fused_parent.buckets, slot, pivot, fused_parent.pivotTable);
    WeightSplitBucketInListLe(fused_parent.buckets, slot, pivot);
    assert WFNode(res);
    assert INode(res) == BT.SplitParent(INode(fused_parent), pivot, slot, left_childref, right_childref);
  }
  function {:opaque} {:fuel 0, 0} CutoffNodeAndKeepLeft(node: Node, pivot: Key): (node': Node)
    requires WFNode(node)
    ensures |node'.buckets| == |node'.pivotTable| + 1
    ensures node'.children.Some? ==> |node'.buckets| == |node'.children.value|
    decreases node, pivot
  {
    var cLeft: int := Pivots.CutoffForLeft(node.pivotTable, pivot);
    var leftPivots: seq<Key> := node.pivotTable[..cLeft];
    var leftChildren: Option<seq<Reference>> := if node.children.Some? then Some(node.children.value[..cLeft + 1]) else None;
    var splitBucket: Bucket := SplitBucketLeft(node.buckets[cLeft], pivot);
    var leftBuckets: seq<Bucket> := node.buckets[..cLeft] + [splitBucket];
    Node(leftPivots, leftChildren, leftBuckets)
  }
  lemma CutoffNodeAndKeepLeftCorrect(node: Node, pivot: Key)
    requires WFNode(node)
    requires BT.WFNode(INode(node))
    ensures var node': Node := CutoffNodeAndKeepLeft(node, pivot); WFNode(node') && INode(node') == BT.CutoffNodeAndKeepLeft(INode(node), pivot)
    decreases node, pivot
  {
    reveal_CutoffNodeAndKeepLeft();
    BT.reveal_CutoffNodeAndKeepLeft();
    ghost var cLeft: int := Pivots.CutoffForLeft(node.pivotTable, pivot);
    ghost var leftPivots: seq<Key> := node.pivotTable[..cLeft];
    ghost var leftChildren: Option<seq<NativeTypes.uint64>> := if node.children.Some? then Some(node.children.value[..cLeft + 1]) else None;
    ghost var splitBucket: Bucket := SplitBucketLeft(node.buckets[cLeft], pivot);
    ghost var leftBuckets: seq<Bucket> := node.buckets[..cLeft] + [splitBucket];
    Pivots.WFSlice(node.pivotTable, 0, cLeft);
    WFSplitBucketListLeft(node.buckets, node.pivotTable, cLeft, pivot);
    WeightSplitBucketListLeft(node.buckets, node.pivotTable, cLeft, pivot);
  }
  function {:opaque} {:fuel 0, 0} CutoffNodeAndKeepRight(node: Node, pivot: Key): (node': Node)
    requires WFNode(node)
    ensures |node'.buckets| == |node'.pivotTable| + 1
    ensures node'.children.Some? ==> |node'.buckets| == |node'.children.value|
    decreases node, pivot
  {
    var cRight: int := Pivots.CutoffForRight(node.pivotTable, pivot);
    var rightPivots: seq<Key> := node.pivotTable[cRight..];
    var rightChildren: Option<seq<Reference>> := if node.children.Some? then Some(node.children.value[cRight..]) else None;
    var splitBucket: Bucket := SplitBucketRight(node.buckets[cRight], pivot);
    var rightBuckets: seq<Bucket> := [splitBucket] + node.buckets[cRight + 1..];
    Node(rightPivots, rightChildren, rightBuckets)
  }
  lemma CutoffNodeAndKeepRightCorrect(node: Node, pivot: Key)
    requires WFNode(node)
    requires BT.WFNode(INode(node))
    ensures var node': Node := CutoffNodeAndKeepRight(node, pivot); WFNode(node') && INode(node') == BT.CutoffNodeAndKeepRight(INode(node), pivot)
    decreases node, pivot
  {
    reveal_CutoffNodeAndKeepRight();
    BT.reveal_CutoffNodeAndKeepRight();
    ghost var cRight: int := Pivots.CutoffForRight(node.pivotTable, pivot);
    ghost var rightPivots: seq<Key> := node.pivotTable[cRight..];
    ghost var rightChildren: Option<seq<NativeTypes.uint64>> := if node.children.Some? then Some(node.children.value[cRight..]) else None;
    ghost var splitBucket: Bucket := SplitBucketRight(node.buckets[cRight], pivot);
    ghost var rightBuckets: seq<Bucket> := [splitBucket] + node.buckets[cRight + 1..];
    Pivots.WFSuffix(node.pivotTable, cRight);
    WFSplitBucketListRight(node.buckets, node.pivotTable, cRight, pivot);
    WeightSplitBucketListRight(node.buckets, node.pivotTable, cRight, pivot);
  }
  function {:opaque} {:fuel 0, 0} CutoffNode(node: Node, lbound: Option<Key>, rbound: Option<Key>): (node': Node)
    requires WFNode(node)
    ensures |node'.buckets| == |node'.pivotTable| + 1
    ensures node'.children.Some? ==> |node'.buckets| == |node'.children.value|
    decreases node, lbound, rbound
  {
    match lbound {
      case None =>
        match rbound {
          case None =>
            node
          case Some(rbound) =>
            CutoffNodeAndKeepLeft(node, rbound)
        }
      case Some(lbound) =>
        match rbound {
          case None =>
            CutoffNodeAndKeepRight(node, lbound)
          case Some(rbound) =>
            var node1 := CutoffNodeAndKeepLeft(node, rbound);
            CutoffNodeAndKeepLeftCorrect(node, rbound);
            CutoffNodeAndKeepRight(node1, lbound)
        }
    }
  }
  lemma CutoffNodeCorrect(node: Node, lbound: Option<Key>, rbound: Option<Key>)
    requires WFNode(node)
    requires BT.WFNode(INode(node))
    ensures var node': Node := CutoffNode(node, lbound, rbound); WFNode(node') && INode(node') == BT.CutoffNode(INode(node), lbound, rbound)
    decreases node, lbound, rbound
  {
    reveal_CutoffNode();
    BT.reveal_CutoffNode();
    match lbound {
      case None =>
        {
          match rbound {
            case None =>
              {
              }
            case Some(rbound) =>
              {
                CutoffNodeAndKeepLeftCorrect(node, rbound);
              }
          }
        }
      case Some(lbound) =>
        {
          match rbound {
            case None =>
              {
                CutoffNodeAndKeepRightCorrect(node, lbound);
              }
            case Some(rbound) =>
              {
                var node1 := CutoffNodeAndKeepLeft(node, rbound);
                CutoffNodeAndKeepLeftCorrect(node, rbound);
                CutoffNodeAndKeepRightCorrect(node1, lbound);
              }
          }
        }
    }
  }
  function {:opaque} {:fuel 0, 0} NodeInsertKeyValue(node: Node, key: Key, msg: Message): Node
    requires WFNode(node)
    decreases node, key, msg
  {
    var r: int := Pivots.Route(node.pivotTable, key);
    var bucket: Bucket := node.buckets[r];
    var newBucket: Bucket := BucketInsert(bucket, key, msg);
    node.(buckets := node.buckets[r := newBucket])
  }
  function {:opaque} {:fuel 0, 0} SplitChildLeft(child: Node, num_children_left: int): Node
    requires 0 <= num_children_left - 1 <= |child.pivotTable|
    requires child.children.Some? ==> 0 <= num_children_left <= |child.children.value|
    requires 0 <= num_children_left <= |child.buckets|
    decreases child, num_children_left
  {
    Node(child.pivotTable[..num_children_left - 1], if child.children.Some? then Some(child.children.value[..num_children_left]) else None, child.buckets[..num_children_left])
  }
  function {:opaque} {:fuel 0, 0} SplitChildRight(child: Node, num_children_left: int): Node
    requires 0 <= num_children_left <= |child.pivotTable|
    requires child.children.Some? ==> 0 <= num_children_left <= |child.children.value|
    requires 0 <= num_children_left <= |child.buckets|
    decreases child, num_children_left
  {
    Node(child.pivotTable[num_children_left..], if child.children.Some? then Some(child.children.value[num_children_left..]) else None, child.buckets[num_children_left..])
  }
  lemma lemmaSplitChild(child: Node, num_children_left: int)
    requires WFNode(child)
    requires BT.WFNode(INode(child))
    requires 1 <= num_children_left <= |child.buckets| - 1
    ensures WFNode(SplitChildLeft(child, num_children_left))
    ensures WFNode(SplitChildRight(child, num_children_left))
    ensures INode(SplitChildLeft(child, num_children_left)) == BT.SplitChildLeft(INode(child), num_children_left)
    ensures INode(SplitChildRight(child, num_children_left)) == BT.SplitChildRight(INode(child), num_children_left)
    decreases child, num_children_left
  {
    reveal_SplitChildLeft();
    reveal_SplitChildRight();
    Pivots.WFSlice(child.pivotTable, 0, num_children_left - 1);
    Pivots.WFSuffix(child.pivotTable, num_children_left);
    WFBucketListSplitLeft(child.buckets, child.pivotTable, num_children_left);
    WFBucketListSplitRight(child.buckets, child.pivotTable, num_children_left);
    WeightBucketListSlice(child.buckets, 0, num_children_left);
    WeightBucketListSuffix(child.buckets, num_children_left);
    assert WFNode(SplitChildRight(child, num_children_left));
    assert WFNode(SplitChildLeft(child, num_children_left));
  }
  function {:opaque} {:fuel 0, 0} CacheInsertKeyValue(cache: map<BT.G.Reference, Node>, ref: BT.G.Reference, key: Key, msg: Message): map<BT.G.Reference, Node>
    requires ref in cache
    requires WFNode(cache[ref])
    decreases cache, ref, key, msg
  {
    cache[ref := NodeInsertKeyValue(cache[ref], key, msg)]
  }
}