// IndirectionTableImpl.i.dfy
module IndirectionTableImpl {
  type HashMap = MutableMap.ResizingHashMap<IndirectionTableModel.Entry>
  class IndirectionTable {
    var t: HashMap
    var garbageQueue: LruImpl.LruImplQueue?
    var refUpperBound: uint64
    var findLoclessIterator: Option<MutableMapModel.SimpleIterator>
    ghost var Repr: set<object>
    method DebugAccumulate() returns (acc: DebugAccumulator.DebugAccumulator)
      requires false
    {
      acc := DebugAccumulator.EmptyAccumulator();
      var a: DebugAccumulator.AccRec := new DebugAccumulator.AccRec(t.Count, "IndirectionTableModel.Entry");
      acc := DebugAccumulator.AccPut(acc, "t", a);
      var r: DebugAccumulator.DebugAccumulator := garbageQueue.DebugAccumulate();
      a := new DebugAccumulator.AccRec.Index(r);
      acc := DebugAccumulator.AccPut(acc, "garbageQueue", a);
    }
    protected predicate Inv()
      reads this, Repr
      ensures Inv() ==> this in Repr
      decreases Repr + {this}
    {
      this in Repr &&
      this.t in Repr &&
      (this.garbageQueue != null ==>
        this.garbageQueue in Repr) &&
      this.Repr == {this} + this.t.Repr + (if this.garbageQueue != null then this.garbageQueue.Repr else {}) &&
      this !in this.t.Repr &&
      this.t.Inv() &&
      (this.garbageQueue != null ==>
        this.garbageQueue.Inv()) &&
      (this.garbageQueue != null ==>
        this.garbageQueue.Repr !! this.t.Repr) &&
      (this.garbageQueue != null ==>
        this !in this.garbageQueue.Repr) &&
      var predCounts: map<BT.G.Reference, int> := IndirectionTableModel.PredCounts(this.t.I()); true && var graph: map<NativeTypes.uint64, seq<BT.G.Reference>> := IndirectionTableModel.Graph(this.t.I()); true && var locs: map<BT.G.Reference, Location> := IndirectionTableModel.Locs(this.t.I()); IndirectionTableModel.ValidPredCounts(predCounts, graph) && BC.GraphClosed(graph) && (forall ref: NativeTypes.uint64 {:trigger graph[ref]} {:trigger ref in graph} | ref in graph :: |graph[ref]| <= MaxNumChildren()) && (this.garbageQueue != null ==> (forall ref: uint64 {:trigger ref in LruModel.I(garbageQueue.Queue)} {:trigger t.I().contents[ref]} {:trigger ref in this.t.I().contents} | ref in this.t.I().contents && t.I().contents[ref].predCount == 0 :: ref in LruModel.I(garbageQueue.Queue)) && forall ref: uint64 {:trigger t.I().contents[ref]} {:trigger ref in t.I().contents} {:trigger ref in LruModel.I(garbageQueue.Queue)} | ref in LruModel.I(garbageQueue.Queue) :: ref in t.I().contents && t.I().contents[ref].predCount == 0) && BT.G.Root() in t.I().contents && this.t.Count as int <= IndirectionTableModel.MaxSize() && (forall ref: uint64 {:trigger ref in graph} | ref in graph :: ref <= this.refUpperBound) && (findLoclessIterator.Some? ==> MutableMapModel.WFSimpleIter(t.I(), findLoclessIterator.value) && forall r: uint64 {:trigger r in locs} {:trigger r in findLoclessIterator.value.s} | r in findLoclessIterator.value.s :: r in locs)
    }
    protected function I(): IndirectionTableModel.IndirectionTable
      requires Inv()
      reads this, Repr
      ensures IndirectionTableModel.Inv(I())
      decreases Repr + {this}
    {
      var res: IndirectionTable := IndirectionTableModel.FromHashMap(t.I(), if garbageQueue != null then Some(garbageQueue.Queue) else None, refUpperBound, findLoclessIterator);
      IndirectionTableModel.reveal_Inv(res);
      res
    }
    constructor Empty()
      ensures Inv()
      ensures fresh(Repr)
    {
      this.t := new MutableMap.ResizingHashMap<IndirectionTableModel.Entry>(128);
      this.findLoclessIterator := None;
      new;
      this.t.Insert(BT.G.Root(), IndirectionTableModel.Entry(None, [], 1));
      this.garbageQueue := null;
      Repr := {this} + this.t.Repr;
    }
    constructor RootOnly(loc: Location)
      ensures Inv()
      ensures fresh(Repr)
      ensures I() == IndirectionTableModel.ConstructorRootOnly(loc)
      decreases loc
    {
      this.t := new MutableMap.ResizingHashMap<IndirectionTableModel.Entry>(128);
      this.findLoclessIterator := None;
      new;
      this.t.Insert(BT.G.Root(), IndirectionTableModel.Entry(Some(loc), [], 1));
      this.garbageQueue := null;
      this.refUpperBound := BT.G.Root();
      Repr := {this} + this.t.Repr;
      IndirectionTableModel.reveal_ConstructorRootOnly();
    }
    constructor (t: HashMap)
      ensures this.t == t
      ensures this.garbageQueue == null
      decreases t
    {
      this.t := t;
      this.garbageQueue := null;
    }
    method Clone() returns (table: IndirectionTable)
      requires Inv()
      ensures table.Inv()
      ensures fresh(table.Repr)
      ensures table.I() == IndirectionTableModel.clone(old(I()))
    {
      var t0: ResizingHashMap<IndirectionTableModel.Entry> := this.t.Clone();
      table := new IndirectionTable(t0);
      table.refUpperBound := this.refUpperBound;
      table.findLoclessIterator := None;
      table.Repr := {table} + table.t.Repr + if table.garbageQueue != null then table.garbageQueue.Repr else {};
      IndirectionTableModel.reveal_clone();
    }
    method GetEntry(ref: BT.G.Reference) returns (e: Option<IndirectionTableModel.Entry>)
      requires Inv()
      ensures e == IndirectionTableModel.GetEntry(I(), ref)
      decreases ref
    {
      IndirectionTableModel.reveal_GetEntry();
      e := this.t.Get(ref);
    }
    method HasEmptyLoc(ref: BT.G.Reference) returns (b: bool)
      requires Inv()
      ensures b == IndirectionTableModel.HasEmptyLoc(I(), ref)
      decreases ref
    {
      var entry: Option<IndirectionTableModel.Entry> := this.t.Get(ref);
      b := entry.Some? && entry.value.loc.None?;
    }
    method RemoveLoc(ref: BT.G.Reference) returns (oldLoc: Option<Location>)
      requires Inv()
      requires IndirectionTableModel.TrackingGarbage(I())
      requires ref in I().graph
      modifies Repr
      ensures Inv()
      ensures forall o: object {:trigger o in old(Repr)} {:trigger o in Repr} | o in Repr :: fresh(o) || o in old(Repr)
      ensures (I(), oldLoc) == IndirectionTableModel.RemoveLoc(old(I()), ref)
      decreases ref
    {
      IndirectionTableModel.reveal_RemoveLoc();
      var it: SimpleIterator := t.FindSimpleIter(ref);
      var oldEntry: IteratorOutput<IndirectionTableModel.Entry> := t.SimpleIterOutput(it);
      var predCount: uint64 := oldEntry.value.predCount;
      var succs: seq<BT.G.Reference> := oldEntry.value.succs;
      t.UpdateByIter(it, IndirectionTableModel.Entry(None, succs, predCount));
      this.findLoclessIterator := None;
      oldLoc := oldEntry.value.loc;
      Repr := {this} + this.t.Repr + if this.garbageQueue != null then this.garbageQueue.Repr else {};
      ghost var _: (IndirectionTable, Option<Location>) := IndirectionTableModel.RemoveLoc(old(I()), ref);
    }
    method AddLocIfPresent(ref: BT.G.Reference, loc: Location) returns (added: bool)
      requires Inv()
      modifies Repr
      ensures Inv()
      ensures forall o: object {:trigger o in old(Repr)} {:trigger o in Repr} | o in Repr :: fresh(o) || o in old(Repr)
      ensures (I(), added) == IndirectionTableModel.AddLocIfPresent(old(I()), ref, loc)
      decreases ref, loc
    {
      IndirectionTableModel.reveal_AddLocIfPresent();
      var it: SimpleIterator := this.t.FindSimpleIter(ref);
      var oldEntry: IteratorOutput<IndirectionTableModel.Entry> := this.t.SimpleIterOutput(it);
      added := oldEntry.Next? && oldEntry.value.loc.None?;
      if added {
        ghost var ghosty: bool := true;
        if ghosty {
          if I().findLoclessIterator.Some? {
            MutableMapModel.UpdatePreservesSimpleIter(I().t, it, IndirectionTableModel.Entry(Some(loc), oldEntry.value.succs, oldEntry.value.predCount), I().findLoclessIterator.value);
          }
        }
        this.t.UpdateByIter(it, IndirectionTableModel.Entry(Some(loc), oldEntry.value.succs, oldEntry.value.predCount));
      }
      Repr := {this} + this.t.Repr + if this.garbageQueue != null then this.garbageQueue.Repr else {};
      ghost var _: (IndirectionTable, bool) := IndirectionTableModel.AddLocIfPresent(old(I()), ref, loc);
    }
    method RemoveRef(ref: BT.G.Reference) returns (oldLoc: Option<Location>)
      requires Inv()
      requires IndirectionTableModel.TrackingGarbage(I())
      requires IndirectionTableModel.deallocable(I(), ref)
      modifies Repr
      ensures Inv()
      ensures forall o: object {:trigger o in old(Repr)} {:trigger o in Repr} | o in Repr :: fresh(o) || o in old(Repr)
      ensures (I(), oldLoc) == IndirectionTableModel.RemoveRef(old(I()), ref)
      decreases ref
    {
      IndirectionTableModel.reveal_RemoveRef();
      IndirectionTableModel.lemma_count_eq_graph_size(I().t);
      IndirectionTableModel.LemmaRemoveRefStuff(I(), ref);
      var oldEntry: Option<IndirectionTableModel.Entry> := this.t.RemoveAndGet(ref);
      IndirectionTableModel.lemma_count_eq_graph_size(this.t.I());
      this.garbageQueue.Remove(ref);
      UpdatePredCounts(this.t, this.garbageQueue, ref, [], oldEntry.value.succs);
      IndirectionTableModel.lemma_count_eq_graph_size(this.t.I());
      oldLoc := if oldEntry.Some? then oldEntry.value.loc else None;
      this.findLoclessIterator := None;
      Repr := {this} + this.t.Repr + if this.garbageQueue != null then this.garbageQueue.Repr else {};
      ghost var _: (IndirectionTable, Option<Location>) := IndirectionTableModel.RemoveRef(old(I()), ref);
    }
    static method PredInc(t: HashMap, q: LruImpl.LruImplQueue, ref: BT.G.Reference)
      requires t.Inv()
      requires q.Inv()
      requires t.Count as nat < 18446744073709551616 / 8
      requires ref in t.I().contents
      requires t.I().contents[ref].predCount < 18446744073709551615
      requires t.Repr !! q.Repr
      modifies t.Repr, q.Repr
      ensures forall o: object {:trigger o in old(t.Repr)} {:trigger o in t.Repr} | o in t.Repr :: o in old(t.Repr) || fresh(o)
      ensures forall o: object {:trigger o in old(q.Repr)} {:trigger o in q.Repr} | o in q.Repr :: o in old(q.Repr) || fresh(o)
      ensures t.Repr !! q.Repr
      ensures t.Inv()
      ensures q.Inv()
      ensures (t.I(), q.Queue) == IndirectionTableModel.PredInc(old(t.I()), old(q.Queue), ref)
      decreases t, q, ref
    {
      var oldEntryOpt: Option<IndirectionTableModel.Entry> := t.Get(ref);
      var oldEntry: IndirectionTableModel.Entry := oldEntryOpt.value;
      var newEntry: IndirectionTableModel.Entry := oldEntry.(predCount := oldEntry.predCount + 1);
      t.Insert(ref, newEntry);
      if oldEntry.predCount == 0 {
        q.Remove(ref);
      }
    }
    static method PredDec(t: HashMap, q: LruImpl.LruImplQueue, ref: BT.G.Reference)
      requires t.Inv()
      requires q.Inv()
      requires t.Count as nat < 18446744073709551616 / 8
      requires ref in t.I().contents
      requires t.I().contents[ref].predCount > 0
      requires t.Repr !! q.Repr
      requires |LruModel.I(q.Queue)| <= 4294967296
      modifies t.Repr, q.Repr
      ensures forall o: object {:trigger o in old(t.Repr)} {:trigger o in t.Repr} | o in t.Repr :: o in old(t.Repr) || fresh(o)
      ensures forall o: object {:trigger o in old(q.Repr)} {:trigger o in q.Repr} | o in q.Repr :: o in old(q.Repr) || fresh(o)
      ensures t.Repr !! q.Repr
      ensures t.Inv()
      ensures q.Inv()
      ensures (t.I(), q.Queue) == IndirectionTableModel.PredDec(old(t.I()), old(q.Queue), ref)
      decreases t, q, ref
    {
      var oldEntryOpt: Option<IndirectionTableModel.Entry> := t.Get(ref);
      var oldEntry: IndirectionTableModel.Entry := oldEntryOpt.value;
      var newEntry: IndirectionTableModel.Entry := oldEntry.(predCount := oldEntry.predCount - 1);
      t.Insert(ref, newEntry);
      if oldEntry.predCount == 1 {
        q.Use(ref);
      }
    }
    static method UpdatePredCounts(t: HashMap, q: LruImpl.LruImplQueue, ghost changingRef: BT.G.Reference, newSuccs: seq<BT.G.Reference>, oldSuccs: seq<BT.G.Reference>)
      requires t.Inv()
      requires q.Inv()
      requires t.Repr !! q.Repr
      requires IndirectionTableModel.RefcountUpdateInv(t.I(), q.Queue, changingRef, newSuccs, oldSuccs, 0, 0)
      modifies t.Repr, q.Repr
      ensures forall o: object {:trigger o in old(t.Repr)} {:trigger o in t.Repr} | o in t.Repr :: o in old(t.Repr) || fresh(o)
      ensures forall o: object {:trigger o in old(q.Repr)} {:trigger o in q.Repr} | o in q.Repr :: o in old(q.Repr) || fresh(o)
      ensures t.Repr !! q.Repr
      ensures t.Inv()
      ensures q.Inv()
      ensures (t.I(), q.Queue) == IndirectionTableModel.UpdatePredCountsInc(old(t.I()), old(q.Queue), changingRef, newSuccs, oldSuccs, 0)
      decreases t, q, changingRef, newSuccs, oldSuccs
    {
      var idx: uint64 := 0;
      while idx < |newSuccs| as uint64
        invariant forall o: object {:trigger o in old(t.Repr)} {:trigger o in t.Repr} | o in t.Repr :: o in old(t.Repr) || fresh(o)
        invariant forall o: object {:trigger o in old(q.Repr)} {:trigger o in q.Repr} | o in q.Repr :: o in old(q.Repr) || fresh(o)
        invariant t.Repr !! q.Repr
        invariant t.Inv()
        invariant q.Inv()
        invariant IndirectionTableModel.RefcountUpdateInv(t.I(), q.Queue, changingRef, newSuccs, oldSuccs, idx as int, 0)
        invariant IndirectionTableModel.UpdatePredCountsInc(old(t.I()), old(q.Queue), changingRef, newSuccs, oldSuccs, 0) == IndirectionTableModel.UpdatePredCountsInc(t.I(), q.Queue, changingRef, newSuccs, oldSuccs, idx)
        decreases |newSuccs| - idx as int
      {
        IndirectionTableModel.LemmaUpdatePredCountsIncStuff(t.I(), q.Queue, changingRef, newSuccs, oldSuccs, idx as int);
        PredInc(t, q, newSuccs[idx]);
        idx := idx + 1;
      }
      var idx2: uint64 := 0;
      while idx2 < |oldSuccs| as uint64
        invariant forall o: object {:trigger o in old(t.Repr)} {:trigger o in t.Repr} | o in t.Repr :: o in old(t.Repr) || fresh(o)
        invariant forall o: object {:trigger o in old(q.Repr)} {:trigger o in q.Repr} | o in q.Repr :: o in old(q.Repr) || fresh(o)
        invariant t.Repr !! q.Repr
        invariant t.Inv()
        invariant q.Inv()
        invariant IndirectionTableModel.RefcountUpdateInv(t.I(), q.Queue, changingRef, newSuccs, oldSuccs, |newSuccs|, idx2 as int)
        invariant IndirectionTableModel.UpdatePredCountsInc(old(t.I()), old(q.Queue), changingRef, newSuccs, oldSuccs, 0) == IndirectionTableModel.UpdatePredCountsDec(t.I(), q.Queue, changingRef, newSuccs, oldSuccs, idx2)
        decreases |oldSuccs| - idx2 as int
      {
        IndirectionTableModel.LemmaUpdatePredCountsDecStuff(t.I(), q.Queue, changingRef, newSuccs, oldSuccs, idx2 as int);
        PredDec(t, q, oldSuccs[idx2]);
        idx2 := idx2 + 1;
      }
    }
    method UpdateAndRemoveLoc(ref: BT.G.Reference, succs: seq<BT.G.Reference>) returns (oldLoc: Option<Location>)
      requires Inv()
      requires IndirectionTableModel.TrackingGarbage(I())
      requires |succs| <= MaxNumChildren()
      requires |I().graph| < IndirectionTableModel.MaxSize()
      requires IndirectionTableModel.SuccsValid(succs, I().graph)
      modifies Repr
      ensures Inv()
      ensures forall o: object {:trigger o in old(Repr)} {:trigger o in Repr} | o in Repr :: fresh(o) || o in old(Repr)
      ensures (I(), oldLoc) == IndirectionTableModel.UpdateAndRemoveLoc(old(I()), ref, succs)
      decreases ref, succs
    {
      IndirectionTableModel.reveal_UpdateAndRemoveLoc();
      IndirectionTableModel.lemma_count_eq_graph_size(I().t);
      IndirectionTableModel.LemmaUpdateAndRemoveLocStuff(I(), ref, succs);
      var oldEntry: Option<IndirectionTableModel.Entry> := this.t.Get(ref);
      var predCount: uint64 := if oldEntry.Some? then oldEntry.value.predCount else 0;
      if oldEntry.None? {
        this.garbageQueue.Use(ref);
      }
      this.t.Insert(ref, IndirectionTableModel.Entry(None, succs, predCount));
      IndirectionTableModel.lemma_count_eq_graph_size(this.t.I());
      UpdatePredCounts(this.t, this.garbageQueue, ref, succs, if oldEntry.Some? then oldEntry.value.succs else []);
      IndirectionTableModel.lemma_count_eq_graph_size(this.t.I());
      if ref > this.refUpperBound {
        this.refUpperBound := ref;
      }
      oldLoc := if oldEntry.Some? && oldEntry.value.loc.Some? then oldEntry.value.loc else None;
      this.findLoclessIterator := None;
      Repr := {this} + this.t.Repr + if this.garbageQueue != null then this.garbageQueue.Repr else {};
      ghost var _: (IndirectionTable, Option<Location>) := IndirectionTableModel.UpdateAndRemoveLoc(old(I()), ref, succs);
    }
    static lemma  lemma_valToHashMapNonePrefix(a: seq<V>, i: int)
      requires IndirectionTableModel.valToHashMap.requires(a)
      requires 0 <= i <= |a|
      requires IndirectionTableModel.valToHashMap(a[..i]).None?
      ensures IndirectionTableModel.valToHashMap(a).None?
      decreases |a| - i
    {
      if i == |a| {
        assert a[..i] == a;
      } else {
        assert IndirectionTableModel.valToHashMap(a[..i + 1]).None? by {
          assert DropLast(a[..i + 1]) == a[..i];
          assert Last(a[..i + 1]) == a[i];
        }
        lemma_valToHashMapNonePrefix(a, i + 1);
      }
    }
    static method {:fuel ValInGrammar, 3} ValToHashMap(a: seq<V>) returns (s: Option<HashMap>)
      requires IndirectionTableModel.valToHashMap.requires(a)
      ensures s.None? ==> IndirectionTableModel.valToHashMap(a).None?
      ensures s.Some? ==> s.value.Inv()
      ensures s.Some? ==> Some(s.value.I()) == IndirectionTableModel.valToHashMap(a)
      ensures s.Some? ==> s.value.Count as nat == |a|
      ensures s.Some? ==> s.value.Count as nat < 18446744073709551616 / 8
      ensures s.Some? ==> fresh(s.value) && fresh(s.value.Repr)
      decreases a
    {
      var i: uint64 := 0;
      var mutMap: MutableMap.ResizingHashMap<IndirectionTableModel.Entry> := new MutableMap.ResizingHashMap<IndirectionTableModel.Entry>(1024);
      while i < |a| as uint64
        invariant 0 <= i as int <= |a|
        invariant mutMap.Inv()
        invariant fresh(mutMap.Repr)
        invariant IndirectionTableModel.valToHashMap(a[..i]) == Some(mutMap.I())
        decreases |a| as uint64 as int - i as int
      {
        var tuple: V := a[i];
        var ref: uint64 := tuple.t[0 as uint64].u;
        var addr: uint64 := tuple.t[1 as uint64].u;
        var len: uint64 := tuple.t[2 as uint64].u;
        var succs: seq<uint64> := tuple.t[3 as uint64].ua;
        var graphRef: Option<IndirectionTableModel.Entry> := mutMap.Get(ref);
        var loc: Location := Location(addr, len);
        assert ValidVal(tuple);
        assert ValidVal(tuple.t[3]);
        assert |succs| < 18446744073709551616;
        assert DropLast(a[..i + 1]) == a[..i];
        assert Last(a[..i + 1]) == a[i];
        if graphRef.Some? || !ValidNodeLocation(loc) || |succs| as uint64 > MaxNumChildrenUint64() {
          lemma_valToHashMapNonePrefix(a, (i + 1) as int);
          return None;
        } else {
          mutMap.Insert(ref, IndirectionTableModel.Entry(Some(loc), succs, 0));
          i := i + 1;
        }
      }
      assert a[..i] == a;
      return Some(mutMap);
    }
    static method ComputeRefCounts(t: HashMap) returns (t': MutableMap.ResizingHashMap?<IndirectionTableModel.Entry>)
      requires t.Inv()
      requires forall ref: uint64 {:trigger t.I().contents[ref]} {:trigger ref in t.I().contents} | ref in t.I().contents :: t.I().contents[ref].predCount == 0
      requires forall ref: uint64 {:trigger t.I().contents[ref]} {:trigger ref in t.I().contents} | ref in t.I().contents :: |t.I().contents[ref].succs| <= MaxNumChildren()
      requires t.I().count as int <= IndirectionTableModel.MaxSize()
      requires BT.G.Root() in t.I().contents
      ensures t' == null ==> IndirectionTableModel.ComputeRefCounts(old(t.I())) == None
      ensures t' != null ==> t'.Inv()
      ensures t' != null ==> IndirectionTableModel.ComputeRefCounts(old(t.I())) == Some(t'.I())
      ensures t' != null ==> fresh(t'.Repr)
      decreases t
    {
      IndirectionTableModel.LemmaComputeRefCountsIterateInvInit(t.I());
      var copy: HashMap := t;
      var t1: ResizingHashMap<IndirectionTableModel.Entry> := t.Clone();
      var oldEntryOpt: Option<IndirectionTableModel.Entry> := t1.Get(BT.G.Root());
      var oldEntry: IndirectionTableModel.Entry := oldEntryOpt.value;
      t1.Insert(BT.G.Root(), oldEntry.(predCount := 1));
      var it: Iterator<Entry> := copy.IterStart();
      while it.next.Next?
        invariant t1.Inv()
        invariant copy.Inv()
        invariant copy.Repr !! t1.Repr
        invariant fresh(t1.Repr)
        invariant IndirectionTableModel.ComputeRefCountsIterateInv(t1.I(), copy.I(), it)
        invariant BT.G.Root() in t1.I().contents
        invariant IndirectionTableModel.ComputeRefCounts(old(t.I())) == IndirectionTableModel.ComputeRefCountsIterate(t1.I(), copy.I(), it)
        decreases it.decreaser
      {
        IndirectionTableModel.LemmaComputeRefCountsIterateStuff(t1.I(), copy.I(), it);
        IndirectionTableModel.LemmaComputeRefCountsIterateValidPredCounts(t1.I(), copy.I(), it);
        ghost var t0: LinearHashMap<IndirectionTableModel.Entry> := t1.I();
        var succs: seq<BT.G.Reference> := it.next.value.succs;
        var i: uint64 := 0;
        while i < |succs| as uint64
          invariant t1.Inv()
          invariant copy.Inv()
          invariant copy.Repr !! t1.Repr
          invariant fresh(t1.Repr)
          invariant BT.G.Root() in t1.I().contents
          invariant 0 <= i as int <= |succs|
          invariant |succs| <= MaxNumChildren()
          invariant t1.I().count as int <= IndirectionTableModel.MaxSize()
          invariant forall ref: uint64 {:trigger t1.I().contents[ref]} {:trigger ref in t1.I().contents} | ref in t1.I().contents :: t1.I().contents[ref].predCount as int <= 281474976710656 + i as int
          invariant IndirectionTableModel.ComputeRefCounts(old(t.I())) == IndirectionTableModel.ComputeRefCountsIterate(t0, copy.I(), it)
          invariant IndirectionTableModel.ComputeRefCountsEntryIterate(t0, succs, 0) == IndirectionTableModel.ComputeRefCountsEntryIterate(t1.I(), succs, i)
          decreases |succs| - i as int
        {
          var ref: NativeTypes.uint64 := succs[i];
          var oldEntry: Option<IndirectionTableModel.Entry> := t1.Get(ref);
          if oldEntry.Some? {
            var newEntry: IndirectionTableModel.Entry := oldEntry.value.(predCount := oldEntry.value.predCount + 1);
            t1.Insert(ref, newEntry);
            i := i + 1;
          } else {
            return null;
          }
        }
        it := copy.IterInc(it);
      }
      return t1;
    }
    static method MakeGarbageQueue(t: HashMap) returns (q: LruImpl.LruImplQueue)
      requires t.Inv()
      requires |t.I().contents| <= 4294967296
      ensures q.Inv()
      ensures fresh(q.Repr)
      ensures q.Queue == IndirectionTableModel.makeGarbageQueue(t.I())
      decreases t
    {
      IndirectionTableModel.reveal_makeGarbageQueue();
      q := new LruImpl.LruImplQueue();
      var it: Iterator<IndirectionTableModel.Entry> := t.IterStart();
      while it.next.Next?
        invariant q.Inv()
        invariant fresh(q.Repr)
        invariant MutableMapModel.Inv(t.I())
        invariant MutableMapModel.WFIter(t.I(), it)
        invariant IndirectionTableModel.makeGarbageQueue(t.I()) == IndirectionTableModel.makeGarbageQueueIterate(t.I(), q.Queue, it)
        invariant LruModel.I(q.Queue) <= t.I().contents.Keys
        invariant |t.I().contents| <= 4294967296
        decreases it.decreaser
      {
        if it.next.value.predCount == 0 {
          LruModel.LruUse(q.Queue, it.next.key);
          SetInclusionImpliesSmallerCardinality(LruModel.I(q.Queue), t.I().contents.Keys);
          assert |t.I().contents.Keys| == |t.I().contents|;
          q.Use(it.next.key);
        }
        it := t.IterInc(it);
      }
    }
    static method ComputeRefUpperBound(t: HashMap) returns (r: uint64)
      requires t.Inv()
      ensures r == IndirectionTableModel.computeRefUpperBound(t.I())
      decreases t
    {
      var it: Iterator<IndirectionTableModel.Entry> := t.IterStart();
      var refUpperBound: uint64 := 0;
      while it.next.Next?
        invariant MutableMapModel.Inv(t.I())
        invariant MutableMapModel.WFIter(t.I(), it)
        invariant forall ref: uint64 {:trigger ref in it.s} | ref in it.s :: ref <= refUpperBound
        invariant IndirectionTableModel.computeRefUpperBoundIterate(t.I(), it, refUpperBound) == IndirectionTableModel.computeRefUpperBound(t.I())
        decreases it.decreaser
      {
        if it.next.key > refUpperBound {
          refUpperBound := it.next.key;
        }
        it := t.IterInc(it);
      }
      r := refUpperBound;
    }
    static method ValToIndirectionTable(v: V) returns (s: IndirectionTable?)
      requires IndirectionTableModel.valToIndirectionTable.requires(v)
      ensures s != null ==> s.Inv()
      ensures s != null ==> fresh(s.Repr)
      ensures s == null ==> IndirectionTableModel.valToIndirectionTable(v).None?
      ensures s != null ==> IndirectionTableModel.valToIndirectionTable(v) == Some(s.I())
      decreases v
    {
      if |v.a| as uint64 <= IndirectionTableModel.MaxSizeUint64() {
        var res: Option<HashMap> := ValToHashMap(v.a);
        match res {
          case Some(t) =>
            {
              var rootRef := t.Get(BT.G.Root());
              if rootRef.Some? {
                var t1 := ComputeRefCounts(t);
                if t1 != null {
                  IndirectionTableModel.lemmaMakeGarbageQueueCorrect(t1.I());
                  IndirectionTableModel.lemma_count_eq_graph_size(t.I());
                  IndirectionTableModel.lemma_count_eq_graph_size(t1.I());
                  var q := MakeGarbageQueue(t1);
                  s := new IndirectionTable(t1);
                  s.garbageQueue := q;
                  s.refUpperBound := ComputeRefUpperBound(t1);
                  s.findLoclessIterator := None;
                  s.Repr := {s} + s.t.Repr + s.garbageQueue.Repr;
                } else {
                  s := null;
                }
              } else {
                s := null;
              }
            }
          case None =>
            {
              s := null;
            }
        }
      } else {
        s := null;
      }
    }
    function MaxIndirectionTableByteSize(): int
    {
      8 + IndirectionTableModel.MaxSize() * (8 + 8 + 8 + 8 + MaxNumChildren() * 8)
    }
    lemma lemma_SeqSum_prefix_array(a: array<V>, i: int)
      requires 0 < i <= a.Length
      ensures SeqSum(a[..i - 1]) + SizeOfV(a[i - 1]) == SeqSum(a[..i])
      decreases a, i
    {
      lemma_SeqSum_prefix(a[..i - 1], a[i - 1]);
      assert a[..i - 1] + [a[i - 1]] == a[..i];
    }
    lemma {:fuel SizeOfV, 5} lemma_tuple_size(a: uint64, b: uint64, c: uint64, succs: seq<BT.G.Reference>)
      requires |succs| <= MaxNumChildren()
      ensures SizeOfV(VTuple([VUint64(a), VUint64(b), VUint64(c), VUint64Array(succs)])) == 8 + 8 + 8 + 8 + |succs| * 8
      decreases a, b, c, succs
    {
    }
    lemma lemma_SeqSum_empty()
      ensures SeqSum([]) == 0
    {
      reveal_SeqSum();
    }
    method indirectionTableToVal() returns (v: V, size: uint64)
      requires Inv()
      requires BC.WFCompleteIndirectionTable(IndirectionTableModel.I(I()))
      ensures ValInGrammar(v, IndirectionTableModel.IndirectionTableGrammar())
      ensures ValidVal(v)
      ensures IndirectionTableModel.valToIndirectionTable(v).Some?
      ensures IndirectionTableModel.I(IndirectionTableModel.valToIndirectionTable(v).value) == IndirectionTableModel.I(I())
      ensures SizeOfV(v) <= MaxIndirectionTableByteSize()
      ensures SizeOfV(v) == size as int
    {
      assert t.Count <= IndirectionTableModel.MaxSizeUint64();
      lemma_SeqSum_empty();
      var a: array<V> := new V[t.Count as uint64];
      var it: Iterator<IndirectionTableModel.Entry> := t.IterStart();
      var i: uint64 := 0;
      size := 0;
      ghost var partial: map<uint64, Entry> := map[];
      while it.next.Next?
        invariant Inv()
        invariant BC.WFCompleteIndirectionTable(IndirectionTableModel.I(I()))
        invariant 0 <= i as int <= a.Length
        invariant MutableMapModel.WFIter(t.I(), it)
        invariant forall j: uint64 {:trigger a[j]} | 0 <= j < i :: ValidVal(a[j])
        invariant forall j: uint64 {:trigger a[j]} | 0 <= j < i :: ValInGrammar(a[j], GTuple([GUint64, GUint64, GUint64, GUint64Array]))
        invariant IndirectionTableModel.valToHashMap(a[..i]).Some?
        invariant IndirectionTableModel.valToHashMap(a[..i]).value.contents == partial
        invariant |partial.Keys| == i as nat
        invariant partial.Keys == it.s
        invariant partial.Keys <= t.I().contents.Keys
        invariant forall r: uint64 {:trigger t.I().contents[r]} {:trigger partial[r]} {:trigger r in t.I().contents} {:trigger r in partial} | r in partial :: r in t.I().contents && partial[r].loc == t.I().contents[r].loc && partial[r].succs == t.I().contents[r].succs
        invariant t.I().contents == old(t.I().contents)
        invariant size as int <= |it.s| * (8 + 8 + 8 + 8 + MaxNumChildren() * 8)
        invariant SeqSum(a[..i]) == size as int
        decreases it.decreaser
      {
        var (ref: uint64, locOptGraph: IndirectionTableModel.Entry) := (it.next.key, it.next.value);
        assert ref in I().locs;
        var locOpt: Option<Location> := locOptGraph.loc;
        var succs: seq<BT.G.Reference> := locOptGraph.succs;
        var loc: Location := locOpt.value;
        var childrenVal: V := VUint64Array(succs);
        assert |succs| <= MaxNumChildren();
        assert ValidNodeLocation(loc);
        MutableMapModel.LemmaIterIndexLtCount(t.I(), it);
        assert |succs| < 18446744073709551616;
        assert ValidVal(VTuple([VUint64(ref), VUint64(loc.addr), VUint64(loc.len), childrenVal]));
        assert |MutableMapModel.IterInc(t.I(), it).s| == |it.s| + 1;
        var vi: V := VTuple([VUint64(ref), VUint64(loc.addr), VUint64(loc.len), childrenVal]);
        partial := partial[ref := IndirectionTableModel.Entry(locOpt, succs, 0)];
        a[i] := vi;
        i := i + 1;
        it := t.IterInc(it);
        assert a[..i - 1] == DropLast(a[..i]);
        calc == {
          SeqSum(a[..i]);
        ==
          {
            lemma_SeqSum_prefix_array(a, i as int);
          }
          SeqSum(a[..i - 1]) + SizeOfV(a[i - 1]);
        ==
          SeqSum(a[..i - 1]) + SizeOfV(vi);
        ==
          {
            lemma_tuple_size(ref, loc.addr, loc.len, succs);
          }
          size as int + 8 + 8 + 8 + 8 + 8 * |succs|;
        }
        size := size + 32 + 8 * |succs| as uint64;
      }
      SetInclusionAndEqualCardinalityImpliesSetEquality(partial.Keys, t.I().contents.Keys);
      assert a[..i] == a[..];
      v := VArray(a[..]);
      assert |it.s| <= IndirectionTableModel.MaxSize();
      size := size + 8;
    }
    static method BitmapInitUpToIterate(bm: BitmapImpl.Bitmap, i: uint64, upTo: uint64)
      requires bm.Inv()
      requires 0 <= i as int <= upTo as int <= BitmapModel.Len(bm.I())
      modifies bm.Repr
      ensures bm.Inv()
      ensures bm.I() == IndirectionTableModel.BitmapInitUpToIterate(old(bm.I()), i, upTo)
      ensures bm.Repr == old(bm.Repr)
      decreases upTo - i
    {
      if i == upTo {
      } else {
        bm.Set(i);
        BitmapInitUpToIterate(bm, i + 1, upTo);
      }
    }
    static method BitmapInitUpTo(bm: BitmapImpl.Bitmap, upTo: uint64)
      requires bm.Inv()
      requires upTo as int <= BitmapModel.Len(bm.I())
      modifies bm.Repr
      ensures bm.Inv()
      ensures bm.I() == IndirectionTableModel.BitmapInitUpTo(old(bm.I()), upTo)
      ensures bm.Repr == old(bm.Repr)
      decreases bm, upTo
    {
      IndirectionTableModel.reveal_BitmapInitUpTo();
      BitmapInitUpToIterate(bm, 0, upTo);
    }
    method InitLocBitmap() returns (success: bool, bm: BitmapImpl.Bitmap)
      requires Inv()
      requires BC.WFCompleteIndirectionTable(IndirectionTableModel.I(I()))
      ensures bm.Inv()
      ensures (success, bm.I()) == IndirectionTableModel.InitLocBitmap(old(I()))
      ensures fresh(bm.Repr)
    {
      IndirectionTableModel.reveal_InitLocBitmap();
      bm := new BitmapImpl.Bitmap(NumBlocksUint64());
      BitmapInitUpTo(bm, MinNodeBlockIndexUint64());
      var it: Iterator<IndirectionTableModel.Entry> := t.IterStart();
      while it.next.Next?
        invariant t.Inv()
        invariant BC.WFCompleteIndirectionTable(IndirectionTableModel.I(I()))
        invariant bm.Inv()
        invariant MutableMapModel.WFIter(t.I(), it)
        invariant BitmapModel.Len(bm.I()) == NumBlocks()
        invariant IndirectionTableModel.InitLocBitmapIterate(I(), it, bm.I()) == IndirectionTableModel.InitLocBitmap(I())
        invariant fresh(bm.Repr)
        decreases it.decreaser
      {
        assert it.next.key in IndirectionTableModel.I(I()).locs;
        var loc: uint64 := it.next.value.loc.value.addr;
        var locIndex: uint64 := loc / NodeBlockSizeUint64();
        if locIndex < NumBlocksUint64() {
          var isSet: bool := bm.GetIsSet(locIndex);
          if !isSet {
            it := t.IterInc(it);
            bm.Set(locIndex);
          } else {
            success := false;
            return;
          }
        } else {
          success := false;
          return;
        }
      }
      success := true;
    }
    method FindDeallocable() returns (ref: Option<BT.G.Reference>)
      requires Inv()
      requires IndirectionTableModel.TrackingGarbage(I())
      ensures ref == IndirectionTableModel.FindDeallocable(I())
    {
      IndirectionTableModel.reveal_FindDeallocable();
      ref := garbageQueue.NextOpt();
    }
    method GetSize() returns (size: uint64)
      requires Inv()
      ensures size as int == |I().graph|
    {
      IndirectionTableModel.lemma_count_eq_graph_size(I().t);
      return this.t.Count;
    }
    method FindRefWithNoLoc() returns (ref: Option<BT.G.Reference>)
      requires Inv()
      modifies Repr
      ensures Inv()
      ensures Repr == old(Repr)
      ensures (I(), ref) == IndirectionTableModel.FindRefWithNoLoc(old(I()))
    {
      IndirectionTableModel.reveal_FindRefWithNoLoc();
      var it: MutableMapModel.SimpleIterator;
      if this.findLoclessIterator.Some? {
        it := this.findLoclessIterator.value;
      } else {
        it := this.t.SimpleIterStart();
      }
      while true
        invariant Inv()
        invariant MutableMapModel.WFSimpleIter(this.t.I(), it)
        invariant forall r: uint64 {:trigger r in I().locs} {:trigger r in it.s} | r in it.s :: r in I().locs
        invariant IndirectionTableModel.FindRefWithNoLoc(old(I())) == IndirectionTableModel.FindRefWithNoLocIterate(I(), it)
        invariant Repr == old(Repr)
        decreases it.decreaser
      {
        var next: IteratorOutput<IndirectionTableModel.Entry> := this.t.SimpleIterOutput(it);
        if next.Next? {
          if next.value.loc.None? {
            this.findLoclessIterator := Some(it);
            return Some(next.key);
          } else {
            it := this.t.SimpleIterInc(it);
          }
        } else {
          this.findLoclessIterator := Some(it);
          return None;
        }
      }
    }
    method GetRefUpperBound() returns (r: uint64)
      requires Inv()
      ensures r == IndirectionTableModel.getRefUpperBound(this.I())
    {
      IndirectionTableModel.reveal_getRefUpperBound();
      return this.refUpperBound;
    }
  }
}