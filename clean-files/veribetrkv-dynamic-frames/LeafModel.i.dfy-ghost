// LeafModel.i.dfy
module LeafModel {
  function {:opaque} {:fuel 0, 0} repivotLeaf(k: Constants, s: BCVariables, ref: BT.G.Reference, node: Node): (s': BCVariables)
    requires BCInv(k, s)
    requires s.Ready?
    requires ref in s.ephemeralIndirectionTable.graph
    requires ref in s.cache
    requires node == s.cache[ref]
    requires node.children.None?
    requires |node.buckets| == 1
    requires |s.ephemeralIndirectionTable.graph| <= IndirectionTableModel.MaxSize() - 1
    decreases k, s, ref, node
  {
    if s.frozenIndirectionTable.Some? && IndirectionTableModel.HasEmptyLoc(s.frozenIndirectionTable.value, ref) then
      s
    else
      var pivot: Key := getMiddleKey(node.buckets[0]); var pivots: seq<Key> := [pivot]; var buckets': seq<Bucket> := [SplitBucketLeft(node.buckets[0], pivot), SplitBucketRight(node.buckets[0], pivot)]; var newnode: Node := Node(pivots, None, buckets'); var s1: BCVariables := writeBookkeeping(k, s, ref, None); var s': BCVariables := s1.(cache := s1.cache[ref := newnode]); s'
  }
  lemma repivotLeafCorrect(k: Constants, s: BCVariables, ref: BT.G.Reference, node: Node)
    requires BCInv(k, s)
    requires s.Ready?
    requires ref in s.ephemeralIndirectionTable.graph
    requires ref in s.cache
    requires node == s.cache[ref]
    requires node.children.None?
    requires |node.buckets| == 1
    requires |s.ephemeralIndirectionTable.graph| <= IndirectionTableModel.MaxSize() - 1
    ensures var s': BCVariables := repivotLeaf(k, s, ref, node); WFBCVars(s') && betree_next(k, IBlockCache(s), IBlockCache(s'))
    decreases k, s, ref, node
  {
    reveal_SplitBucketLeft();
    reveal_SplitBucketRight();
    ghost var s': BCVariables := repivotLeaf(k, s, ref, node);
    reveal_repivotLeaf();
    if s.frozenIndirectionTable.Some? && IndirectionTableModel.HasEmptyLoc(s.frozenIndirectionTable.value, ref) {
      assert s' == s;
      assert WFBCVars(s');
      assert noop(k, IBlockCache(s), IBlockCache(s));
      return;
    }
    ghost var pivot: Key := getMiddleKey(node.buckets[0]);
    ghost var pivots: seq<Key> := [pivot];
    WFPivotsOfGetMiddleKey(node.buckets[0]);
    ghost var buckets': seq<Bucket> := [SplitBucketLeft(node.buckets[0], pivot), SplitBucketRight(node.buckets[0], pivot)];
    ghost var newnode: Node := Node(pivots, None, buckets');
    ghost var s1: BCVariables := writeWithNode(k, s, ref, newnode);
    reveal_writeBookkeeping();
    assert s1 == s';
    WeightBucketLeBucketList(node.buckets, 0);
    WeightSplitBucketAdditiveLe(node.buckets[0], pivot);
    WeightBucketList2(SplitBucketLeft(node.buckets[0], pivot), SplitBucketRight(node.buckets[0], pivot));
    assert WFNode(newnode);
    writeCorrect(k, s, ref, newnode);
    assert WFBCVars(s');
    assert JoinBucketList(node.buckets).b == MapUnion(JoinBucketList([]).b, node.buckets[0].b) == MapUnion(map[], node.buckets[0].b) == node.buckets[0].b;
    assert SplitBucketOnPivots(JoinBucketList(node.buckets), pivots) == SplitBucketOnPivots(node.buckets[0], pivots) == buckets';
    assert PivotBetreeSpec.ApplyRepivot(INode(node), [pivot]) == INode(newnode);
    assert BT.ValidRepivot(BT.Repivot(ref, INode(node), pivots));
    ghost var step: BetreeStep := BT.BetreeRepivot(BT.Repivot(ref, INode(node), pivots));
    assert BT.ValidBetreeStep(step);
    assert |BT.BetreeStepOps(step)| == 1;
    assert BC.Dirty(Ik(k).bc, IBlockCache(s), IBlockCache(s'), ref, INode(newnode));
    assert BC.OpStep(Ik(k).bc, IBlockCache(s), IBlockCache(s'), BT.BetreeStepOps(step)[0]);
    BC.MakeTransaction1(Ik(k).bc, IBlockCache(s), IBlockCache(s'), BT.BetreeStepOps(step));
    assert stepsBetree(k, IBlockCache(s), IBlockCache(s'), AdvanceOp(UI.NoOp, true), step);
  }
}