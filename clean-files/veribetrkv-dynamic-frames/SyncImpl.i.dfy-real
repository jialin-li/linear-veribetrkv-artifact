// SyncImpl.i.dfy
module SyncImpl {
  method AssignRefToLocEphemeral(k: ImplConstants, s: ImplVariables, ref: BT.G.Reference, loc: Location)
    modifies s.Repr()
  {
    var table: MutIndirectionTable := s.ephemeralIndirectionTable;
    var added: bool := table.AddLocIfPresent(ref, loc);
    if added {
      s.blockAllocator.MarkUsedEphemeral(loc.addr / NodeBlockSizeUint64());
    }
  }
  method AssignRefToLocFrozen(k: ImplConstants, s: ImplVariables, ref: BT.G.Reference, loc: Location)
    modifies s.Repr()
  {
    if s.frozenIndirectionTable != null {
      var table: MutIndirectionTableNullable := s.frozenIndirectionTable;
      var added: bool := table.AddLocIfPresent(ref, loc);
      if added {
        s.blockAllocator.MarkUsedFrozen(loc.addr / NodeBlockSizeUint64());
      }
    }
  }
  method AssignIdRefLocOutstanding(k: ImplConstants, s: ImplVariables, id: D.ReqId, ref: BT.G.Reference, loc: Location)
    modifies s.Repr()
  {
    if id in s.outstandingBlockWrites && s.outstandingBlockWrites[id].loc.addr / NodeBlockSizeUint64() < NumBlocksUint64() {
      s.blockAllocator.MarkFreeOutstanding(s.outstandingBlockWrites[id].loc.addr / NodeBlockSizeUint64());
    }
    s.outstandingBlockWrites := s.outstandingBlockWrites[id := BC.OutstandingWrite(ref, loc)];
    s.blockAllocator.MarkUsedOutstanding(loc.addr / NodeBlockSizeUint64());
  }
  method {:fuel BC.GraphClosed, 0} {:fuel BC.CacheConsistentWithSuccessors, 0} maybeFreeze(k: ImplConstants, s: ImplVariables, io: DiskIOHandler)
      returns (froze: bool)
    modifies io, s.Repr()
  {
    var foundDeallocable: Option<Reference> := FindDeallocable(s);
    if foundDeallocable.Some? {
      Dealloc(k, s, io, foundDeallocable.value);
      return false;
    }
    var clonedEphemeralIndirectionTable: IndirectionTable := s.ephemeralIndirectionTable.Clone();
    s.frozenIndirectionTable := clonedEphemeralIndirectionTable;
    s.blockAllocator.CopyEphemeralToFrozen();
    return true;
  }
  method TryToWriteBlock(k: ImplConstants, s: ImplVariables, io: DiskIOHandler, ref: BT.G.Reference)
    modifies s.Repr(), io
  {
    var nodeOpt: Option<Node> := s.cache.GetOpt(ref);
    var node: Node := nodeOpt.value;
    var id: Option<D.ReqId>, loc: Option<Location> := FindLocationAndRequestWrite(io, s, SectorNode(node));
    if id.Some? {
      AssignRefToLocEphemeral(k, s, ref, loc.value);
      AssignRefToLocFrozen(k, s, ref, loc.value);
      AssignIdRefLocOutstanding(k, s, id.value, ref, loc.value);
    } else {
      print "sync: giving up; write req failed\n";
    }
  }
  method {:fuel BC.GraphClosed, 0} syncFoundInFrozen(k: ImplConstants, s: ImplVariables, io: DiskIOHandler, ref: Reference)
    modifies io, s.Repr()
  {
    var ephemeralRef: Option<IndirectionTableModel.Entry> := s.ephemeralIndirectionTable.GetEntry(ref);
    if ephemeralRef.Some? && ephemeralRef.value.loc.Some? {
      print "sync: giving up; ref already in ephemeralIndirectionTable.locs but not frozen";
      return;
    }
    TryToWriteBlock(k, s, io, ref);
  }
  method {:fuel BC.GraphClosed, 0} sync(k: ImplConstants, s: ImplVariables, io: DiskIOHandler)
      returns (froze: bool, wait: bool)
    modifies io, s.Repr()
  {
    wait := false;
    froze := false;
    if s.frozenIndirectionTableLoc.Some? {
      wait := true;
      return;
    }
    if s.frozenIndirectionTable == null {
      froze := maybeFreeze(k, s, io);
      return;
    }
    var foundInFrozen: Option<BT.G.Reference> := s.frozenIndirectionTable.FindRefWithNoLoc();
    if foundInFrozen.Some? {
      syncFoundInFrozen(k, s, io, foundInFrozen.value);
      return;
    } else if s.outstandingBlockWrites != map[] {
      wait := true;
      return;
    } else {
      var id: Option<D.ReqId>, loc: Option<Location> := FindIndirectionTableLocationAndRequestWrite(io, s, SectorIndirectionTable(s.frozenIndirectionTable));
      if id.Some? {
        s.outstandingIndirectionTableWrite := id;
        s.frozenIndirectionTableLoc := loc;
        return;
      } else {
        print "sync: giving up; write back indirection table failed (no id)\n";
        return;
      }
    }
  }
}