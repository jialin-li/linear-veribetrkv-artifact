// EvictImpl.i.dfy
module EvictImpl {
  method Evict(k: ImplConstants, s: ImplVariables, ref: BT.G.Reference)
    requires s.WF()
    requires s.ready
    requires ref in s.cache.I()
    modifies s.Repr()
    ensures WellUpdated(s)
    ensures s.ready
    ensures s.I() == EvictModel.Evict(Ic(k), old(s.I()), ref)
    decreases k, s, ref
  {
    s.lru.Remove(ref);
    s.cache.Remove(ref);
    assert s.I().cache == EvictModel.Evict(Ic(k), old(s.I()), ref).cache;
  }
  method NeedToWrite(s: ImplVariables, ref: BT.G.Reference) returns (b: bool)
    requires s.WF()
    requires s.ready
    ensures b == EvictModel.NeedToWrite(s.I(), ref)
    decreases s, ref
  {
    var eph: Option<IndirectionTableModel.Entry> := s.ephemeralIndirectionTable.GetEntry(ref);
    if eph.Some? && eph.value.loc.None? {
      return true;
    }
    if s.frozenIndirectionTable != null {
      var fro: Option<IndirectionTableModel.Entry> := s.frozenIndirectionTable.GetEntry(ref);
      if fro.Some? && fro.value.loc.None? {
        return true;
      }
    }
    return false;
  }
  method CanEvict(s: ImplVariables, ref: BT.G.Reference) returns (b: bool)
    requires s.WF()
    requires s.ready
    requires ref in s.ephemeralIndirectionTable.I().graph ==> ref in s.ephemeralIndirectionTable.I().locs
    ensures b == EvictModel.CanEvict(s.I(), ref)
    decreases s, ref
  {
    var eph: Option<IndirectionTableModel.Entry> := s.ephemeralIndirectionTable.GetEntry(ref);
    if eph.Some? {
      return BC.OutstandingWrite(ref, eph.value.loc.value) !in s.outstandingBlockWrites.Values;
    } else {
      return true;
    }
  }
  method EvictOrDealloc(k: ImplConstants, s: ImplVariables, io: DiskIOHandler)
    requires Inv(k, s)
    requires s.ready
    requires io.initialized()
    requires |s.cache.I()| > 0
    requires io !in s.Repr()
    modifies io, s.Repr()
    ensures WellUpdated(s)
    ensures s.ready
    ensures EvictModel.EvictOrDealloc(Ic(k), old(s.I()), old(IIO(io)), s.I(), IIO(io))
    decreases k, s, io
  {
    var ref: Option<Reference> := FindDeallocable(s);
    DeallocModel.FindDeallocableCorrect(s.I());
    if ref.Some? {
      Dealloc(k, s, io, ref.value);
    } else {
      var refOpt: Option<uint64> := s.lru.NextOpt();
      if refOpt.None? {
      } else {
        var ref: uint64 := refOpt.value;
        var needToWrite: bool := NeedToWrite(s, ref);
        if needToWrite {
          if s.outstandingIndirectionTableWrite.None? {
            TryToWriteBlock(k, s, io, ref);
          } else {
          }
        } else {
          var canEvict: bool := CanEvict(s, ref);
          if canEvict {
            Evict(k, s, ref);
          } else {
          }
        }
      }
    }
  }
  method PageInNodeReqOrMakeRoom(k: ImplConstants, s: ImplVariables, io: DiskIOHandler, ref: BT.G.Reference)
    requires Inv(k, s)
    requires s.ready
    requires io.initialized()
    requires io !in s.Repr()
    requires ref in s.ephemeralIndirectionTable.I().graph
    requires ref !in s.cache.I()
    modifies io, s.Repr()
    ensures WellUpdated(s)
    ensures s.ready
    ensures EvictModel.PageInNodeReqOrMakeRoom(Ic(k), old(s.I()), old(IIO(io)), ref, s.I(), IIO(io))
    decreases k, s, io, ref
  {
    EvictModel.reveal_PageInNodeReqOrMakeRoom();
    if TotalCacheSize(s) <= MaxCacheSizeUint64() - 1 {
      PageInNodeReq(k, s, io, ref);
    } else {
      var c: uint64 := s.cache.Count();
      if c > 0 {
        EvictOrDealloc(k, s, io);
      }
    }
  }
}