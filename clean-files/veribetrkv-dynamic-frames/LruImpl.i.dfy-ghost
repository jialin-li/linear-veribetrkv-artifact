// LruImpl.i.dfy
module LruImpl {
  class Node {
    var prev: Node?
    var next: Node?
    var value: uint64
    constructor (p: Node?, n: Node?, v: uint64)
      ensures prev == p
      ensures next == n
      ensures value == v
      decreases p, n, v
    {
      prev := p;
      next := n;
      value := v;
    }
  }
  class LruImplQueue {
    ghost var Queue: LruQueue
    ghost var Repr: set<object>
    var nodemap: MutableMap.ResizingHashMap<Node>
    var head_node: Node?
    var tail_node: Node?
    protected predicate Inv()
      reads this, Repr
      ensures Inv() ==> this in Repr
      ensures Inv() ==> WF(Queue)
      decreases Repr + {this}
    {
      nodemap in Repr &&
      nodemap.Repr <= Repr &&
      nodemap.Inv() &&
      Repr == {this} + nodemap.Repr + nodemap.I().contents.Values &&
      this !in nodemap.Repr &&
      nodemap.I().contents.Values !! nodemap.Repr &&
      (|Queue| == 0 ==>
        head_node == null &&
        tail_node == null &&
        nodemap.I().contents == map[]) &&
      (forall i: int {:trigger Queue[i]} | 0 <= i < |Queue| :: 
        Queue[i] in nodemap.I().contents) &&
      (forall ref: uint64 {:trigger ref in Queue} {:trigger ref in nodemap.I().contents} | ref in nodemap.I().contents :: 
        ref in Queue) &&
      (forall ref: uint64 {:trigger nodemap.I().contents[ref]} {:trigger ref in nodemap.I().contents} | ref in nodemap.I().contents :: 
        nodemap.I().contents[ref].value == ref) &&
      (|Queue| > 0 ==>
        head_node == nodemap.I().contents[Queue[0]] &&
        tail_node == nodemap.I().contents[Queue[|Queue| - 1]] &&
        nodemap.I().contents[Queue[0]].prev == null &&
        nodemap.I().contents[Queue[|Queue| - 1]].next == null) &&
      (forall i: int, _t#0: int {:trigger Queue[_t#0], Queue[i]} | _t#0 == i + 1 :: 
        0 <= i &&
        i < |Queue| - 1 ==>
          nodemap.I().contents[Queue[i]].next == nodemap.I().contents[Queue[_t#0]]) &&
      (forall i: int, _t#0: int {:trigger Queue[_t#0], Queue[i]} | _t#0 == i + 1 :: 
        0 <= i &&
        i < |Queue| - 1 ==>
          nodemap.I().contents[Queue[i]] == nodemap.I().contents[Queue[_t#0]].prev) &&
      nodemap.Repr !! nodemap.I().contents.Values &&
      WF(Queue)
    }
    constructor ()
      ensures Inv()
      ensures Queue == Empty()
      ensures fresh(Repr)
    {
      var m: MutableMap.ResizingHashMap<Node> := new MutableMap.ResizingHashMap<Node>(128);
      nodemap := m;
      head_node := null;
      tail_node := null;
      Queue := [];
      Repr := {this} + m.Repr + m.Contents.Values;
    }
    method Remove(x: uint64)
      requires Inv()
      modifies this, this.Repr
      ensures Inv()
      ensures Queue == LruModel.Remove(old(Queue), x)
      ensures Repr <= old(Repr)
      decreases x
    {
      ghost var oldContents: map<uint64, Node> := nodemap.I().contents;
      ghost var oldQueue: seq<uint64> := Queue;
      var node: Option<Node> := nodemap.RemoveAndGet(x);
      if node.Some? {
        var prev: Node? := node.value.prev;
        var next: Node? := node.value.next;
        ghost var j: int := lemmaGetRemoveQueueIndex(Queue, x);
        if j > 0 {
          assert oldContents[x].prev == oldContents[Queue[j - 1]];
        }
        if j < |Queue| - 1 {
          assert oldContents[x].next == oldContents[Queue[j + 1]];
        }
        if prev == null {
          head_node := next;
        } else {
          prev.next := next;
        }
        if next == null {
          tail_node := prev;
        } else {
          next.prev := prev;
        }
        Repr := {this} + nodemap.Repr + nodemap.I().contents.Values;
        Queue := LruModel.Remove(Queue, x);
        forall k: int {:trigger Queue[k]} | 0 <= k < |Queue|
          ensures Queue[k] in nodemap.I().contents
        {
          reveal_distinct();
          if k < j {
            assert oldQueue[k] == Queue[k];
            assert oldQueue[k] in oldContents;
            assert oldQueue[k] != x;
            assert oldQueue[k] in nodemap.I().contents;
          } else {
            assert oldQueue[k + 1] == Queue[k];
            assert oldQueue[k + 1] in oldContents;
            assert oldQueue[k + 1] != x;
            assert oldQueue[k + 1] in nodemap.I().contents;
          }
        }
        forall ref: uint64 {:trigger ref in Queue} {:trigger ref in nodemap.I().contents} | ref in nodemap.I().contents
          ensures ref in Queue
        {
          assert ref in oldContents;
          ghost var k: int :| 0 <= k < |oldQueue| && oldQueue[k] == ref;
          assert k != j;
          if k < j {
            assert Queue[k] == ref;
          } else {
          }
        }
        forall k: int, _t#0: int {:trigger Queue[_t#0], Queue[k]} | _t#0 == k + 1
          ensures 0 <= k && k < |Queue| - 1 ==> nodemap.I().contents[Queue[k]] == nodemap.I().contents[Queue[_t#0]].prev
        {
          if k < j - 1 {
            assert nodemap.I().contents[Queue[k]] == nodemap.I().contents[Queue[k + 1]].prev;
          } else if k == j - 1 {
            assert nodemap.I().contents[Queue[k]] == nodemap.I().contents[Queue[k + 1]].prev;
          } else {
            assert nodemap.I().contents[Queue[k]] == nodemap.I().contents[Queue[k + 1]].prev;
          }
        }
        forall i: int, _t#0: int {:trigger Queue[_t#0], Queue[i]} | _t#0 == i + 1
          ensures 0 <= i && i < |Queue| - 1 ==> nodemap.I().contents[Queue[i]].next == nodemap.I().contents[Queue[_t#0]]
        {
          if i < j - 1 {
            assert nodemap.I().contents[Queue[i]].next == nodemap.I().contents[Queue[i + 1]];
          } else if i == j - 1 {
            assert nodemap.I().contents[Queue[i]].next == nodemap.I().contents[Queue[i + 1]];
          } else {
            assert nodemap.I().contents[Queue[i]].next == nodemap.I().contents[Queue[i + 1]];
          }
        }
      } else {
        assert nodemap.I().contents == oldContents;
        lemmaRemoveNonPresentKeyFromQueue(Queue, x);
        forall k: int, _t#0: int {:trigger Queue[_t#0], Queue[k]} | _t#0 == k + 1
          ensures 0 <= k && k < |Queue| - 1 ==> nodemap.I().contents[Queue[k]] == nodemap.I().contents[Queue[_t#0]].prev
        {
        }
        forall i: int, _t#0: int {:trigger Queue[_t#0], Queue[i]} | _t#0 == i + 1
          ensures 0 <= i && i < |Queue| - 1 ==> nodemap.I().contents[Queue[i]].next == nodemap.I().contents[Queue[_t#0]]
        {
        }
      }
      LruRemove(oldQueue, x);
    }
    lemma  LemmaMapCountEqInterpCount()
      requires Inv()
      ensures |I(Queue)| == nodemap.Count as int
    {
      assert I(Queue) == nodemap.I().contents.Keys;
      assert |I(Queue)| == |nodemap.I().contents.Keys| == |nodemap.I().contents| == nodemap.Count as int;
    }
    method Use(x: uint64)
      requires Inv()
      requires |I(Queue)| <= 4294967296
      modifies this, this.Repr
      ensures Inv()
      ensures Queue == LruModel.Use(old(Queue), x)
      ensures forall x: object {:trigger x in old(Repr)} {:trigger x in Repr} | x in Repr :: x in old(Repr) || fresh(x)
      decreases x
    {
      ghost var oldContents: map<uint64, Node> := nodemap.I().contents;
      ghost var oldQueue: seq<uint64> := Queue;
      LemmaMapCountEqInterpCount();
      var node: Option<Node> := nodemap.Get(x);
      if node.Some? {
        var prev: Node? := node.value.prev;
        var next: Node? := node.value.next;
        ghost var j: int := lemmaGetRemoveQueueIndex(Queue, x);
        if j > 0 {
          assert oldContents[x].prev == oldContents[Queue[j - 1]];
        }
        if j < |Queue| - 1 {
          assert oldContents[x].next == oldContents[Queue[j + 1]];
        }
        if next != null {
          if prev == null {
            head_node := next;
          } else {
            prev.next := next;
          }
          next.prev := prev;
          node.value.prev := tail_node;
          node.value.next := null;
          if tail_node != null {
            tail_node.next := node.value;
          } else {
            head_node := node.value;
          }
          tail_node := node.value;
          Repr := {this} + nodemap.Repr + nodemap.I().contents.Values;
          Queue := LruModel.Remove(Queue, x) + [x];
          forall i: int, _t#0: int {:trigger Queue[_t#0], Queue[i]} | _t#0 == i + 1
            ensures 0 <= i && i < |Queue| - 1 ==> nodemap.I().contents[Queue[i]].next == nodemap.I().contents[Queue[_t#0]]
          {
            if i == |Queue| - 2 {
              assert nodemap.I().contents[Queue[i]].next == nodemap.I().contents[Queue[i + 1]];
            } else if i == j - 1 {
              assert nodemap.I().contents[Queue[i]].next == nodemap.I().contents[Queue[i + 1]];
            } else if i < j - 1 {
              assert nodemap.I().contents[Queue[i]].next == nodemap.I().contents[Queue[i + 1]];
            } else {
              assert nodemap.I().contents[Queue[i]].next == old(nodemap.I()).contents[old(Queue)[i + 1]].next == old(nodemap.I()).contents[old(Queue)[i + 2]] == nodemap.I().contents[Queue[i + 1]];
            }
          }
          forall k: int, _t#0: int {:trigger Queue[_t#0], Queue[k]} | _t#0 == k + 1
            ensures 0 <= k && k < |Queue| - 1 ==> nodemap.I().contents[Queue[k]] == nodemap.I().contents[Queue[_t#0]].prev
          {
            if k < j - 1 {
              assert nodemap.I().contents[Queue[k]] == nodemap.I().contents[Queue[k + 1]].prev;
            } else if k == j - 1 {
              assert nodemap.I().contents[Queue[k]] == nodemap.I().contents[Queue[k + 1]].prev;
            } else {
              assert nodemap.I().contents[Queue[k]] == nodemap.I().contents[Queue[k + 1]].prev;
            }
          }
        } else {
          Repr := {this} + nodemap.Repr + nodemap.I().contents.Values;
          Queue := LruModel.Remove(Queue, x) + [x];
        }
      } else {
        lemmaRemoveNonPresentKeyFromQueue(Queue, x);
        var newnode: Node := new Node(tail_node, null, x);
        assert newnode.next == null;
        if tail_node != null {
          tail_node.next := newnode;
        } else {
          head_node := newnode;
        }
        tail_node := newnode;
        nodemap.Insert(x, newnode);
        Repr := {this} + nodemap.Repr + nodemap.I().contents.Values;
        Queue := oldQueue + [x];
        assert Queue[|Queue| - 1] == x;
        assert nodemap.I().contents[x] == newnode;
        assert newnode.next == null;
        assert nodemap.I().contents[Queue[|Queue| - 1]].next == null;
        forall ref: uint64 {:trigger nodemap.I().contents[ref]} {:trigger ref in nodemap.I().contents} | ref in nodemap.I().contents
          ensures nodemap.I().contents[ref].value == ref
        {
        }
        forall i: int {:trigger Queue[i]} | 0 <= i < |Queue|
          ensures Queue[i] in nodemap.I().contents
        {
          if i == |Queue| - 1 {
          } else {
          }
        }
      }
      LruUse(oldQueue, x);
    }
    method Next() returns (x: uint64)
      requires |I(Queue)| > 0
      requires Inv()
      ensures x == LruModel.Next(Queue)
    {
      LemmaQueueCountEqInterpCount(Queue);
      assert head_node != null;
      x := head_node.value;
    }
    method NextOpt() returns (x: Option<uint64>)
      requires Inv()
      ensures x == LruModel.NextOpt(Queue)
    {
      LruModel.reveal_NextOpt();
      LemmaQueueCountEqInterpCount(Queue);
      if head_node != null {
        x := Some(head_node.value);
      } else {
        x := None;
      }
    }
    method Count() returns (count: uint64)
      requires false
    {
      if this == null {
        count := 0;
        return;
      }
      var ptr: Node? := head_node;
      count := 0;
      while ptr != null
      {
        count := count + 1;
        ptr := ptr.next;
      }
    }
    method DebugAccumulate() returns (acc: DebugAccumulator.DebugAccumulator)
      requires false
    {
      var nodeCount: uint64 := Count();
      var r: DebugAccumulator.AccRec := new DebugAccumulator.AccRec(nodeCount, "Node");
      acc := DebugAccumulator.AccPut(acc, "t", r);
    }
  }
  lemma  lemmaRemoveNonPresentKeyFromQueue(q: LruQueue, x: uint64)
    requires x !in q
    requires WF(q)
    ensures LruModel.Remove(q, x) == q
    decreases q, x
  {
    if |q| == 0 {
    } else {
      lemmaRemoveNonPresentKeyFromQueue(q[..|q| - 1], x);
    }
  }
  lemma LemmaQueueCountEqInterpCount(q: LruQueue)
    requires WF(q)
    ensures |I(q)| == |q|
    decreases q
  {
    reveal_distinct();
    if |q| == 0 {
    } else {
      LemmaQueueCountEqInterpCount(q[..|q| - 1]);
      assert I(q) == I(q[..|q| - 1]) + {q[|q| - 1]};
      assert |I(q)| == |I(q[..|q| - 1]) + {q[|q| - 1]}| == |I(q[..|q| - 1])| + |{q[|q| - 1]}| == |q[..|q| - 1]| + 1 == |q|;
    }
  }
  lemma lemmaGetRemoveQueueIndex(q: LruQueue, x: uint64) returns (j: int)
    requires x in q
    requires WF(q)
    ensures 0 <= j < |q|
    ensures q[j] == x
    ensures LruModel.Remove(q, x) == q[..j] + q[j + 1..]
    decreases q, x
  {
    assert |q| > 0;
    if q[|q| - 1] == x {
      j := |q| - 1;
      reveal_distinct();
      lemmaRemoveNonPresentKeyFromQueue(q[..|q| - 1], x);
    } else {
      j := lemmaGetRemoveQueueIndex(q[..|q| - 1], x);
    }
  }
}