// CommitterAppendImpl.i.dfy
module CommitterAppendImpl {
  method JournalAppend(k: ImplConstants, cm: Committer, key: Key, value: Value)
    requires cm.Inv()
    requires cm.status == CommitterModel.StatusReady
    requires JournalistModel.canAppend(cm.journalist.I(), JournalInsert(key, value))
    modifies cm.Repr
    ensures cm.Inv()
    ensures forall o: object {:trigger o in old(cm.Repr)} {:trigger o in cm.Repr} | o in cm.Repr :: o in old(cm.Repr) || fresh(o)
    ensures cm.I() == CommitterAppendModel.JournalAppend(Ic(k), old(cm.I()), key, value)
    decreases k, cm, key, value
  {
    CommitterAppendModel.reveal_JournalAppend();
    cm.reveal_ReprInv();
    var je: JournalEntry := JournalInsert(key, value);
    cm.journalist.append(je);
    cm.Repr := {cm} + cm.syncReqs.Repr + cm.journalist.Repr;
    cm.reveal_ReprInv();
  }
}