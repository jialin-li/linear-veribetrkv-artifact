// StateModel.i.dfy
module StateModel {
  type Reference = BT.G.Reference
  type DiskOp = BJD.DiskOp
  type IndirectionTable = IndirectionTableModel.IndirectionTable
  datatype Node = Node(pivotTable: Pivots.PivotTable, children: Option<seq<Reference>>, buckets: seq<Bucket>)
  datatype BCVariables = Ready(persistentIndirectionTable: IndirectionTable, frozenIndirectionTable: Option<IndirectionTable>, ephemeralIndirectionTable: IndirectionTable, persistentIndirectionTableLoc: DiskLayout.Location, frozenIndirectionTableLoc: Option<DiskLayout.Location>, outstandingIndirectionTableWrite: Option<BC.ReqId>, outstandingBlockWrites: map<BC.ReqId, BC.OutstandingWrite>, outstandingBlockReads: map<BC.ReqId, BC.OutstandingRead>, cache: map<Reference, Node>, lru: LruModel.LruQueue, blockAllocator: BlockAllocatorModel.BlockAllocatorModel) | LoadingIndirectionTable(indirectionTableLoc: DiskLayout.Location, indirectionTableRead: Option<BC.ReqId>) | Unready
  datatype Variables = Variables(bc: BCVariables, jc: CommitterModel.CM)
  datatype Sector = SectorNode(node: Node) | SectorIndirectionTable(indirectionTable: IndirectionTable) | SectorSuperblock(superblock: SectorType.Superblock)
}