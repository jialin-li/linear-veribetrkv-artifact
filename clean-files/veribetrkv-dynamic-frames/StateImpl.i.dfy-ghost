// StateImpl.i.dfy
module StateImpl {
  type ImplVariables = Variables
  type Reference = BT.G.Reference
  type MutIndirectionTable = IndirectionTableImpl.IndirectionTable
  type MutIndirectionTableNullable = IndirectionTableImpl.IndirectionTable?
  datatype Sector = SectorNode(node: Node) | SectorSuperblock(superblock: SectorType.Superblock) | SectorIndirectionTable(indirectionTable: MutIndirectionTable)
  class Variables {
    var loading: bool
    var ready: bool
    var persistentIndirectionTable: MutIndirectionTable
    var frozenIndirectionTable: MutIndirectionTableNullable
    var ephemeralIndirectionTable: MutIndirectionTable
    var persistentIndirectionTableLoc: DiskLayout.Location
    var frozenIndirectionTableLoc: Option<DiskLayout.Location>
    var outstandingIndirectionTableWrite: Option<BC.ReqId>
    var outstandingBlockWrites: map<D.ReqId, BC.OutstandingWrite>
    var outstandingBlockReads: map<D.ReqId, BC.OutstandingRead>
    var cache: MutCache
    var lru: LruImpl.LruImplQueue
    var blockAllocator: BlockAllocatorImpl.BlockAllocator
    var indirectionTableLoc: DiskLayout.Location
    var indirectionTableRead: Option<BC.ReqId>
    method DebugAccumulate() returns (acc: DebugAccumulator.DebugAccumulator)
      requires false
    {
      acc := DebugAccumulator.EmptyAccumulator();
      var i: seq<AccRec> := DebugAccumulator.EmptyAccumulator();
      if persistentIndirectionTable != null {
        i := persistentIndirectionTable.DebugAccumulate();
      }
      var a: AccRec := new DebugAccumulator.AccRec.Index(i);
      acc := DebugAccumulator.AccPut(acc, "persistentIndirectionTable", a);
      i := DebugAccumulator.EmptyAccumulator();
      if frozenIndirectionTable != null {
        i := frozenIndirectionTable.DebugAccumulate();
      }
      a := new DebugAccumulator.AccRec.Index(i);
      acc := DebugAccumulator.AccPut(acc, "frozenIndirectionTable", a);
      i := DebugAccumulator.EmptyAccumulator();
      if ephemeralIndirectionTable != null {
        i := ephemeralIndirectionTable.DebugAccumulate();
      }
      a := new DebugAccumulator.AccRec.Index(i);
      acc := DebugAccumulator.AccPut(acc, "ephemeralIndirectionTable", a);
      i := cache.DebugAccumulate();
      a := new DebugAccumulator.AccRec.Index(i);
      acc := DebugAccumulator.AccPut(acc, "cache", a);
      i := lru.DebugAccumulate();
      a := new DebugAccumulator.AccRec.Index(i);
      acc := DebugAccumulator.AccPut(acc, "lru", a);
      i := blockAllocator.DebugAccumulate();
      a := new DebugAccumulator.AccRec.Index(i);
      acc := DebugAccumulator.AccPut(acc, "blockAllocator", a);
    }
    function Repr(): set<object>
      reads this, persistentIndirectionTable, ephemeralIndirectionTable, frozenIndirectionTable, lru, cache, blockAllocator
      decreases {this, persistentIndirectionTable, ephemeralIndirectionTable, frozenIndirectionTable, lru, cache, blockAllocator}
    {
      {this} + persistentIndirectionTable.Repr + ephemeralIndirectionTable.Repr + (if frozenIndirectionTable != null then frozenIndirectionTable.Repr else {}) + lru.Repr + cache.Repr + blockAllocator.Repr
    }
    predicate ReprInv()
      reads this, persistentIndirectionTable, ephemeralIndirectionTable, frozenIndirectionTable, lru, cache, blockAllocator, Repr()
      decreases Repr() + {this, persistentIndirectionTable, ephemeralIndirectionTable, frozenIndirectionTable, lru, cache, blockAllocator}
    {
      persistentIndirectionTable.Repr !! ephemeralIndirectionTable.Repr !! lru.Repr !! cache.Repr !! blockAllocator.Repr &&
      (frozenIndirectionTable != null ==>
        frozenIndirectionTable.Repr !! persistentIndirectionTable.Repr &&
        frozenIndirectionTable.Repr !! ephemeralIndirectionTable.Repr &&
        frozenIndirectionTable.Repr !! lru.Repr &&
        frozenIndirectionTable.Repr !! cache.Repr &&
        frozenIndirectionTable.Repr !! blockAllocator.Repr) &&
      this !in ephemeralIndirectionTable.Repr &&
      this !in persistentIndirectionTable.Repr &&
      (frozenIndirectionTable != null ==>
        this !in frozenIndirectionTable.Repr) &&
      this !in lru.Repr &&
      this !in cache.Repr &&
      this !in blockAllocator.Repr
    }
    predicate W()
      reads this, persistentIndirectionTable, ephemeralIndirectionTable, frozenIndirectionTable, lru, cache, blockAllocator, Repr()
      decreases Repr() + {this, persistentIndirectionTable, ephemeralIndirectionTable, frozenIndirectionTable, lru, cache, blockAllocator}
    {
      ReprInv() &&
      persistentIndirectionTable.Inv() &&
      (frozenIndirectionTable != null ==>
        frozenIndirectionTable.Inv()) &&
      ephemeralIndirectionTable.Inv() &&
      lru.Inv() &&
      cache.Inv() &&
      blockAllocator.Inv()
    }
    function I(): SM.BCVariables
      requires W()
      reads this, persistentIndirectionTable, ephemeralIndirectionTable, frozenIndirectionTable, lru, cache, blockAllocator, Repr()
      decreases Repr() + {this, persistentIndirectionTable, ephemeralIndirectionTable, frozenIndirectionTable, lru, cache, blockAllocator}
    {
      if ready then
        SM.Ready(IIndirectionTable(persistentIndirectionTable), IIndirectionTableOpt(frozenIndirectionTable), IIndirectionTable(ephemeralIndirectionTable), persistentIndirectionTableLoc, frozenIndirectionTableLoc, outstandingIndirectionTableWrite, outstandingBlockWrites, outstandingBlockReads, cache.I(), lru.Queue, blockAllocator.I())
      else if loading then
        SM.LoadingIndirectionTable(indirectionTableLoc, indirectionTableRead)
      else
        SM.Unready
    }
    predicate WF()
      reads this, persistentIndirectionTable, ephemeralIndirectionTable, frozenIndirectionTable, lru, cache, blockAllocator, Repr()
      decreases Repr() + {this, persistentIndirectionTable, ephemeralIndirectionTable, frozenIndirectionTable, lru, cache, blockAllocator}
    {
      W() &&
      SM.WFBCVars(I())
    }
    constructor ()
      ensures !ready
      ensures !loading
      ensures WF()
      ensures fresh(Repr())
    {
      ready := false;
      loading := false;
      lru := new LruImpl.LruImplQueue();
      ephemeralIndirectionTable := new IndirectionTableImpl.IndirectionTable.Empty();
      persistentIndirectionTable := new IndirectionTableImpl.IndirectionTable.Empty();
      frozenIndirectionTable := null;
      cache := new MutCache();
      var bm: BitmapImpl.Bitmap := new BitmapImpl.Bitmap(NumBlocksUint64());
      blockAllocator := new BlockAllocatorImpl.BlockAllocator(bm);
    }
  }
  function SectorObjectSet(sector: Sector): set<object>
    decreases sector
  {
    match sector {
      case SectorIndirectionTable(indirectionTable) =>
        {indirectionTable}
      case SectorNode(block) =>
        {block}
      case SectorSuperblock(superblock) =>
        {}
    }
  }
  function SectorRepr(sector: Sector): set<object>
    reads SectorObjectSet(sector)
    decreases SectorObjectSet(sector), sector
  {
    match sector {
      case SectorIndirectionTable(indirectionTable) =>
        {indirectionTable} + indirectionTable.Repr
      case SectorNode(block) =>
        block.Repr
      case SectorSuperblock(superblock) =>
        {}
    }
  }
  predicate WFSector(sector: Sector)
    reads SectorObjectSet(sector), SectorRepr(sector)
    decreases SectorObjectSet(sector) + SectorRepr(sector), sector
  {
    (sector.SectorIndirectionTable? ==>
      sector.indirectionTable.Inv()) &&
    (sector.SectorNode? ==>
      sector.node.Inv()) &&
    (sector.SectorSuperblock? ==>
      JC.WFSuperblock(sector.superblock))
  }
  function IIndirectionTable(table: MutIndirectionTable): (result: IndirectionTableModel.IndirectionTable)
    requires table.Inv()
    reads table, table.Repr
    decreases table.Repr + {table}, table
  {
    table.I()
  }
  function IIndirectionTableOpt(table: MutIndirectionTableNullable): (result: Option<SM.IndirectionTable>)
    requires table != null ==> table.Inv()
    reads if table != null then {table} + table.Repr else {}
    decreases if table != null then {table} + table.Repr else {}, table
  {
    if table != null then
      Some(IIndirectionTable(table))
    else
      None
  }
  function ISector(sector: Sector): SM.Sector
    requires WFSector(sector)
    reads SectorObjectSet(sector), SectorRepr(sector)
    decreases SectorObjectSet(sector) + SectorRepr(sector), sector
  {
    match sector {
      case SectorSuperblock(superblock) =>
        SM.SectorSuperblock(superblock)
      case SectorNode(node) =>
        SM.SectorNode(node.I())
      case SectorIndirectionTable(indirectionTable) =>
        SM.SectorIndirectionTable(IIndirectionTable(indirectionTable))
    }
  }
  predicate Inv(k: ImplConstants, s: Variables)
    reads s, s.persistentIndirectionTable, s.ephemeralIndirectionTable, s.frozenIndirectionTable, s.lru, s.cache, s.blockAllocator, s.Repr()
    decreases s.Repr() + {s, s.persistentIndirectionTable, s.ephemeralIndirectionTable, s.frozenIndirectionTable, s.lru, s.cache, s.blockAllocator}, k, s
  {
    s.W() &&
    SM.BCInv(Ic(k), s.I())
  }
  twostate predicate WellUpdated(s: Variables)
    reads s, s.persistentIndirectionTable, s.ephemeralIndirectionTable, s.frozenIndirectionTable, s.lru, s.cache, s.blockAllocator, s.Repr()
    decreases s.Repr() + {s, s.persistentIndirectionTable, s.ephemeralIndirectionTable, s.frozenIndirectionTable, s.lru, s.cache, s.blockAllocator}, s
  {
    s.W() &&
    forall o: object {:trigger o in old(s.Repr())} {:trigger o in s.Repr()} | o in s.Repr() :: 
      o in old(s.Repr()) || fresh(o)
  }
  function method TotalCacheSize(s: ImplVariables): (res: uint64)
    requires s.cache.Inv()
    requires |s.cache.I()| + |s.outstandingBlockReads| < 18446744073709551616
    reads s, s.cache, s.cache.Repr
    decreases s.cache.Repr + {s, s.cache}, s
  {
    s.cache.Count() + |s.outstandingBlockReads| as uint64
  }
}