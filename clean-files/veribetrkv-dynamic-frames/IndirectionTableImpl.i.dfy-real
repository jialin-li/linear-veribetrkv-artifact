// IndirectionTableImpl.i.dfy
module IndirectionTableImpl {
  type HashMap = MutableMap.ResizingHashMap<IndirectionTableModel.Entry>
  class IndirectionTable {
    var t: HashMap
    var garbageQueue: LruImpl.LruImplQueue?
    var refUpperBound: uint64
    var findLoclessIterator: Option<MutableMapModel.SimpleIterator>
    ghost var Repr: set<object>
    method DebugAccumulate() returns (acc: DebugAccumulator.DebugAccumulator)
    {
      acc := DebugAccumulator.EmptyAccumulator();
      var a: DebugAccumulator.AccRec := new DebugAccumulator.AccRec(t.Count, "IndirectionTableModel.Entry");
      acc := DebugAccumulator.AccPut(acc, "t", a);
      var r: DebugAccumulator.DebugAccumulator := garbageQueue.DebugAccumulate();
      a := new DebugAccumulator.AccRec.Index(r);
      acc := DebugAccumulator.AccPut(acc, "garbageQueue", a);
    }
    constructor Empty()
    {
      this.t := new MutableMap.ResizingHashMap<IndirectionTableModel.Entry>(128);
      this.findLoclessIterator := None;
      new;
      this.t.Insert(BT.G.Root(), IndirectionTableModel.Entry(None, [], 1));
      this.garbageQueue := null;
    }
    constructor RootOnly(loc: Location)
    {
      this.t := new MutableMap.ResizingHashMap<IndirectionTableModel.Entry>(128);
      this.findLoclessIterator := None;
      new;
      this.t.Insert(BT.G.Root(), IndirectionTableModel.Entry(Some(loc), [], 1));
      this.garbageQueue := null;
      this.refUpperBound := BT.G.Root();
    }
    constructor (t: HashMap)
    {
      this.t := t;
      this.garbageQueue := null;
    }
    method Clone() returns (table: IndirectionTable)
    {
      var t0: ResizingHashMap<IndirectionTableModel.Entry> := this.t.Clone();
      table := new IndirectionTable(t0);
      table.refUpperBound := this.refUpperBound;
      table.findLoclessIterator := None;
    }
    method GetEntry(ref: BT.G.Reference) returns (e: Option<IndirectionTableModel.Entry>)
    {
      e := this.t.Get(ref);
    }
    method HasEmptyLoc(ref: BT.G.Reference) returns (b: bool)
    {
      var entry: Option<IndirectionTableModel.Entry> := this.t.Get(ref);
      b := entry.Some? && entry.value.loc.None?;
    }
    method RemoveLoc(ref: BT.G.Reference) returns (oldLoc: Option<Location>)
      modifies Repr
    {
      var it: SimpleIterator := t.FindSimpleIter(ref);
      var oldEntry: IteratorOutput<IndirectionTableModel.Entry> := t.SimpleIterOutput(it);
      var predCount: uint64 := oldEntry.value.predCount;
      var succs: seq<BT.G.Reference> := oldEntry.value.succs;
      t.UpdateByIter(it, IndirectionTableModel.Entry(None, succs, predCount));
      this.findLoclessIterator := None;
      oldLoc := oldEntry.value.loc;
    }
    method AddLocIfPresent(ref: BT.G.Reference, loc: Location) returns (added: bool)
      modifies Repr
    {
      var it: SimpleIterator := this.t.FindSimpleIter(ref);
      var oldEntry: IteratorOutput<IndirectionTableModel.Entry> := this.t.SimpleIterOutput(it);
      added := oldEntry.Next? && oldEntry.value.loc.None?;
      if added {
        this.t.UpdateByIter(it, IndirectionTableModel.Entry(Some(loc), oldEntry.value.succs, oldEntry.value.predCount));
      }
    }
    method RemoveRef(ref: BT.G.Reference) returns (oldLoc: Option<Location>)
      modifies Repr
    {
      var oldEntry: Option<IndirectionTableModel.Entry> := this.t.RemoveAndGet(ref);
      this.garbageQueue.Remove(ref);
      UpdatePredCounts(this.t, this.garbageQueue, ref, [], oldEntry.value.succs);
      oldLoc := if oldEntry.Some? then oldEntry.value.loc else None;
      this.findLoclessIterator := None;
    }
    static method PredInc(t: HashMap, q: LruImpl.LruImplQueue, ref: BT.G.Reference)
      modifies t.Repr, q.Repr
    {
      var oldEntryOpt: Option<IndirectionTableModel.Entry> := t.Get(ref);
      var oldEntry: IndirectionTableModel.Entry := oldEntryOpt.value;
      var newEntry: IndirectionTableModel.Entry := oldEntry.(predCount := oldEntry.predCount + 1);
      t.Insert(ref, newEntry);
      if oldEntry.predCount == 0 {
        q.Remove(ref);
      }
    }
    static method PredDec(t: HashMap, q: LruImpl.LruImplQueue, ref: BT.G.Reference)
      modifies t.Repr, q.Repr
    {
      var oldEntryOpt: Option<IndirectionTableModel.Entry> := t.Get(ref);
      var oldEntry: IndirectionTableModel.Entry := oldEntryOpt.value;
      var newEntry: IndirectionTableModel.Entry := oldEntry.(predCount := oldEntry.predCount - 1);
      t.Insert(ref, newEntry);
      if oldEntry.predCount == 1 {
        q.Use(ref);
      }
    }
    static method UpdatePredCounts(t: HashMap, q: LruImpl.LruImplQueue, ghost changingRef: BT.G.Reference, newSuccs: seq<BT.G.Reference>, oldSuccs: seq<BT.G.Reference>)
      modifies t.Repr, q.Repr
    {
      var idx: uint64 := 0;
      while idx < |newSuccs| as uint64
      {
        PredInc(t, q, newSuccs[idx]);
        idx := idx + 1;
      }
      var idx2: uint64 := 0;
      while idx2 < |oldSuccs| as uint64
      {
        PredDec(t, q, oldSuccs[idx2]);
        idx2 := idx2 + 1;
      }
    }
    method UpdateAndRemoveLoc(ref: BT.G.Reference, succs: seq<BT.G.Reference>) returns (oldLoc: Option<Location>)
      modifies Repr
    {
      var oldEntry: Option<IndirectionTableModel.Entry> := this.t.Get(ref);
      var predCount: uint64 := if oldEntry.Some? then oldEntry.value.predCount else 0;
      if oldEntry.None? {
        this.garbageQueue.Use(ref);
      }
      this.t.Insert(ref, IndirectionTableModel.Entry(None, succs, predCount));
      UpdatePredCounts(this.t, this.garbageQueue, ref, succs, if oldEntry.Some? then oldEntry.value.succs else []);
      if ref > this.refUpperBound {
        this.refUpperBound := ref;
      }
      oldLoc := if oldEntry.Some? && oldEntry.value.loc.Some? then oldEntry.value.loc else None;
      this.findLoclessIterator := None;
    }
    static method {:fuel ValInGrammar, 3} ValToHashMap(a: seq<V>) returns (s: Option<HashMap>)
    {
      var i: uint64 := 0;
      var mutMap: MutableMap.ResizingHashMap<IndirectionTableModel.Entry> := new MutableMap.ResizingHashMap<IndirectionTableModel.Entry>(1024);
      while i < |a| as uint64
      {
        var tuple: V := a[i];
        var ref: uint64 := tuple.t[0 as uint64].u;
        var addr: uint64 := tuple.t[1 as uint64].u;
        var len: uint64 := tuple.t[2 as uint64].u;
        var succs: seq<uint64> := tuple.t[3 as uint64].ua;
        var graphRef: Option<IndirectionTableModel.Entry> := mutMap.Get(ref);
        var loc: Location := Location(addr, len);
        if graphRef.Some? || !ValidNodeLocation(loc) || |succs| as uint64 > MaxNumChildrenUint64() {
          return None;
        } else {
          mutMap.Insert(ref, IndirectionTableModel.Entry(Some(loc), succs, 0));
          i := i + 1;
        }
      }
      return Some(mutMap);
    }
    static method ComputeRefCounts(t: HashMap) returns (t': MutableMap.ResizingHashMap?<IndirectionTableModel.Entry>)
    {
      var copy: HashMap := t;
      var t1: ResizingHashMap<IndirectionTableModel.Entry> := t.Clone();
      var oldEntryOpt: Option<IndirectionTableModel.Entry> := t1.Get(BT.G.Root());
      var oldEntry: IndirectionTableModel.Entry := oldEntryOpt.value;
      t1.Insert(BT.G.Root(), oldEntry.(predCount := 1));
      var it: Iterator<Entry> := copy.IterStart();
      while it.next.Next?
      {
        var succs: seq<BT.G.Reference> := it.next.value.succs;
        var i: uint64 := 0;
        while i < |succs| as uint64
        {
          var ref: NativeTypes.uint64 := succs[i];
          var oldEntry: Option<IndirectionTableModel.Entry> := t1.Get(ref);
          if oldEntry.Some? {
            var newEntry: IndirectionTableModel.Entry := oldEntry.value.(predCount := oldEntry.value.predCount + 1);
            t1.Insert(ref, newEntry);
            i := i + 1;
          } else {
            return null;
          }
        }
        it := copy.IterInc(it);
      }
      return t1;
    }
    static method MakeGarbageQueue(t: HashMap) returns (q: LruImpl.LruImplQueue)
    {
      q := new LruImpl.LruImplQueue();
      var it: Iterator<IndirectionTableModel.Entry> := t.IterStart();
      while it.next.Next?
      {
        if it.next.value.predCount == 0 {
          q.Use(it.next.key);
        }
        it := t.IterInc(it);
      }
    }
    static method ComputeRefUpperBound(t: HashMap) returns (r: uint64)
    {
      var it: Iterator<IndirectionTableModel.Entry> := t.IterStart();
      var refUpperBound: uint64 := 0;
      while it.next.Next?
      {
        if it.next.key > refUpperBound {
          refUpperBound := it.next.key;
        }
        it := t.IterInc(it);
      }
      r := refUpperBound;
    }
    static method ValToIndirectionTable(v: V) returns (s: IndirectionTable?)
    {
      if |v.a| as uint64 <= IndirectionTableModel.MaxSizeUint64() {
        var res: Option<HashMap> := ValToHashMap(v.a);
        match res {
          case Some(t) =>
            {
              var rootRef := t.Get(BT.G.Root());
              if rootRef.Some? {
                var t1 := ComputeRefCounts(t);
                if t1 != null {
                  IndirectionTableModel.lemmaMakeGarbageQueueCorrect(t1.I());
                  IndirectionTableModel.lemma_count_eq_graph_size(t.I());
                  IndirectionTableModel.lemma_count_eq_graph_size(t1.I());
                  var q := MakeGarbageQueue(t1);
                  s := new IndirectionTable(t1);
                  s.garbageQueue := q;
                  s.refUpperBound := ComputeRefUpperBound(t1);
                  s.findLoclessIterator := None;
                  s.Repr := {s} + s.t.Repr + s.garbageQueue.Repr;
                } else {
                  s := null;
                }
              } else {
                s := null;
              }
            }
          case None =>
            {
              s := null;
            }
        }
      } else {
        s := null;
      }
    }
    method indirectionTableToVal() returns (v: V, size: uint64)
    {
      var a: array<V> := new V[t.Count as uint64];
      var it: Iterator<IndirectionTableModel.Entry> := t.IterStart();
      var i: uint64 := 0;
      size := 0;
      while it.next.Next?
      {
        var (ref: uint64, locOptGraph: IndirectionTableModel.Entry) := (it.next.key, it.next.value);
        var locOpt: Option<Location> := locOptGraph.loc;
        var succs: seq<BT.G.Reference> := locOptGraph.succs;
        var loc: Location := locOpt.value;
        var childrenVal: V := VUint64Array(succs);
        var vi: V := VTuple([VUint64(ref), VUint64(loc.addr), VUint64(loc.len), childrenVal]);
        a[i] := vi;
        i := i + 1;
        it := t.IterInc(it);
        size := size + 32 + 8 * |succs| as uint64;
      }
      v := VArray(a[..]);
      size := size + 8;
    }
    static method BitmapInitUpToIterate(bm: BitmapImpl.Bitmap, i: uint64, upTo: uint64)
      modifies bm.Repr
    {
      if i == upTo  else {
        bm.Set(i);
        BitmapInitUpToIterate(bm, i + 1, upTo);
      }
    }
    static method BitmapInitUpTo(bm: BitmapImpl.Bitmap, upTo: uint64)
      modifies bm.Repr
    {
      BitmapInitUpToIterate(bm, 0, upTo);
    }
    method InitLocBitmap() returns (success: bool, bm: BitmapImpl.Bitmap)
    {
      bm := new BitmapImpl.Bitmap(NumBlocksUint64());
      BitmapInitUpTo(bm, MinNodeBlockIndexUint64());
      var it: Iterator<IndirectionTableModel.Entry> := t.IterStart();
      while it.next.Next?
      {
        var loc: uint64 := it.next.value.loc.value.addr;
        var locIndex: uint64 := loc / NodeBlockSizeUint64();
        if locIndex < NumBlocksUint64() {
          var isSet: bool := bm.GetIsSet(locIndex);
          if !isSet {
            it := t.IterInc(it);
            bm.Set(locIndex);
          } else {
            success := false;
            return;
          }
        } else {
          success := false;
          return;
        }
      }
      success := true;
    }
    method FindDeallocable() returns (ref: Option<BT.G.Reference>)
    {
      ref := garbageQueue.NextOpt();
    }
    method GetSize() returns (size: uint64)
    {
      return this.t.Count;
    }
    method FindRefWithNoLoc() returns (ref: Option<BT.G.Reference>)
      modifies Repr
    {
      var it: MutableMapModel.SimpleIterator;
      if this.findLoclessIterator.Some? {
        it := this.findLoclessIterator.value;
      } else {
        it := this.t.SimpleIterStart();
      }
      while true
      {
        var next: IteratorOutput<IndirectionTableModel.Entry> := this.t.SimpleIterOutput(it);
        if next.Next? {
          if next.value.loc.None? {
            this.findLoclessIterator := Some(it);
            return Some(next.key);
          } else {
            it := this.t.SimpleIterInc(it);
          }
        } else {
          this.findLoclessIterator := Some(it);
          return None;
        }
      }
    }
    method GetRefUpperBound() returns (r: uint64)
    {
      return this.refUpperBound;
    }
  }
}