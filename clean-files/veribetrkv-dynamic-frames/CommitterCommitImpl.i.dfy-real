// CommitterCommitImpl.i.dfy
module CommitterCommitImpl {
  method SyncReqs2to1(m: MutableMap.ResizingHashMap<JC.SyncReqStatus>) returns (m': MutableMap.ResizingHashMap<JC.SyncReqStatus>)
  {
    var it: Iterator<JC.SyncReqStatus> := m.IterStart();
    var m0: MutableMap.ResizingHashMap<JC.SyncReqStatus> := new MutableMap.ResizingHashMap<JC.SyncReqStatus>(128);
    while !it.next.Done?
    {
      m0.Insert(it.next.key, if it.next.value == JC.State2 then JC.State1 else it.next.value);
      it := m.IterInc(it);
    }
    m' := m0;
  }
  method SyncReqs3to2(m: MutableMap.ResizingHashMap<JC.SyncReqStatus>) returns (m': MutableMap.ResizingHashMap<JC.SyncReqStatus>)
  {
    var it: Iterator<JC.SyncReqStatus> := m.IterStart();
    var m0: MutableMap.ResizingHashMap<JC.SyncReqStatus> := new MutableMap.ResizingHashMap<JC.SyncReqStatus>(128);
    while !it.next.Done?
    {
      m0.Insert(it.next.key, if it.next.value == JC.State3 then JC.State2 else it.next.value);
      it := m.IterInc(it);
    }
    m' := m0;
  }
  method WriteOutJournal(k: ImplConstants, cm: Committer, io: DiskIOHandler)
    modifies cm.Repr, io
  {
    var writtenJournalLen: uint64 := cm.journalist.getWrittenJournalLen();
    var doingFrozen: bool := cm.journalist.hasFrozenJournal();
    var j: seq<byte>;
    if doingFrozen {
      j := cm.journalist.packageFrozenJournal();
    } else {
      j := cm.journalist.packageInMemoryJournal();
    }
    var start: uint64 := CommitterCommitModel.start_pos_add(cm.superblock.journalStart, writtenJournalLen);
    var len: uint64 := |j| as uint64 / 4096;
    var contiguous: bool := start + len <= NumJournalBlocks();
    if contiguous {
      var id: D.ReqId := io.write(JournalPoint(start), j);
      cm.outstandingJournalWrites := cm.outstandingJournalWrites + {id};
    } else {
      var cut: uint64 := (NumJournalBlocks() - start) * 4096;
      var id1: D.ReqId, id2: uint64 := io.write2(JournalPoint(start), j[..cut], JournalPoint(0), j[cut..]);
      cm.outstandingJournalWrites := cm.outstandingJournalWrites + {id1, id2};
    }
    if doingFrozen {
      cm.frozenJournalPosition := cm.journalist.getWrittenJournalLen();
    } else {
      cm.syncReqs := SyncReqs3to2(cm.syncReqs);
    }
  }
  method writeOutSuperblockAdvanceLog(k: ImplConstants, cm: Committer, io: DiskIOHandler)
    modifies cm.Repr, io
  {
    var writtenJournalLen: uint64 := cm.journalist.getWrittenJournalLen();
    var newSuperblock: Superblock := SectorType.Superblock(JC.IncrementSuperblockCounter(cm.superblock.counter), cm.superblock.journalStart, writtenJournalLen, cm.superblock.indirectionTableLoc);
    var loc: Location := if cm.whichSuperblock == 0 then Superblock2Location() else Superblock1Location();
    var id: D.ReqId := RequestWrite(io, loc, StateImpl.SectorSuperblock(newSuperblock));
    cm.newSuperblock := Some(newSuperblock);
    cm.superblockWrite := Some(id);
    cm.commitStatus := JC.CommitAdvanceLog;
  }
  method writeOutSuperblockAdvanceLocation(k: ImplConstants, cm: Committer, io: DiskIOHandler)
    modifies cm.Repr, io
  {
    var writtenJournalLen: uint64 := cm.journalist.getWrittenJournalLen();
    var newSuperblock: Superblock := SectorType.Superblock(JC.IncrementSuperblockCounter(cm.superblock.counter), CommitterCommitModel.start_pos_add(cm.superblock.journalStart, cm.frozenJournalPosition), writtenJournalLen - cm.frozenJournalPosition, cm.frozenLoc.value);
    var loc: Location := if cm.whichSuperblock == 0 then Superblock2Location() else Superblock1Location();
    var id: D.ReqId := RequestWrite(io, loc, StateImpl.SectorSuperblock(newSuperblock));
    cm.newSuperblock := Some(newSuperblock);
    cm.superblockWrite := Some(id);
    cm.commitStatus := JC.CommitAdvanceLocation;
  }
  method freeze(k: ImplConstants, cm: Committer)
    modifies cm.Repr
  {
    var writtenJournalLen: uint64 := cm.journalist.getWrittenJournalLen();
    cm.journalist.freeze();
    cm.frozenLoc := None;
    cm.frozenJournalPosition := writtenJournalLen;
    cm.isFrozen := true;
    cm.syncReqs := SyncReqs3to2(cm.syncReqs);
  }
  method receiveFrozenLoc(k: ImplConstants, cm: Committer, loc: Location)
    modifies cm.Repr
  {
    cm.frozenLoc := Some(loc);
  }
  method freeId<A>(syncReqs: MutableMap.ResizingHashMap<A>) returns (id: uint64)
  {
    var maxId: uint64 := syncReqs.MaxKey();
    if maxId == 18446744073709551615 {
      return 0;
    } else {
      return maxId + 1;
    }
  }
  method pushSync(k: ImplConstants, cm: Committer) returns (id: uint64)
    modifies cm.Repr
  {
    id := freeId(cm.syncReqs);
    if id != 0 && cm.syncReqs.Count < 2305843009213693952 {
      cm.syncReqs.Insert(id, JC.State3);
    } else {
      id := 0;
    }
  }
  method popSync(k: ImplConstants, cm: Committer, id: uint64)
    modifies cm.Repr
  {
    cm.syncReqs.Remove(id);
  }
  method tryAdvanceLog(k: ImplConstants, cm: Committer, io: DiskIOHandler)
      returns (wait: bool)
    modifies cm.Repr, io
  {
    wait := false;
    var hasFrozen: bool := cm.journalist.hasFrozenJournal();
    var hasInMem: bool := cm.journalist.hasInMemoryJournal();
    if cm.superblockWrite.None? {
      if hasFrozen || hasInMem {
        WriteOutJournal(k, cm, io);
      } else if cm.outstandingJournalWrites == {} {
        writeOutSuperblockAdvanceLog(k, cm, io);
      } else {
        wait := true;
      }
    } else {
      wait := true;
    }
  }
  method tryAdvanceLocation(k: ImplConstants, cm: Committer, io: DiskIOHandler)
      returns (wait: bool)
    modifies cm.Repr, io
  {
    wait := false;
    var hasFrozen: bool := cm.journalist.hasFrozenJournal();
    var hasInMem: bool := cm.journalist.hasInMemoryJournal();
    if cm.superblockWrite.None? {
      if hasFrozen || hasInMem {
        WriteOutJournal(k, cm, io);
      } else if cm.outstandingJournalWrites == {} {
        writeOutSuperblockAdvanceLocation(k, cm, io);
      } else {
        wait := true;
      }
    } else {
      wait := true;
    }
  }
  method writeBackSuperblockResp(k: ImplConstants, cm: Committer)
    modifies cm.Repr
  {
    if cm.status.StatusReady? && cm.commitStatus.CommitAdvanceLocation? {
      var writtenJournalLen: uint64 := cm.journalist.getWrittenJournalLen();
      cm.superblockWrite := None;
      cm.superblock := cm.newSuperblock.value;
      cm.newSuperblock := None;
      cm.whichSuperblock := if cm.whichSuperblock == 0 then 1 else 0;
      cm.syncReqs := SyncReqs2to1(cm.syncReqs);
      cm.journalist.updateWrittenJournalLen(writtenJournalLen - cm.frozenJournalPosition);
      cm.frozenJournalPosition := 0;
      cm.frozenLoc := None;
      cm.isFrozen := false;
      cm.commitStatus := JC.CommitNone;
    } else if cm.status.StatusReady? && cm.commitStatus.CommitAdvanceLog? {
      cm.superblockWrite := None;
      cm.superblock := cm.newSuperblock.value;
      cm.newSuperblock := None;
      cm.whichSuperblock := if cm.whichSuperblock == 0 then 1 else 0;
      cm.syncReqs := SyncReqs2to1(cm.syncReqs);
      cm.commitStatus := JC.CommitNone;
    } else {
      print "writeBackSuperblockResp: didn't do anything\n";
    }
  }
}