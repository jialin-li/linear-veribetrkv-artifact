// NodeImpl.i.dfy
module NodeImpl {
  class Node {
    var pivotTable: Pivots.PivotTable
    var children: Option<seq<BT.G.Reference>>
    var buckets: seq<BucketImpl.MutBucket>
    ghost var Repr: set<object>
    constructor (pivotTable: Pivots.PivotTable, children: Option<seq<BT.G.Reference>>, buckets: seq<BucketImpl.MutBucket>)
    {
      this.pivotTable := pivotTable;
      this.children := children;
      this.buckets := buckets;
      new;
    }
    method BucketWellMarshalled(slot: uint64) returns (result: bool)
    {
      result := buckets[slot].WellMarshalled();
    }
    method BucketsWellMarshalled() returns (result: bool)
    {
      var i: uint64 := 0;
      while i < |buckets| as uint64
      {
        var bwm: bool := buckets[i].WellMarshalled();
        if !bwm {
          return false;
        }
        i := i + 1;
      }
      return true;
    }
    method UpdateSlot(slot: uint64, bucket: BucketImpl.MutBucket, childref: BT.G.Reference)
      modifies Repr
    {
      buckets := SeqIndexUpdate(buckets, slot, bucket);
      children := Some(SeqIndexUpdate(children.value, slot, childref));
    }
    method SplitParent(slot: uint64, pivot: Key, left_childref: BT.G.Reference, right_childref: BT.G.Reference)
      modifies Repr
    {
      this.pivotTable := Sequences.Insert(this.pivotTable, pivot, slot);
      var bucks: seq<MutBucket> := MutBucket.SplitOneInList(this.buckets, slot, pivot);
      this.buckets := bucks;
      var childrenReplaced: seq<NativeTypes.uint64> := Replace1with2(children.value, left_childref, right_childref, slot);
      this.children := Some(childrenReplaced);
    }
    method CutoffNodeAndKeepLeft(pivot: Key) returns (node': Node)
    {
      var cLeft: uint64 := Pivots.ComputeCutoffForLeft(this.pivotTable, pivot);
      var leftPivots: seq<Key> := this.pivotTable[..cLeft];
      var leftChildren: Option<seq<BT.G.Reference>> := if this.children.Some? then Some(this.children.value[..cLeft + 1]) else None;
      var splitBucket: MutBucket := this.buckets[cLeft].SplitLeft(pivot);
      var slice: seq<MutBucket> := MutBucket.CloneSeq(this.buckets[..cLeft]);
      var leftBuckets: seq<MutBucket> := slice + [splitBucket];
      node' := new Node(leftPivots, leftChildren, leftBuckets);
    }
    method CutoffNodeAndKeepRight(pivot: Key) returns (node': Node)
    {
      var cRight: uint64 := Pivots.ComputeCutoffForRight(this.pivotTable, pivot);
      var rightPivots: seq<Key> := this.pivotTable[cRight..];
      var rightChildren: Option<seq<BT.G.Reference>> := if this.children.Some? then Some(this.children.value[cRight..]) else None;
      var splitBucket: MutBucket := this.buckets[cRight].SplitRight(pivot);
      var slice: seq<MutBucket> := MutBucket.CloneSeq(this.buckets[cRight + 1..]);
      var rightBuckets: seq<MutBucket> := [splitBucket] + slice;
      node' := new Node(rightPivots, rightChildren, rightBuckets);
    }
    static method CutoffNode(node: Node, lbound: Option<Key>, rbound: Option<Key>)
        returns (node': Node)
    {
      match lbound {
        case None =>
          {
            match rbound {
              case None =>
                {
                  node' := node;
                }
              case Some(rbound) =>
                {
                  node' := node.CutoffNodeAndKeepLeft(rbound);
                }
            }
          }
        case Some(lbound) =>
          {
            match rbound {
              case None =>
                {
                  node' := node.CutoffNodeAndKeepRight(lbound);
                }
              case Some(rbound) =>
                {
                  var node1 := node.CutoffNodeAndKeepLeft(rbound);
                  NodeModel.CutoffNodeAndKeepLeftCorrect(node.I(), rbound);
                  node' := node1.CutoffNodeAndKeepRight(lbound);
                }
            }
          }
      }
    }
    method SplitChildLeft(num_children_left: uint64) returns (node': Node)
    {
      var slice: seq<MutBucket> := MutBucket.CloneSeq(this.buckets[..num_children_left]);
      node' := new Node(this.pivotTable[..num_children_left - 1], if this.children.Some? then Some(this.children.value[..num_children_left]) else None, slice);
    }
    method SplitChildRight(num_children_left: uint64) returns (node': Node)
    {
      var slice: seq<MutBucket> := MutBucket.CloneSeq(this.buckets[num_children_left..]);
      node' := new Node(this.pivotTable[num_children_left..], if this.children.Some? then Some(this.children.value[num_children_left..]) else None, slice);
    }
    method InsertKeyValue(key: Key, msg: Message)
      modifies Repr
    {
      var r: uint64 := Pivots.ComputeRoute(pivotTable, key);
      buckets[r].Insert(key, msg);
    }
  }
}