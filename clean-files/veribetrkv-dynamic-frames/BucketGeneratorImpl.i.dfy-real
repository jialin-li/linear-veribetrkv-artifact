// BucketGeneratorImpl.i.dfy
module BucketGeneratorImpl {
  class Generator {
    var bucket: MutBucket?
    var it: Iterator
    var top: Generator?
    var bot: Generator?
    var next: BucketIteratorModel.IteratorOutput
    ghost var Repr: set<object>
    ghost var ReadOnlyRepr: set<object>
    ghost var Height: nat
    constructor ()
    method GenLeft() returns (res: BucketIteratorModel.IteratorOutput)
    {
      if bucket != null {
        res := bucket.GetNext(it);
      } else {
        res := next;
      }
    }
    method GenPop()
      modifies Repr
    {
      if bucket != null {
        it := bucket.IterInc(it);
      } else {
        var top_next: BucketIteratorModel.IteratorOutput := top.GenLeft();
        var bot_next: BucketIteratorModel.IteratorOutput := bot.GenLeft();
        var c: int32;
        if top_next.Next? && bot_next.Next? {
          c := cmp(top_next.key, bot_next.key);
        }
        if top_next.Next? && bot_next.Next? && c == 0 {
          top.GenPop();
          bot.GenPop();
          next := BucketIteratorModel.Next(top_next.key, Merge(top_next.msg, bot_next.msg));
        } else if top_next.Next? && (bot_next.Next? ==> c < 0) {
          top.GenPop();
          next := top_next;
        } else if bot_next.Next? {
          bot.GenPop();
          next := bot_next;
        } else {
          next := BucketIteratorModel.Done;
        }
      }
    }
    static method GenCompose(top: Generator, bot: Generator) returns (g: Generator)
      modifies top.Repr, bot.Repr
    {
      g := new Generator();
      g.bucket := null;
      g.top := top;
      g.bot := bot;
      var top_next: BucketIteratorModel.IteratorOutput := top.GenLeft();
      var bot_next: BucketIteratorModel.IteratorOutput := bot.GenLeft();
      var c: int32;
      if top_next.Next? && bot_next.Next? {
        c := cmp(top_next.key, bot_next.key);
      }
      if top_next.Next? && bot_next.Next? && c == 0 {
        top.GenPop();
        bot.GenPop();
        g.next := BucketIteratorModel.Next(top_next.key, Merge(top_next.msg, bot_next.msg));
      } else if top_next.Next? && (bot_next.Next? ==> c < 0) {
        top.GenPop();
        g.next := top_next;
      } else if bot_next.Next? {
        bot.GenPop();
        g.next := bot_next;
      } else {
        g.next := BucketIteratorModel.Done;
      }
    }
    static method GenFromBucketWithLowerBound(bucket: MutBucket, start: UI.RangeStart) returns (g: Generator)
    {
      g := new Generator();
      g.bucket := bucket;
      match start {
        case SExclusive(key) =>
          {
            g.it := bucket.IterFindFirstGt(key);
          }
        case SInclusive(key) =>
          {
            g.it := bucket.IterFindFirstGte(key);
          }
        case NegativeInf =>
          {
            g.it := bucket.IterStart();
          }
      }
    }
    static method GenFromBucketStackWithLowerBound(buckets: seq<MutBucket>, start: UI.RangeStart) returns (g: Generator)
    {
      if |buckets| as uint64 == 1 {
        g := GenFromBucketWithLowerBound(buckets[0 as uint64], start);
      } else {
        var mid: uint64 := |buckets| as uint64 / 2;
        var g1: Generator := GenFromBucketStackWithLowerBound(buckets[..mid], start);
        var g2: Generator := GenFromBucketStackWithLowerBound(buckets[mid..], start);
        g := GenCompose(g1, g2);
      }
    }
  }
}