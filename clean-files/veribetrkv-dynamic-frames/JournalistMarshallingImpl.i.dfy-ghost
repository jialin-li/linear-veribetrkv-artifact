// JournalistMarshallingImpl.i.dfy
module JournalistMarshallingImpl {
  method Splice(buf: array<byte>, start: uint64, ins: seq<byte>)
    requires |ins| < 18446744073709551616
    requires buf.Length < 18446744073709551616
    requires 0 <= start
    requires start as int + |ins| <= buf.Length
    modifies buf
    ensures buf[..] == JournalistMarshallingModel.splice(old(buf[..]), start, ins)
    decreases buf, start, ins
  {
    JournalistMarshallingModel.reveal_splice();
    NativeArrays.CopySeqIntoArray(ins, 0, buf, start, |ins| as uint64);
  }
  method WriteOnto(buf: array<byte>, numBlocks: uint64, start: uint64, bytes: seq<byte>)
    requires buf.Length == 4096 * numBlocks as int
    requires numBlocks <= NumJournalBlocks()
    requires |bytes| <= 4064
    requires 0 <= start as int <= start as int + |bytes| <= 4064 * numBlocks as int
    modifies buf
    ensures buf[..] == JournalistMarshallingModel.writeOnto(old(buf[..]), numBlocks, start, bytes)
    decreases buf, numBlocks, start, bytes
  {
    JournalistMarshallingModel.reveal_writeOnto();
    if |bytes| as uint64 > 0 {
      var block: uint64 := start / 4064;
      var idx: uint64 := start % 4064;
      if idx + |bytes| as uint64 <= 4064 {
        Splice(buf, block * 4096 + 32 + idx, bytes);
      } else {
        Splice(buf, block * 4096 + 32 + idx, bytes[..4064 - idx]);
        Splice(buf, (block + 1) * 4096 + 32, bytes[4064 - idx..]);
      }
    }
  }
  method WriteIntOnto(buf: array<byte>, numBlocks: uint64, start: uint64, val: uint32)
    requires buf.Length == 4096 * numBlocks as int
    requires numBlocks <= NumJournalBlocks()
    requires 0 <= start
    requires start as int + 4 <= numBlocks as int * 4064
    modifies buf
    ensures buf[..] == JournalistMarshallingModel.writeIntOnto(old(buf[..]), numBlocks, start, val)
    decreases buf, numBlocks, start, val
  {
    JournalistMarshallingModel.reveal_writeIntOnto();
    WriteOnto(buf, numBlocks, start, pack_LittleEndian_Uint32(val));
  }
  method WriteHeader(buf: array<byte>, numBlocks: uint64, len: uint64)
    requires buf.Length == 4096 * numBlocks as int
    requires 1 <= numBlocks <= NumJournalBlocks()
    requires len <= 4294967295
    modifies buf
    ensures buf[..] == JournalistMarshallingModel.writeHeader(old(buf[..]), numBlocks, len)
    decreases buf, numBlocks, len
  {
    WriteIntOnto(buf, numBlocks, 0, len as uint32);
    WriteIntOnto(buf, numBlocks, 4, numBlocks as uint32);
  }
  method WriteJournalEntries(buf: array<byte>, numBlocks: uint64, idx: uint64, entries: array<JournalEntry>, start: uint64, len: uint64)
    requires buf.Length == 4096 * numBlocks as int
    requires numBlocks <= NumJournalBlocks()
    requires 0 <= start as int < entries.Length
    requires 0 <= len as int <= entries.Length
    requires entries.Length < 1152921504606846975
    requires idx as int + SumJournalEntries(JournalistMarshallingModel.cyclicSlice(entries[..], start, len)) <= 4064 * numBlocks as int
    modifies buf
    ensures buf[..] == JournalistMarshallingModel.writeJournalEntries(old(buf[..]), numBlocks, idx, entries[..], start, len)
    decreases len
  {
    JournalistMarshallingModel.reveal_writeJournalEntries();
    if len != 0 {
      var start': uint64 := if start + 1 == entries.Length as uint64 then 0 else start + 1;
      JournalistMarshallingModel.lemma_cyclicRange_popFront_Sum(entries[..], start, len);
      WriteIntOnto(buf, numBlocks, idx, |entries[start].key| as uint32);
      var idx1: uint64 := idx + 4;
      WriteOnto(buf, numBlocks, idx1, entries[start].key);
      var idx2: uint64 := idx1 + |entries[start].key| as uint64;
      WriteIntOnto(buf, numBlocks, idx2, |entries[start].value| as uint32);
      var idx3: uint64 := idx2 + 4;
      WriteOnto(buf, numBlocks, idx3, entries[start].value);
      var idx4: uint64 := idx3 + |entries[start].value| as uint64;
      WriteJournalEntries(buf, numBlocks, idx4, entries, start', len - 1);
    }
  }
  method FillInChecksums(buf: array<byte>, numBlocks: uint64, i: uint64)
    requires buf.Length == numBlocks as int * 4096
    requires numBlocks <= NumJournalBlocks()
    requires 0 <= i <= numBlocks
    modifies buf
    ensures buf[..] == JournalistMarshallingModel.fillInChecksums(old(buf[..]), numBlocks, i)
    decreases numBlocks - i
  {
    JournalistMarshallingModel.reveal_fillInChecksums();
    if i != numBlocks {
      var c: seq<byte> := Crc32CArray(buf, 4096 * i + 32, 4064);
      NativeArrays.CopySeqIntoArray(c, 0, buf, 4096 * i, 32);
      assert buf[..] == JournalistMarshallingModel.splice(old(buf[..]), 4096 * i, c) by {
        JournalistMarshallingModel.reveal_splice();
      }
      FillInChecksums(buf, numBlocks, i + 1);
    }
  }
  method MarshallJournalEntries(entries: array<JournalEntry>, start: uint64, len: uint64, numBlocks: uint64)
      returns (res: seq<byte>)
    requires 0 <= start as int < entries.Length
    requires 0 <= len as int <= entries.Length
    requires entries.Length <= 4294967295
    requires WeightJournalEntries(JournalistMarshallingModel.cyclicSlice(entries[..], start, len)) <= 4064 * numBlocks as int
    requires 1 <= numBlocks <= NumJournalBlocks()
    ensures res == JournalistMarshallingModel.marshallJournalEntries(entries[..], start, len, numBlocks)
    decreases entries, start, len, numBlocks
  {
    reveal_WeightJournalEntries();
    JournalistMarshallingModel.reveal_marshallJournalEntries();
    var buf: array?<byte> := NativeArrays.newArrayFill(numBlocks * 4096, 0);
    assert buf[..] == fill((numBlocks * 4096) as int, 0);
    WriteHeader(buf, numBlocks, len);
    WriteJournalEntries(buf, numBlocks, 8, entries, start, len);
    FillInChecksums(buf, numBlocks, 0);
    return buf[..];
  }
}