// DeallocModel.i.dfy
module DeallocModel {
  predicate deallocable(s: BCVariables, ref: BT.G.Reference)
    decreases s, ref
  {
    s.Ready? &&
    IndirectionTableModel.deallocable(s.ephemeralIndirectionTable, ref)
  }
  function {:opaque} {:fuel 0, 0} Dealloc(k: Constants, s: BCVariables, io: IO, ref: BT.G.Reference): (res: (BCVariables, IO))
    requires BCInv(k, s)
    requires io.IOInit?
    requires deallocable(s, ref)
    decreases k, s, io, ref
  {
    if s.frozenIndirectionTable.Some? && IndirectionTableModel.HasEmptyLoc(s.frozenIndirectionTable.value, ref) then
      (s, io)
    else if BC.OutstandingRead(ref) in s.outstandingBlockReads.Values then
      (s, io)
    else
      var (eph: IndirectionTable, oldLoc: Option<Location>) := IndirectionTableModel.RemoveRef(s.ephemeralIndirectionTable, ref); lemmaIndirectionTableLocIndexValid(k, s, ref); var blockAllocator': BlockAllocatorModel := if oldLoc.Some? then BlockAllocatorModel.MarkFreeEphemeral(s.blockAllocator, oldLoc.value.addr as int / NodeBlockSize()) else s.blockAllocator; var s': BCVariables := s.(ephemeralIndirectionTable := eph).(cache := MapRemove(s.cache, {ref})).(lru := LruModel.Remove(s.lru, ref)).(blockAllocator := blockAllocator'); (s', io)
  }
  lemma DeallocCorrect(k: Constants, s: BCVariables, io: IO, ref: BT.G.Reference)
    requires BCInv(k, s)
    requires io.IOInit?
    requires deallocable(s, ref)
    ensures var (s': BCVariables, io': IO) := Dealloc(k, s, io, ref); WFBCVars(s') && ValidDiskOp(diskOp(io')) && IDiskOp(diskOp(io')).jdop.NoDiskOp? && (BBC.Next(Ik(k).bc, IBlockCache(s), IBlockCache(s'), IDiskOp(diskOp(io')).bdop, AdvanceOp(UI.NoOp, true)) || BBC.Next(Ik(k).bc, IBlockCache(s), IBlockCache(s'), IDiskOp(diskOp(io')).bdop, StatesInternalOp))
    decreases k, s, io, ref
  {
    reveal_Dealloc();
    var (s': BCVariables, io': IO) := Dealloc(k, s, io, ref);
    LruModel.LruRemove(s.lru, ref);
    if s.frozenIndirectionTable.Some? && IndirectionTableModel.HasEmptyLoc(s.frozenIndirectionTable.value, ref) {
      assert noop(k, IBlockCache(s), IBlockCache(s'));
      return;
    }
    if BC.OutstandingRead(ref) in s.outstandingBlockReads.Values {
      assert noop(k, IBlockCache(s), IBlockCache(s'));
      return;
    }
    assert BC.OutstandingBlockReadsDoesNotHaveRef(s.outstandingBlockReads, ref);
    lemmaIndirectionTableLocIndexValid(k, s, ref);
    var (eph: IndirectionTable, oldLoc: Option<Location>) := IndirectionTableModel.RemoveRef(s.ephemeralIndirectionTable, ref);
    ghost var blockAllocator': BlockAllocatorModel := if oldLoc.Some? then BlockAllocatorModel.MarkFreeEphemeral(s.blockAllocator, oldLoc.value.addr as int / NodeBlockSize()) else s.blockAllocator;
    freeIndirectionTableLocCorrect(k, s, s', ref, if oldLoc.Some? then Some(oldLoc.value.addr as int / NodeBlockSize()) else None);
    reveal_ConsistentBitmap();
    assert WFBCVars(s');
    ghost var iDiskOp: BlockDisk.DiskOp := IDiskOp(diskOp(io)).bdop;
    assert BC.Unalloc(Ik(k).bc, IBlockCache(s), IBlockCache(s'), iDiskOp, AdvanceOp(UI.NoOp, true), ref);
    assert BBC.BlockCacheMove(Ik(k).bc, IBlockCache(s), IBlockCache(s'), iDiskOp, AdvanceOp(UI.NoOp, true), BC.UnallocStep(ref));
    assert BBC.NextStep(Ik(k).bc, IBlockCache(s), IBlockCache(s'), iDiskOp, AdvanceOp(UI.NoOp, true), BBC.BlockCacheMoveStep(BC.UnallocStep(ref)));
  }
  function {:opaque} {:fuel 0, 0} FindDeallocable(s: BCVariables): (ref: Option<Reference>)
    requires WFBCVars(s)
    requires s.Ready?
    decreases s
  {
    IndirectionTableModel.FindDeallocable(s.ephemeralIndirectionTable)
  }
  lemma FindDeallocableCorrect(s: BCVariables)
    requires WFBCVars(s)
    requires s.Ready?
    ensures var ref: Option<Reference> := FindDeallocable(s); (ref.Some? ==> ref.value in IIndirectionTable(s.ephemeralIndirectionTable).graph) && (ref.Some? ==> deallocable(s, ref.value)) && (ref.None? ==> forall r: NativeTypes.uint64 {:trigger deallocable(s, r)} {:trigger r in IIndirectionTable(s.ephemeralIndirectionTable).graph} | r in IIndirectionTable(s.ephemeralIndirectionTable).graph :: !deallocable(s, r))
    decreases s
  {
    reveal_FindDeallocable();
    IndirectionTableModel.FindDeallocableCorrect(s.ephemeralIndirectionTable);
  }
}