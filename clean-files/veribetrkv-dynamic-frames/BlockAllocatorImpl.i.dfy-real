// BlockAllocatorImpl.i.dfy
module BlockAllocatorImpl {
  class BlockAllocator {
    var ephemeral: BitmapImpl.Bitmap
    var frozen: BitmapImpl.Bitmap?
    var persistent: BitmapImpl.Bitmap
    var outstanding: BitmapImpl.Bitmap
    var full: BitmapImpl.Bitmap
    method DebugAccumulate() returns (acc: DebugAccumulator.DebugAccumulator)
    {
      acc := DebugAccumulator.EmptyAccumulator();
      var r: seq<AccRec> := ephemeral.DebugAccumulate();
      var a: AccRec := new DebugAccumulator.AccRec.Index(r);
      acc := DebugAccumulator.AccPut(acc, "ephemeral", a);
      if frozen != null {
        r := frozen.DebugAccumulate();
      } else {
        r := DebugAccumulator.EmptyAccumulator();
      }
      a := new DebugAccumulator.AccRec.Index(r);
      acc := DebugAccumulator.AccPut(acc, "frozen", a);
      r := persistent.DebugAccumulate();
      a := new DebugAccumulator.AccRec.Index(r);
      acc := DebugAccumulator.AccPut(acc, "persistent", a);
      r := outstanding.DebugAccumulate();
      a := new DebugAccumulator.AccRec.Index(r);
      acc := DebugAccumulator.AccPut(acc, "outstanding", a);
      r := full.DebugAccumulate();
      a := new DebugAccumulator.AccRec.Index(r);
      acc := DebugAccumulator.AccPut(acc, "full", a);
    }
    ghost var Repr: set<object>
    constructor (bm: BitmapImpl.Bitmap)
    {
      ephemeral := bm;
      frozen := null;
      persistent := new BitmapImpl.Bitmap.Clone(bm);
      outstanding := new BitmapImpl.Bitmap(NumBlocksUint64());
      full := new BitmapImpl.Bitmap.Clone(bm);
      new;
    }
    method Alloc() returns (res: Option<uint64>)
    {
      res := full.Alloc();
    }
    method MarkUsedEphemeral(i: uint64)
      modifies Repr
    {
      ephemeral.Set(i);
      full.Set(i);
    }
    method MarkUsedFrozen(i: uint64)
      modifies Repr
    {
      frozen.Set(i);
      full.Set(i);
    }
    method MarkUsedOutstanding(i: uint64)
      modifies Repr
    {
      outstanding.Set(i);
      full.Set(i);
    }
    method MarkFreeOutstanding(i: uint64)
      modifies Repr
    {
      outstanding.Unset(i);
      var b0: bool := false;
      if frozen != null {
        b0 := frozen.GetIsSet(i);
      }
      if !b0 {
        var b1: bool := ephemeral.GetIsSet(i);
        if !b1 {
          var b2: bool := persistent.GetIsSet(i);
          if !b2 {
            full.Unset(i);
          }
        }
      }
    }
    method MarkFreeEphemeral(i: uint64)
      modifies Repr
    {
      ephemeral.Unset(i);
      var b0: bool := false;
      if frozen != null {
        b0 := frozen.GetIsSet(i);
      }
      if !b0 {
        var b1: bool := outstanding.GetIsSet(i);
        if !b1 {
          var b2: bool := persistent.GetIsSet(i);
          if !b2 {
            full.Unset(i);
          }
        }
      }
    }
    method MoveFrozenToPersistent()
      modifies Repr
    {
      var fo: Bitmap := new BitmapImpl.Bitmap.Union(frozen, outstanding);
      full := new BitmapImpl.Bitmap.Union(ephemeral, fo);
      persistent := frozen;
      frozen := null;
    }
    method CopyEphemeralToFrozen()
      modifies Repr
    {
      frozen := new BitmapImpl.Bitmap.Clone(ephemeral);
    }
  }
}