// StateImpl.i.dfy
module StateImpl {
  type ImplVariables = Variables
  type Reference = BT.G.Reference
  type MutIndirectionTable = IndirectionTableImpl.IndirectionTable
  type MutIndirectionTableNullable = IndirectionTableImpl.IndirectionTable?
  datatype Sector = SectorNode(node: Node) | SectorSuperblock(superblock: SectorType.Superblock) | SectorIndirectionTable(indirectionTable: MutIndirectionTable)
  class Variables {
    var loading: bool
    var ready: bool
    var persistentIndirectionTable: MutIndirectionTable
    var frozenIndirectionTable: MutIndirectionTableNullable
    var ephemeralIndirectionTable: MutIndirectionTable
    var persistentIndirectionTableLoc: DiskLayout.Location
    var frozenIndirectionTableLoc: Option<DiskLayout.Location>
    var outstandingIndirectionTableWrite: Option<BC.ReqId>
    var outstandingBlockWrites: map<D.ReqId, BC.OutstandingWrite>
    var outstandingBlockReads: map<D.ReqId, BC.OutstandingRead>
    var cache: MutCache
    var lru: LruImpl.LruImplQueue
    var blockAllocator: BlockAllocatorImpl.BlockAllocator
    var indirectionTableLoc: DiskLayout.Location
    var indirectionTableRead: Option<BC.ReqId>
    method DebugAccumulate() returns (acc: DebugAccumulator.DebugAccumulator)
    {
      acc := DebugAccumulator.EmptyAccumulator();
      var i: seq<AccRec> := DebugAccumulator.EmptyAccumulator();
      if persistentIndirectionTable != null {
        i := persistentIndirectionTable.DebugAccumulate();
      }
      var a: AccRec := new DebugAccumulator.AccRec.Index(i);
      acc := DebugAccumulator.AccPut(acc, "persistentIndirectionTable", a);
      i := DebugAccumulator.EmptyAccumulator();
      if frozenIndirectionTable != null {
        i := frozenIndirectionTable.DebugAccumulate();
      }
      a := new DebugAccumulator.AccRec.Index(i);
      acc := DebugAccumulator.AccPut(acc, "frozenIndirectionTable", a);
      i := DebugAccumulator.EmptyAccumulator();
      if ephemeralIndirectionTable != null {
        i := ephemeralIndirectionTable.DebugAccumulate();
      }
      a := new DebugAccumulator.AccRec.Index(i);
      acc := DebugAccumulator.AccPut(acc, "ephemeralIndirectionTable", a);
      i := cache.DebugAccumulate();
      a := new DebugAccumulator.AccRec.Index(i);
      acc := DebugAccumulator.AccPut(acc, "cache", a);
      i := lru.DebugAccumulate();
      a := new DebugAccumulator.AccRec.Index(i);
      acc := DebugAccumulator.AccPut(acc, "lru", a);
      i := blockAllocator.DebugAccumulate();
      a := new DebugAccumulator.AccRec.Index(i);
      acc := DebugAccumulator.AccPut(acc, "blockAllocator", a);
    }
    constructor ()
    {
      ready := false;
      loading := false;
      lru := new LruImpl.LruImplQueue();
      ephemeralIndirectionTable := new IndirectionTableImpl.IndirectionTable.Empty();
      persistentIndirectionTable := new IndirectionTableImpl.IndirectionTable.Empty();
      frozenIndirectionTable := null;
      cache := new MutCache();
      var bm: BitmapImpl.Bitmap := new BitmapImpl.Bitmap(NumBlocksUint64());
      blockAllocator := new BlockAllocatorImpl.BlockAllocator(bm);
    }
  }
  function method TotalCacheSize(s: ImplVariables): (res: uint64)
    reads s, s.cache, s.cache.Repr
  {
    s.cache.Count() + |s.outstandingBlockReads| as uint64
  }
}