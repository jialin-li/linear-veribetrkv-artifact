// SplitImpl.i.dfy
module SplitImpl {
  method splitBookkeeping(k: ImplConstants, s: ImplVariables, left_childref: BT.G.Reference, right_childref: BT.G.Reference, parentref: BT.G.Reference, fused_parent_children: seq<BT.G.Reference>, left_child: Node, right_child: Node, slot: uint64)
    modifies s.lru.Repr, s.ephemeralIndirectionTable.Repr, s.blockAllocator.Repr
  {
    writeBookkeeping(k, s, left_childref, left_child.children);
    writeBookkeeping(k, s, right_childref, right_child.children);
    var rep: seq<NativeTypes.uint64> := Replace1with2(fused_parent_children, left_childref, right_childref, slot);
    writeBookkeeping(k, s, parentref, Some(rep));
  }
  method splitCacheChanges(s: ImplVariables, left_childref: BT.G.Reference, right_childref: BT.G.Reference, parentref: BT.G.Reference, slot: uint64, num_children_left: uint64, pivot: Key, left_child: Node, right_child: Node)
    modifies s.Repr(), left_child.Repr, right_child.Repr
  {
    s.cache.Insert(left_childref, left_child);
    s.cache.Insert(right_childref, right_child);
    s.cache.SplitParent(parentref, slot as uint64, pivot, left_childref, right_childref);
  }
  method splitDoChanges(k: ImplConstants, s: ImplVariables, child: Node, left_childref: BT.G.Reference, right_childref: BT.G.Reference, parentref: BT.G.Reference, fused_parent_children: seq<BT.G.Reference>, slot: uint64)
    modifies s.Repr()
  {
    var num_children_left: uint64 := |child.buckets| as uint64 / 2;
    var pivot: Key := child.pivotTable[num_children_left - 1];
    var left_child: Node := child.SplitChildLeft(num_children_left as uint64);
    var right_child: Node := child.SplitChildRight(num_children_left as uint64);
    splitBookkeeping(k, s, left_childref, right_childref, parentref, fused_parent_children, left_child, right_child, slot as uint64);
    splitCacheChanges(s, left_childref, right_childref, parentref, slot as uint64, num_children_left as uint64, pivot, left_child, right_child);
  }
  method doSplit(k: ImplConstants, s: ImplVariables, parentref: BT.G.Reference, childref: BT.G.Reference, slot: uint64)
    modifies s.Repr()
  {
    if s.frozenIndirectionTable != null {
      var b: bool := s.frozenIndirectionTable.HasEmptyLoc(parentref);
      if b {
        print "giving up; split can't run because frozen isn't written";
        return;
      }
    }
    var fused_parent_opt: Option<Node> := s.cache.GetOpt(parentref);
    var fused_parent: Node := fused_parent_opt.value;
    var fused_child_opt: Option<Node> := s.cache.GetOpt(childref);
    var fused_child: Node := fused_child_opt.value;
    var lbound: Option<Key> := if slot > 0 then Some(fused_parent.pivotTable[slot - 1]) else None;
    var ubound: Option<Key> := if slot < |fused_parent.pivotTable| as uint64 then Some(fused_parent.pivotTable[slot]) else None;
    var child: Node := NodeImpl.Node.CutoffNode(fused_child, lbound, ubound);
    if |child.pivotTable| as uint64 == 0 {
      print "giving up; doSplit can't run because child.pivots == 0\n";
      return;
    }
    var left_childref: Option<BT.G.Reference> := getFreeRef(s);
    if left_childref.None? {
      print "giving up; doSplit can't allocate left_childref\n";
      return;
    }
    var right_childref: Option<BT.G.Reference> := getFreeRef2(s, left_childref.value);
    if right_childref.None? {
      print "giving up; doSplit can't allocate right_childref\n";
      return;
    }
    splitDoChanges(k, s, child, left_childref.value, right_childref.value, parentref, fused_parent.children.value, slot as uint64);
  }
}