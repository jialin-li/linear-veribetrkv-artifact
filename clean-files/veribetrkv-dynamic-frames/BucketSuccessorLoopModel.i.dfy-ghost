// BucketSuccessorLoopModel.i.dfy
module BucketSuccessorLoopModel {
  function {:opaque} {:fuel 0, 0} ProcessGenerator(g: Generator, maxToFind: int, upTo: Option<Key>, results: seq<UI.SuccResult>): UI.SuccResultList
    requires WF(g)
    requires |results| < maxToFind
    decreases decreaser(g)
  {
    lemmaDecreaserDecreases(g);
    var next: IteratorOutput := GenLeft(g);
    if next.Next? && (upTo.Some? ==> Keyspace.lt(next.key, upTo.value)) then
      var v: Value := Merge(next.msg, DefineDefault()).value;
      if v != DefaultValue() then
        var results': seq<UI.SuccResult> := results + [UI.SuccResult(next.key, v)];
        if |results'| < maxToFind then
          var g': Generator := GenPop(g);
          ProcessGenerator(g', maxToFind, upTo, results')
        else
          UI.SuccResultList(results', UI.EInclusive(next.key))
      else
        var g': Generator := GenPop(g); ProcessGenerator(g', maxToFind, upTo, results)
    else
      UI.SuccResultList(results, if upTo.Some? then UI.EExclusive(upTo.value) else UI.PositiveInf)
  }
  function {:opaque} {:fuel 0, 0} GetSuccessorInBucketStack(buckets: seq<Bucket>, maxToFind: int, start: UI.RangeStart, upTo: Option<Key>): UI.SuccResultList
    requires |buckets| >= 1
    requires maxToFind >= 1
    requires forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: WFBucket(buckets[i])
    decreases buckets, maxToFind, start, upTo
  {
    var g: Generator := GenFromBucketStackWithLowerBound(buckets, start);
    ProcessGenerator(g, maxToFind, upTo, [])
  }
  predicate ProcessInv(bucket: Bucket, left: Bucket, right: Bucket, g: Generator, maxToFind: int, upTo: Option<Key>, results: seq<UI.SuccResult>)
    decreases bucket, left, right, g, maxToFind, upTo, results
  {
    results == SortedSeqOfKeyValueMap(KeyValueMapOfBucket(left)) &&
    YieldsSortedBucket(g, right) &&
    (forall l: seq<NativeTypes.byte>, r: seq<NativeTypes.byte> {:trigger lt(l, r)} {:trigger r in right.b, l in left.b} | l in left.b && r in right.b :: 
      lt(l, r)) &&
    (upTo.Some? ==>
      forall l: seq<NativeTypes.byte> {:trigger lt(l, upTo.value)} {:trigger l in left.b} | l in left.b :: 
        lt(l, upTo.value)) &&
    MapUnionPreferA(left.b, right.b) == bucket.b &&
    |results| < maxToFind
  }
  lemma  ProcessGeneratorResult(bucket: Bucket, left: Bucket, right: Bucket, g: Generator, maxToFind: int, upTo: Option<Key>, results: seq<UI.SuccResult>)
    requires ProcessInv(bucket, left, right, g, maxToFind, upTo, results)
    requires BucketWellMarshalled(bucket)
    requires BucketWellMarshalled(left)
    requires BucketWellMarshalled(right)
    ensures var r: UI.SuccResultList := ProcessGenerator(g, maxToFind, upTo, results); r.results == SortedSeqOfKeyValueMap(KeyValueMapOfBucket(ClampEnd(bucket, r.end))) && (upTo.Some? ==> !MS.UpperBound(upTo.value, r.end)) && (|r.results| == 0 ==> r.end == if upTo.Some? then UI.EExclusive(upTo.value) else UI.PositiveInf)
    decreases decreaser(g)
  {
    reveal_ProcessGenerator();
    reveal_SortedSeqOfKeyValueMap();
    reveal_KeyValueMapOfBucket();
    reveal_ClampEnd();
    lemmaDecreaserDecreases(g);
    ghost var next: IteratorOutput := GenLeft(g);
    GenLeftIsMinimum(g);
    if next.Next? && (upTo.Some? ==> Keyspace.lt(next.key, upTo.value)) {
      ghost var v: Value := Merge(next.msg, DefineDefault()).value;
      GenPopIsRemove(g);
      ghost var left': Bucket := B(left.b[next.key := next.msg]);
      ghost var right': Bucket := B(MapRemove1(right.b, next.key));
      if v != DefaultValue() {
        ghost var results': seq<UI.SuccResult> := results + [UI.SuccResult(next.key, v)];
        assert forall k: seq<NativeTypes.byte> {:trigger lte(k, next.key)} {:trigger k in KeyValueMapOfBucket(left').Keys} | k in KeyValueMapOfBucket(left').Keys :: lte(k, next.key);
        assert next.key in KeyValueMapOfBucket(left').Keys;
        assert next.key == Keyspace.maximum(KeyValueMapOfBucket(left').Keys);
        assert MapRemove1(KeyValueMapOfBucket(left'), Keyspace.maximum(KeyValueMapOfBucket(left').Keys)) == KeyValueMapOfBucket(left);
        assert results' == SortedSeqOfKeyValueMap(KeyValueMapOfBucket(left'));
        if |results'| < maxToFind {
          ghost var g': Generator := GenPop(g);
          ProcessGeneratorResult(bucket, left', right', g', maxToFind, upTo, results');
        } else {
          WellMarshalledBucketsEq(left', ClampEnd(bucket, UI.EInclusive(next.key)));
          assert left' == ClampEnd(bucket, UI.EInclusive(next.key));
        }
      } else {
        assert KeyValueMapOfBucket(left') == KeyValueMapOfBucket(left);
        assert results == SortedSeqOfKeyValueMap(KeyValueMapOfBucket(left'));
        ghost var g': Generator := GenPop(g);
        ProcessGeneratorResult(bucket, left', right', g', maxToFind, upTo, results);
      }
    } else {
      ghost var ce: Bucket := ClampEnd(bucket, if upTo.Some? then UI.EExclusive(upTo.value) else UI.PositiveInf);
      assert left.b == ce.b;
    }
  }
  lemma InRangeImpliesNonEmpty(start: UI.RangeStart, key: Key, end: UI.RangeEnd)
    requires MS.InRange(start, key, end)
    ensures MS.NonEmptyRange(start, end)
    decreases start, key, end
  {
    assert start.SInclusive? ==> Keyspace.lte(start.key, key);
    assert start.SExclusive? ==> Keyspace.lt(start.key, key);
    assert end.EInclusive? ==> Keyspace.lte(key, end.key);
    assert end.EExclusive? ==> Keyspace.lt(key, end.key);
  }
  lemma  GetSuccessorInBucketStackResult(buckets: seq<Bucket>, maxToFind: int, start: UI.RangeStart, upTo: Option<Key>)
    requires |buckets| >= 1
    requires maxToFind >= 1
    requires BucketListWellMarshalled(buckets)
    requires forall i: int {:trigger buckets[i]} | 0 <= i < |buckets| :: WFBucket(buckets[i])
    requires upTo.Some? && (start.SInclusive? || start.SExclusive?) ==> Keyspace.lt(start.key, upTo.value)
    ensures var r: UI.SuccResultList := GetSuccessorInBucketStack(buckets, maxToFind, start, upTo); r.results == SortedSeqOfKeyValueMap(KeyValueMapOfBucket(ClampRange(ComposeSeq(buckets), start, r.end))) && (upTo.Some? ==> !MS.UpperBound(upTo.value, r.end)) && MS.NonEmptyRange(start, r.end)
    decreases buckets, maxToFind, start, upTo
  {
    reveal_GetSuccessorInBucketStack();
    ghost var g: Generator := GenFromBucketStackWithLowerBound(buckets, start);
    GenFromBucketStackWithLowerBoundYieldsComposeSeq(buckets, start);
    ghost var bucket: Bucket := BucketOf(g);
    reveal_KeyValueMapOfBucket();
    reveal_SortedSeqOfKeyValueMap();
    ProcessGeneratorResult(bucket, B(map[]), bucket, g, maxToFind, upTo, []);
    ghost var r: UI.SuccResultList := ProcessGenerator(g, maxToFind, upTo, []);
    assert r == GetSuccessorInBucketStack(buckets, maxToFind, start, upTo);
    reveal_ClampRange();
    reveal_ClampStart();
    reveal_ClampEnd();
    assert ClampRange(ComposeSeq(buckets), start, r.end) == ClampEnd(ClampStart(ComposeSeq(buckets), start), r.end);
    if |r.results| == 0 {
      assert MS.NonEmptyRange(start, r.end);
    } else {
      SortedSeqOfKeyValueMaps(KeyValueMapOfBucket(ClampRange(ComposeSeq(buckets), start, r.end)), 0);
      assert r.results[0].key in ClampRange(ComposeSeq(buckets), start, r.end).b;
      assert MS.InRange(start, r.results[0].key, r.end);
      InRangeImpliesNonEmpty(start, r.results[0].key, r.end);
    }
  }
}