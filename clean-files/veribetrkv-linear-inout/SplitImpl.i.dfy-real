  var Length: int  // immutable
  method computeValidSplitKey(cache: CacheImpl.LMutCache, ref: BT.G.Reference, pivots: PivotTable, lpivot: Key, rpivot: Option<Key>)
      returns (b: bool)
  {
    var len: uint64 := |pivots| as uint64;
    var valid: bool := ComputeBoundedKey(pivots, lpivot);
    if !valid {
      return false;
    }
    if rpivot.Some? {
      valid := ComputeValidLeftCutOffKey(pivots, rpivot.value);
      if !valid {
        return false;
      }
      var k: Key := ComputeGetKey(pivots, 0);
      var c: int32 := BT.G.KeyspaceImpl.cmp(k, rpivot.value);
      if c >= 0 {
        return false;
      }
      c := BT.G.KeyspaceImpl.cmp(lpivot, rpivot.value);
      if c >= 0 {
        return false;
      }
    } else {
      if pivots[len - 1] != Keyspace.Max_Element {
        return false;
      }
    }
    return true;
  }
  method splitBookkeeping(inout s: ImplVariables, left_childref: BT.G.Reference, right_childref: BT.G.Reference, parentref: BT.G.Reference, fparent_children: seq<BT.G.Reference>, left_child: Node, right_child: Node, slot: uint64)
  {
    writeBookkeeping(inout s, left_childref, left_child.children);
    writeBookkeeping(inout s, right_childref, right_child.children);
    var rep: seq<BT.G.Reference> := Replace1with2(fparent_children, left_childref, right_childref, slot);
    writeBookkeeping(inout s, parentref, Some(rep));
  }
  method splitCacheChanges(inout s: ImplVariables, left_childref: BT.G.Reference, right_childref: BT.G.Reference, parentref: BT.G.Reference, slot: uint64, num_children_left: uint64, pivot: Key, left_child: Node, right_child: Node)
  {
    s.cache.Insert(left_childref, left_child);
    s.cache.Insert(right_childref, right_child);
    s.cache.SplitParent(parentref, slot as uint64, pivot, left_childref, right_childref);
  }
  method splitDoChanges(inout s: ImplVariables, child: Node, left_childref: BT.G.Reference, right_childref: BT.G.Reference, parentref: BT.G.Reference, fparent_pivots: PivotTable, fparent_children: seq<BT.G.Reference>, slot: uint64)
  {
    var len: uint64 := lseq_length_as_uint64(child.buckets);
    var num_children_left: uint64 := len / 2;
    var pivot: Key := ComputeGetKey(child.pivotTable, num_children_left);
    var insertable: bool := ComputePivotInsertable(fparent_pivots, slot + 1, pivot);
    if insertable {
      var left_child: Node := child.SplitChildLeft(num_children_left);
      var right_child: Node := child.SplitChildRight(num_children_left);
      splitBookkeeping(inout s, left_childref, right_childref, parentref, fparent_children, left_child, right_child, slot as uint64);
      splitCacheChanges(inout s, left_childref, right_childref, parentref, slot as uint64, num_children_left as uint64, pivot, left_child, right_child);
    } else {
      print "giving up; split can't run because new pivots will not be strictly sorted";
    }
    var _: () := FreeNode(child);
  }
  method splitChild(inout s: ImplVariables, parentref: BT.G.Reference, childref: BT.G.Reference, slot: uint64, lbound: Key, ubound: Option<Key>, fparent_pivots: PivotTable, fparent_children: Option<seq<BT.G.Reference>>, refUpperBound: uint64)
  {
    var child: Node := s.cache.NodeCutOff(childref, lbound, ubound);
    if |child.pivotTable| as uint64 == 2 {
      print "giving up; doSplit can't run because child pivots can't be splitted\n";
      var _: () := FreeNode(child);
    } else {
      var len: uint64 := lseq_length_as_uint64(child.buckets);
      var num_children_left: uint64 := len / 2;
      var pivot: Key := ComputeGetKey(child.pivotTable, num_children_left);
      var left_childref: Option<BT.G.Reference> := getFreeRef(s);
      if left_childref.None? {
        print "giving up; doSplit can't allocate left_childref\n";
        var _: () := FreeNode(child);
      } else {
        var right_childref: Option<BT.G.Reference> := getFreeRef2(s, left_childref.value);
        if right_childref.None? {
          print "giving up; doSplit can't allocate right_childref\n";
          var _: () := FreeNode(child);
        } else {
          splitDoChanges(inout s, child, left_childref.value, right_childref.value, parentref, fparent_pivots, fparent_children.value, slot as uint64);
        }
      }
    }
  }
  method doSplit(inout s: ImplVariables, parentref: BT.G.Reference, childref: BT.G.Reference, slot: uint64, refUpperBound: uint64)
  {
    var b: bool := false;
    if s.frozenIndirectionTable.lSome? {
      b := s.frozenIndirectionTable.value.HasEmptyLoc(parentref);
    }
    if b {
      print "giving up; split can't run because frozen isn't written";
    } else {
      var fparent_pivots: seq<Element>, fparent_children: Option<seq<BT.G.Reference>> := s.cache.GetNodeInfo(parentref);
      var fchild_pivots: seq<Element>, _: Option<seq<BT.G.Reference>> := s.cache.GetNodeInfo(childref);
      var childlbound: int32 := KeyspaceImpl.cmp(fchild_pivots[0], fparent_pivots[slot]);
      var childubound: int32 := KeyspaceImpl.cmp(fparent_pivots[slot + 1], fchild_pivots[|fchild_pivots| as uint64 - 1]);
      if childlbound > 0 || childubound > 0 {
        print "giving up; split can't run because splitted keys are not in bound";
      } else {
        var lbound: Key := ComputeGetKey(fparent_pivots, slot);
        var ubound: Option<Key> := None;
        if fparent_pivots[slot + 1].Element? {
          var ukey: Key := ComputeGetKey(fparent_pivots, slot + 1);
          ubound := Some(ukey);
        }
        var childvalid: bool := computeValidSplitKey(s.cache, childref, fchild_pivots, lbound, ubound);
        var parentvalid: bool := computeValidSplitKey(s.cache, parentref, fparent_pivots, lbound, ubound);
        if childvalid && parentvalid {
          splitChild(inout s, parentref, childref, slot, lbound, ubound, fparent_pivots, fparent_children, refUpperBound);
        } else {
          print "giving up; split can't run because bounds checking failed";
        }
      }
    }
  }
  method split(inout s: ImplVariables, parentref: BT.G.Reference, childref: BT.G.Reference, slot: uint64)
  {
    var refUpperBound: uint64 := s.ephemeralIndirectionTable.refUpperBound;
    doSplit(inout s, parentref, childref, slot, refUpperBound);
  }
Dafny program verifier did not attempt verification