  var Length: int  // immutable
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function method grammar(): G
    ensures ValidGrammar(grammar())
  {
    GTuple([GUint32Array, GByteArray])
  }
  function fromVal(v: V): (opsa: Option<Psa>)
    requires ValInGrammar(v, grammar())
    ensures opsa.Some? ==> WF(opsa.value)
  {
    assert ValInGrammar(v.t[0], GUint32Array);
    assert ValInGrammar(v.t[1], GByteArray);
    ghost var offsets: seq<uint32> := v.t[0].va;
    ghost var data: seq<byte> := v.t[1].b;
    ghost var psa: Psa := Psa(offsets, data);
    if WF(psa) then
      Some(psa)
    else
      None
  }
  function toVal(psa: Psa): (v: V)
    requires WF(psa)
    ensures ValInGrammar(v, grammar())
  {
    VTuple([VUint32Array(psa.offsets), VByteArray(psa.data)])
  }
  lemma parseMarshalledCorrect(psa: Psa)
    requires WF(psa)
    ensures fromVal(toVal(psa)) == Some(psa)
  {
  }
  lemma uniqueMarshalling(v: V)
    requires ValInGrammar(v, grammar())
    requires fromVal(v).Some?
    ensures toVal(fromVal(v).value) == v
  {
  }
  method ComputeWF(psa: Psa) returns (result: bool)
    requires |psa.offsets| < Uint64UpperBound()
    requires |psa.data| < Uint64UpperBound()
    ensures result == WF(psa)
  {
    var sorted: bool := Uint32_Order_Impl.ComputeIsSorted(psa.offsets);
    result := |psa.offsets| as uint64 < 4294967296 && |psa.data| as uint64 < 4294967296 && (|psa.offsets| as uint64 == 0 ==> |psa.data| as uint64 == 0) && (0 < |psa.offsets| as uint64 ==> |psa.data| as uint32 == psa.offsets[|psa.offsets| as uint64 - 1]) && sorted;
  }
  method FromVal(v: V) returns (psa: Option<Psa>)
    requires ValidVal(v)
    requires ValInGrammar(v, grammar())
    ensures psa == fromVal(v)
  {
    assert ValInGrammar(v.t[0], GUint32Array);
    assert ValInGrammar(v.t[1], GByteArray);
    var offsets: seq<uint32> := v.t[0].va;
    var data: seq<byte> := v.t[1].b;
    assert ValidVal(v.t[0]);
    assert ValidVal(v.t[1]);
    var tmp: Psa := Psa(offsets, data);
    var wf: bool := ComputeWF(tmp);
    if wf {
      psa := Some(tmp);
    } else {
      psa := None;
    }
  }
  method ToVal(psa: Psa) returns (v: V)
    requires WF(psa)
    ensures ValInGrammar(v, grammar())
    ensures ValidVal(v)
    ensures v == toVal(psa)
  {
    v := VTuple([VUint32Array(psa.offsets), VByteArray(psa.data)]);
  }
  lemma PSASizeOfV(psa: Psa)
    requires WF(psa)
    ensures SizeOfV(toVal(psa)) == 0 + SizeOfV(VUint32Array(psa.offsets)) + SizeOfV(VByteArray(psa.data))
  {
    ghost var v: V := toVal(psa);
    ghost var ov: V := v.t[0];
    ghost var dv: V := v.t[1];
    calc == {
      SizeOfV(v);
    ==
      {
        reveal_SeqSum();
      }
      SizeOfV(ov) + SeqSum(v.t[1..]);
    ==
      {
        reveal_SeqSum();
      }
      SizeOfV(ov) + SizeOfV(dv);
    }
  }
Dafny program verifier did not attempt verification