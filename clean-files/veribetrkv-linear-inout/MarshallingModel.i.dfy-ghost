  var Length: int  // immutable
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): bool
    reads reads(x0, x1, x2, x3, x4)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): set<object?>
    reads reads(x0, x1, x2, x3, x4)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): bool
    reads reads(x0, x1, x2, x3, x4, x5)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6): bool
    reads reads(x0, x1, x2, x3, x4, x5, x6)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5, x6)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8, x9: T9): bool
    reads reads(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8, x9: T9): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  lemma WeightBucketListLteSize(v: V, buckets: seq<Bucket>)
    requires v.VArray?
    requires Marshalling.valToBuckets.requires(v.a)
    requires Marshalling.valToBuckets(v.a) == Some(buckets)
    ensures WeightBucketList(buckets) <= SizeOfV(v)
    decreases |v.a|
  {
    if |buckets| == 0 {
      reveal_WeightBucketList();
    } else {
      ghost var prebuckets: seq<Bucket> := DropLast(buckets);
      ghost var prev: V := VArray(DropLast(v.a));
      ghost var lastbucket: Bucket := Last(buckets);
      ghost var lastv: V := Last(v.a);
      assert WeightBucket(lastbucket) <= SizeOfV(lastv) by {
        ghost var pkv: Pkv := PackedKVMarshalling.fromVal(lastv).value;
        PackedKVMarshalling.SizeOfVPackedKVIsBucketWeight(pkv);
        PackedKVMarshalling.uniqueMarshalling(lastv);
      }
      calc <= {
        WeightBucketList(buckets);
      <=
        {
          reveal_WeightBucketList();
        }
        WeightBucketList(prebuckets) + WeightBucket(lastbucket);
      <=
        {
          WeightBucketListLteSize(prev, prebuckets);
        }
        SizeOfV(prev) + WeightBucket(lastbucket);
      <=
        {
          lemma_SeqSum_prefix(prev.a, lastv);
          assert v.a == prev.a + [lastv];
        }
        SizeOfV(v);
      }
    }
  }
  lemma SizeOfVTupleElem_le_SizeOfV(v: V, i: int)
    requires v.VTuple?
    requires 0 <= i < |v.t|
    ensures SizeOfV(v.t[i]) <= SizeOfV(v)
    decreases |v.t|
  {
    lemma_SeqSum_prefix(DropLast(v.t), Last(v.t));
    assert DropLast(v.t) + [Last(v.t)] == v.t;
    if i < |v.t| - 1 {
      SizeOfVTupleElem_le_SizeOfV(VTuple(DropLast(v.t)), i);
    }
  }
  lemma SizeOfVArrayElem_le_SizeOfV(v: V, i: int)
    requires v.VArray?
    requires 0 <= i < |v.a|
    ensures SizeOfV(v.a[i]) <= SizeOfV(v)
    decreases |v.a|
  {
    lemma_SeqSum_prefix(DropLast(v.a), Last(v.a));
    assert DropLast(v.a) + [Last(v.a)] == v.a;
    if i < |v.a| - 1 {
      SizeOfVArrayElem_le_SizeOfV(VArray(DropLast(v.a)), i);
    }
  }
  lemma SizeOfVArrayElem_le_SizeOfV_forall(v: V)
    requires v.VArray?
    ensures forall i: int | 0 <= i < |v.a| :: SizeOfV(v.a[i]) <= SizeOfV(v)
  {
    forall i: int | 0 <= i < |v.a|
      ensures SizeOfV(v.a[i]) <= SizeOfV(v)
    {
      SizeOfVArrayElem_le_SizeOfV(v, i);
    }
  }
  function method refToVal(ref: Reference): (v: V)
    ensures ValidVal(v)
    ensures SizeOfV(v) == 8
  {
    VUint64(ref)
  }
Dafny program verifier did not attempt verification