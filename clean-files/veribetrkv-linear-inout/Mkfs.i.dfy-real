  var Length: int  // immutable
  method Mkfs() returns (diskContents: map<Addr, seq<byte>>)
  {
    var s1addr: Addr := Superblock1Location().addr;
    var s2addr: uint64 := Superblock2Location().addr;
    var indirectionTableAddr: uint64 := IndirectionTable1Addr();
    var nodeAddr: uint64 := NodeBlockSizeUint64() * MinNodeBlockIndexUint64();
    var node: Node := Node.EmptyNode();
    var sector: Sector := SSI.SectorNode(node);
    var bNode_array: array?<byte> := MarshallingImpl.MarshallCheckedSector(sector);
    var bNode: seq<byte> := bNode_array[..];
    sector.Free();
    var nodeLoc: Location := Location(nodeAddr, |bNode| as uint64);
    var sectorIndirectionTable: IndirectionTable := IT.IndirectionTable.Alloc(nodeLoc);
    var sectorIndirect: Sector := SSI.SectorIndirectionTable(sectorIndirectionTable);
    var bIndirectionTable_array: array?<byte> := MarshallingImpl.MarshallCheckedSector(sectorIndirect);
    var bIndirectionTable: seq<byte> := bIndirectionTable_array[..];
    sectorIndirect.Free();
    var indirectionTableLoc: Location := Location(indirectionTableAddr, |bIndirectionTable| as uint64);
    var sectorSuperblock: Sector := SSI.SectorSuperblock(Superblock(0, 0, 0, indirectionTableLoc));
    var bSuperblock_array: array?<byte> := MarshallingImpl.MarshallCheckedSector(sectorSuperblock);
    var bSuperblock: seq<byte> := bSuperblock_array[..];
    sectorSuperblock.Free();
    diskContents := map[s1addr := bSuperblock, s2addr := bSuperblock, indirectionTableAddr := bIndirectionTable, nodeAddr := bNode];
  }
Dafny program verifier did not attempt verification