  var Length: int  // immutable
  method Splice(buf: array<byte>, start: uint64, ins: seq<byte>)
    modifies buf
  {
    NativeArrays.CopySeqIntoArray(ins, 0, buf, start, |ins| as uint64);
  }
  method WriteOnto(buf: array<byte>, numBlocks: uint64, start: uint64, bytes: seq<byte>)
    modifies buf
  {
    if |bytes| as uint64 > 0 {
      var block: uint64 := start / 4064;
      var idx: uint64 := start % 4064;
      if idx + |bytes| as uint64 <= 4064 {
        Splice(buf, block * 4096 + 32 + idx, bytes);
      } else {
        Splice(buf, block * 4096 + 32 + idx, bytes[..4064 - idx]);
        Splice(buf, (block + 1) * 4096 + 32, bytes[4064 - idx..]);
      }
    }
  }
  method WriteIntOnto(buf: array<byte>, numBlocks: uint64, start: uint64, val: uint32)
    modifies buf
  {
    WriteOnto(buf, numBlocks, start, pack_LittleEndian_Uint32(val));
  }
  method WriteHeader(buf: array<byte>, numBlocks: uint64, len: uint64)
    modifies buf
  {
    WriteIntOnto(buf, numBlocks, 0, len as uint32);
    WriteIntOnto(buf, numBlocks, 4, numBlocks as uint32);
  }
  method WriteJournalEntries(buf: array<byte>, numBlocks: uint64, idx: uint64, entries: seq<JournalEntry>, start: uint64, len: uint64)
    modifies buf
  {
    if len != 0 {
      var start': uint64 := if start + 1 == seq_length(entries) then 0 else start + 1;
      var entry: JournalEntry := seq_get(entries, start);
      WriteIntOnto(buf, numBlocks, idx, |entry.key| as uint32);
      var idx1: uint64 := idx + 4;
      WriteOnto(buf, numBlocks, idx1, entry.key);
      var idx2: uint64 := idx1 + |entry.key| as uint64;
      WriteIntOnto(buf, numBlocks, idx2, |entry.value| as uint32);
      var idx3: uint64 := idx2 + 4;
      WriteOnto(buf, numBlocks, idx3, entry.value);
      var idx4: uint64 := idx3 + |entry.value| as uint64;
      WriteJournalEntries(buf, numBlocks, idx4, entries, start', len - 1);
    }
  }
  method FillInChecksums(buf: array<byte>, numBlocks: uint64, i: uint64)
    modifies buf
  {
    if i != numBlocks {
      var c: seq<byte> := CRC32_C_Array_Impl.compute_crc32c_padded(buf, 4096 * i as uint32 + 32, 4064);
      NativeArrays.CopySeqIntoArray(c, 0, buf, 4096 * i, 32);
      FillInChecksums(buf, numBlocks, i + 1);
    }
  }
  method MarshallJournalEntries(entries: seq<JournalEntry>, start: uint64, len: uint64, numBlocks: uint64)
      returns (res: seq<byte>)
  {
    var buf: array<byte> := NativeArrays.newArrayFill(numBlocks * 4096, 0);
    WriteHeader(buf, numBlocks, len);
    WriteJournalEntries(buf, numBlocks, 8, entries, start, len);
    FillInChecksums(buf, numBlocks, 0);
    return buf[..];
  }
Dafny program verifier did not attempt verification