  var Length: int  // immutable
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): bool
    reads reads(x0, x1, x2, x3, x4)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): set<object?>
    reads reads(x0, x1, x2, x3, x4)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): bool
    reads reads(x0, x1, x2, x3, x4, x5)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6): bool
    reads reads(x0, x1, x2, x3, x4, x5, x6)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5, x6)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8, x9: T9): bool
    reads reads(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8, x9: T9): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  predicate needToWrite(s: ImplVariables, ref: BT.G.Reference)
    requires s.Ready?
  {
    (ref in s.ephemeralIndirectionTable.graph && ref !in s.ephemeralIndirectionTable.locs) || (s.frozenIndirectionTable.lSome? && ref in s.frozenIndirectionTable.value.graph && ref !in s.frozenIndirectionTable.value.locs)
  }
  method NeedToWrite(s: ImplVariables, ref: BT.G.Reference) returns (b: bool)
    requires s.W() && s.Ready?
    ensures b == needToWrite(s, ref)
  {
    var eph: Option<Entry> := s.ephemeralIndirectionTable.GetEntry(ref);
    if eph.Some? && eph.value.loc.None? {
      return true;
    }
    if s.frozenIndirectionTable.lSome? {
      var fro: Option<Entry> := s.frozenIndirectionTable.value.GetEntry(ref);
      if fro.Some? && fro.value.loc.None? {
        return true;
      }
    }
    return false;
  }
  predicate canEvict(s: ImplVariables, ref: BT.G.Reference)
    requires s.Ready?
    requires ref in s.ephemeralIndirectionTable.graph ==> ref in s.ephemeralIndirectionTable.locs
  {
    true &&
    (ref in s.ephemeralIndirectionTable.graph ==>
      true &&
      BC.OutstandingWrite(ref, s.ephemeralIndirectionTable.locs[ref]) !in s.outstandingBlockWrites.Values)
  }
  method CanEvict(s: ImplVariables, ref: BT.G.Reference) returns (b: bool)
    requires s.W() && s.Ready?
    requires ref in s.ephemeralIndirectionTable.I().graph ==> ref in s.ephemeralIndirectionTable.I().locs
    ensures b == canEvict(s, ref)
  {
    var eph: Option<Entry> := s.ephemeralIndirectionTable.GetEntry(ref);
    if eph.Some? {
      return BC.OutstandingWrite(ref, eph.value.loc.value) !in s.outstandingBlockWrites.Values;
    } else {
      return true;
    }
  }
  method EvictOrDealloc(inout s: ImplVariables, io: DiskIOHandler)
    modifies io
  {
    var ref: Option<Reference> := FindDeallocable(s);
    if ref.Some? {
      Dealloc(inout s, io, ref.value);
    } else {
      var refOpt: Option<uint64> := s.lru.NextOpt();
      if refOpt.Some? {
        var ref: uint64 := refOpt.value;
        var needToWrite: bool := NeedToWrite(s, ref);
        if needToWrite {
          if s.outstandingIndirectionTableWrite.None? {
            TryToWriteBlock(inout s, io, ref);
          } else {
            assert IOModel.noop(s.I(), s.I());
          }
        } else {
          var canEvict: bool := CanEvict(s, ref);
          if canEvict {
            LruModel.LruRemove(s.lru.Queue(), ref);
            s.lru.Remove(ref);
            s.cache.Remove(ref);
            assert BC.Evict(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, StatesInternalOp, ref);
            assert BBC.NextStep(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, StatesInternalOp, BBC.BlockCacheMoveStep(BC.EvictStep(ref)));
            assert IOModel.stepsBC(old_s.I(), s.I(), StatesInternalOp, IIO(io), BC.EvictStep(ref));
          } else {
            assert IOModel.noop(s.I(), s.I());
          }
        }
      } else {
        assert IOModel.noop(s.I(), s.I());
      }
    }
  }
  method PageInNodeReqOrMakeRoom(inout s: ImplVariables, io: DiskIOHandler, ref: BT.G.Reference)
    modifies io
  {
    if s.TotalCacheSize() <= MaxCacheSizeUint64() - 1 {
      PageInNodeReq(inout s, io, ref);
      assert ValidDiskOp(diskOp(IIO(io)));
    } else {
      var c: uint64 := CacheImpl.CacheCount(s.cache);
      if c > 0 {
        EvictOrDealloc(inout s, io);
      } else {
        assert IOModel.noop(s.I(), s.I());
      }
    }
  }
Dafny program verifier did not attempt verification