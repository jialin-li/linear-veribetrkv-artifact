  var Length: int  // immutable
  method IsStrictlySortedPivots(pivots: Pivots.PivotTable) returns (b: bool)
  {
    if |pivots| as uint64 < 2 {
      return true;
    }
    var i: uint64 := 1;
    while i < |pivots| as uint64
    {
      var c: int32 := Pivots.KeyspaceImpl.cmp(pivots[i - 1], pivots[i]);
      if c >= 0 {
        return false;
      }
      i := i + 1;
    }
    return true;
  }
  method KeyValSeqToPivots(vs: seq<V>) returns (result: Option<Pivots.PivotTable>)
  {
    var aresult: array<Pivots.Element> := new Pivots.Element[|vs| as uint64];
    var i: uint64 := 0;
    while i < |vs| as uint64
    {
      if KeyType.MaxLen() < |vs[i].b| as uint64 {
        return None;
      }
      aresult[i] := Marshalling.keyToPivot(vs[i].b, i >= 1);
      i := i + 1;
    }
    return Some(aresult[..i]);
  }
  method valToStrictlySortedPivots(v: V) returns (s: Option<Pivots.PivotTable>)
  {
    var okeys: Option<Pivots.PivotTable> := KeyValSeqToPivots(v.a);
    if okeys.Some? {
      var is_sorted: bool := IsStrictlySortedPivots(okeys.value);
      if is_sorted {
        return okeys;
      }
    }
    return None;
  }
  method ValToPivots(v: V) returns (s: Option<Pivots.PivotTable>)
  {
    if |v.a| >= 2 {
      s := valToStrictlySortedPivots(v);
    } else {
      s := None;
    }
  }
  method ValToBucket(v: V) returns (s: lOption<BucketImpl.MutBucket>)
  {
    var pkv: Option<Pkv> := PackedKVMarshalling.FromVal(v);
    if pkv.Some? && PackedKV.WeightPkv(pkv.value) < 4294967296 {
      var b: MutBucket := BucketImpl.MutBucket.AllocPkv(pkv.value, false);
      s := lSome(b);
    } else {
      s := lNone;
    }
  }
  method ValToBuckets(a: seq<V>) returns (s: lOption<lseq<BucketImpl.MutBucket>>)
  {
    var buckets: lseq<BucketImpl.MutBucket> := lseq_alloc(|a| as uint64);
    var error: bool := false;
    var i: uint64 := 0;
    while i < |a| as uint64
    {
      var obucket: lOption<BucketImpl.MutBucket> := ValToBucket(a[i]);
      match obucket {
        case lSome(bucket) =>
          lseq_give_inout(inout buckets, i, bucket);
          i := i + 1;
        case lNone() =>
          var j: uint64 := 0;
          while j < i as uint64
          {
            var b := lseq_take_inout(inout buckets, j);
            var _ := BucketImpl.FreeMutBucket(b);
            j := j + 1;
          }
          error := true;
          i := |a| as uint64;
      }
    }
    if error {
      lseq_free(buckets);
      s := lNone;
    } else {
      s := lSome(buckets);
    }
  }
  method ValToNode(v: V) returns (s: lOption<Node>)
  {
    var pivots_len: uint64 := |v.t[0 as uint64].a| as uint64;
    var children_len: uint64 := |v.t[1 as uint64].ua| as uint64;
    var buckets_len: uint64 := |v.t[2 as uint64].a| as uint64;
    if 2 <= pivots_len <= MaxNumChildrenUint64() + 1 && (children_len == 0 || children_len == pivots_len - 1) && buckets_len == pivots_len - 1 {
      var pivotsOpt: Option<Pivots.PivotTable> := ValToPivots(v.t[0 as uint64]);
      if pivotsOpt.Some? {
        var pivots: Pivots.PivotTable := pivotsOpt.value;
        var childrenOpt: Option<seq<Reference>> := Marshalling.valToChildren(v.t[1 as uint64]);
        if childrenOpt.Some? {
          var children: seq<Reference> := childrenOpt.value;
          if |v.t[2 as uint64].a| as uint64 <= MaxNumChildrenUint64() {
            var obuckets: lOption<lseq<BucketImpl.MutBucket>> := ValToBuckets(v.t[2 as uint64].a);
            match obuckets {
              case lSome(buckets) =>
                IMM.WeightBucketListLteSize(v.t[2 as uint64], BucketImpl.MutBucket.ILseq(buckets));
                var w: uint64 := BucketImpl.MutBucket.computeWeightOfSeq(buckets);
                if w > MaxTotalBucketWeightUint64() {
                  var _ := BucketImpl.FreeMutBucketSeq(buckets);
                  s := lNone;
                } else {
                  var node := Node(pivots, if |children| as uint64 == 0 then None else childrenOpt, buckets);
                  s := lSome(node);
                }
              case lNone() =>
                s := lNone;
            }
          } else {
            s := lNone;
          }
        } else {
          s := lNone;
        }
      } else {
        s := lNone;
      }
    } else {
      s := lNone;
    }
  }
  method ValToSector(v: V) returns (s: lOption<Sector>)
  {
    if v.c == 0 {
      var sb: Option<Superblock> := Marshalling.valToSuperblock(v.val);
      if sb.Some? {
        s := lSome(SSI.SectorSuperblock(sb.value));
      } else {
        s := lNone;
      }
    } else if v.c == 1 {
      var tableOpt: lOption<IndirectionTable> := IndirectionTable.IndirectionTable.ValToIndirectionTable(v.val);
      if tableOpt.lSome? {
        s := lSome(SSI.SectorIndirectionTable(unwrap_value(tableOpt)));
      } else {
        dispose_lnone(tableOpt);
        s := lNone;
      }
    } else {
      var nodeopt: lOption<Node> := ValToNode(v.val);
      match nodeopt {
        case lSome(node) =>
          s := lSome(SSI.SectorNode(node));
        case lNone() =>
          s := lNone;
      }
    }
  }
  method childrenToVal(children: seq<Reference>) returns (v: V)
  {
    return VUint64Array(children);
  }
  function method pivotToKey(pivots: Pivots.PivotTable, i: uint64): (k: Key)
  {
    if pivots[i].Element? then
      pivots[i].e
    else
      []
  }
  method strictlySortedPivotsToVal(pivots: Pivots.PivotTable) returns (v: V, size: uint64)
  {
    var vs: array<V> := new V[|pivots| as uint64];
    size := 0;
    var i: uint64 := 0;
    while i < |pivots| as uint64
    {
      vs[i] := VByteArray(pivotToKey(pivots, i));
      size := size + 8 + Pivots.PivotSize(pivots[i]);
      i := i + 1;
    }
    v := VArray(vs[..i]);
    size := size + 8;
  }
  method pivotsToVal(pivots: Pivots.PivotTable) returns (v: V, size: uint64)
  {
    v, size := strictlySortedPivotsToVal(pivots);
  }
  method {:fuel SizeOfV, 3} bucketToVal(bucket: BucketImpl.MutBucket) returns (v: V, size: uint64)
  {
    var pkv: PKV.Pkv := bucket.GetPkv();
    v := PackedKVMarshalling.ToVal(pkv);
    size := bucket.weight + 32;
  }
  method bucketsToVal(buckets: lseq<BucketImpl.MutBucket>, end: uint64)
      returns (v: V, size: uint64)
  {
    if end == 0 {
      v := VArray([]);
      size := 8;
    } else {
      var pref: V, pref_size: uint64 := bucketsToVal(buckets, end - 1);
      var bucket: BucketImpl.MutBucket := lseq_peek(buckets, end - 1);
      var bucketVal: V, bucket_size: uint64 := bucketToVal(bucket);
      v := VArray(pref.a + [bucketVal]);
      size := pref_size + bucket_size;
    }
  }
  method {:fuel SizeOfV, 4} nodeToVal(node: Node) returns (v: V, size: uint64)
  {
    var end: uint64 := lseq_length_as_uint64(node.buckets);
    var buckets: V, size_buckets: uint64 := bucketsToVal(node.buckets, end);
    var pivots: V, size_pivots: uint64 := pivotsToVal(node.pivotTable);
    var children: V, size_children: uint64;
    if node.children.Some? {
      children := childrenToVal(node.children.value);
      size_children := 8 + 8 * |node.children.value| as uint64;
    } else {
      children := VUint64Array([]);
      size_children := 8;
    }
    v := VTuple([pivots, children, buckets]);
    size := size_buckets + size_pivots + size_children;
  }
  method {:fuel SizeOfV, 7} superblockToVal(superblock: SectorType.Superblock) returns (v: V)
  {
    v := VTuple([VUint64(superblock.counter), VUint64(superblock.journalStart), VUint64(superblock.journalLen), VUint64(superblock.indirectionTableLoc.addr), VUint64(superblock.indirectionTableLoc.len)]);
  }
  method sectorToVal(sector: SSI.Sector) returns (v: V, size: uint64)
  {
    var w: V, s: uint64 := nodeToVal(sector.node);
    v := VCase(2, w);
    size := s + 8;
  }
  method ParseSector(data: seq<byte>, start: uint64) returns (s: lOption<Sector>)
  {
    var success: bool, v: V, rest_index: uint64 := ParseVal(data, start, Marshalling.SectorGrammar());
    if success {
      s := ValToSector(v);
    } else {
      s := lNone;
    }
  }
  method MarshallIntoFixedSize(val: V, ghost grammar: G, start: uint64, n: uint64)
      returns (data: array<byte>)
  {
    data := new byte[n];
    var computed_size: uint64 := GenericMarshalling.MarshallVal(val, grammar, data, start);
  }
  method ParseCheckedSector(data: seq<byte>) returns (s: lOption<Sector>)
  {
    if |data| as uint64 >= 32 {
      var hash: seq<byte> := CRC32_C_Impl.compute_crc32c_padded(data[32 as uint64..]);
      if hash == data[..32 as uint64] {
        s := ParseSector(data, 32);
      } else {
        s := lNone;
      }
    } else {
      s := lNone;
    }
  }
  method MarshallCheckedSectorIndirectionTable(table: IndirectionTable.IndirectionTable, ghost sector: Sector) returns (data: array?<byte>)
  {
    var w: V, s: uint64 := table.IndirectionTableToVal();
    var v: V := VCase(1, w);
    var computedSize: uint64 := s + 8;
    var size: uint64 := computedSize + 32;
    if size > IndirectionTableBlockSizeUint64() {
      data := null;
    } else {
      data := MarshallIntoFixedSize(v, Marshalling.SectorGrammar(), 32, size);
      var hash: seq<byte> := CRC32_C_Array_Impl.compute_crc32c_padded(data, 32, data.Length as uint32 - 32);
      NativeArrays.CopySeqIntoArray(hash, 0, data, 0, 32);
    }
  }
  method MarshallCheckedSector(sector: Sector) returns (data: array?<byte>)
  {
    if sector.SectorSuperblock? {
      var v0: V := superblockToVal(sector.superblock);
      var v: V := VCase(0, v0);
      data := MarshallIntoFixedSize(v, Marshalling.SectorGrammar(), 32, 4096);
      var hash: seq<byte> := CRC32_C_Array_Impl.compute_crc32c_padded(data, 32, data.Length as uint32 - 32);
      NativeArrays.CopySeqIntoArray(hash, 0, data, 0, 32);
    } else if sector.SectorIndirectionTable? {
      data := MarshallCheckedSectorIndirectionTable(sector.indirectionTable, sector);
    } else {
      var wellmarshalled: bool := sector.node.BucketsWellMarshalled();
      if wellmarshalled {
        var v: V, computedSize: uint64 := sectorToVal(sector);
        var size: uint64 := computedSize + 32;
        data := MarshallIntoFixedSize(v, Marshalling.SectorGrammar(), 32, size);
        var hash: seq<byte> := CRC32_C_Array_Impl.compute_crc32c_padded(data, 32, data.Length as uint32 - 32);
        NativeArrays.CopySeqIntoArray(hash, 0, data, 0, 32);
      } else {
        data := null;
      }
    }
  }
Dafny program verifier did not attempt verification