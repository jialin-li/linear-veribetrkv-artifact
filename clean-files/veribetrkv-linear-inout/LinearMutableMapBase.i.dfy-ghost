  var Length: int  // immutable
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  function method {:opaque} {:fuel 0, 0} lshift(a: uint64, b: uint32): uint64
    requires 0 <= b < 64
  {
    (a as bv64 << b) as uint64
  }
  function method {:opaque} {:fuel 0, 0} rshift(a: uint64, b: uint32): uint64
    requires 0 <= b < 64
  {
    (a as bv64 >> b) as uint64
  }
  function method {:opaque} {:fuel 0, 0} bitnot(a: uint64): uint64
  {
    (a as bv64 ^ 18446744073709551615) as uint64
  }
  function method {:opaque} {:fuel 0, 0} bitxor(a: uint64, b: uint64): uint64
  {
    (a as bv64 ^ b as bv64) as uint64
  }
  function method {:opaque} {:fuel 0, 0} hash64(k: uint64): uint64
  {
    var k0: uint64 := u64add(bitnot(k), lshift(k, 21));
    var k1: uint64 := bitxor(k0, rshift(k0, 24));
    var k2: uint64 := u64add(u64add(k1, lshift(k1, 3)), lshift(k1, 8));
    var k3: uint64 := bitxor(k2, rshift(k2, 14));
    var k4: uint64 := u64add(u64add(k3, lshift(k3, 2)), lshift(k3, 4));
    var k5: uint64 := bitxor(k4, rshift(k4, 28));
    var k6: uint64 := u64add(k5, lshift(k5, 31));
    k6
  }
  predicate ValidSlot(elementsLength: nat, slot: Slot)
  {
    slot.slot < elementsLength
  }
  predicate ValidElements<V>(elements: seq<Item<V>>)
  {
    true &&
    0 < |elements| < 18446744073709551616
  }
  function SlotForKey(elementsLength: nat, key: uint64): (result: Slot)
    requires 0 < elementsLength
    ensures ValidSlot(elementsLength, result)
  {
    ghost var h: uint64 := hash64(key);
    Slot(h as nat % elementsLength)
  }
  function SlotSuccessor(elementsLength: nat, slot: Slot): (nextSlot: Slot)
    requires ValidSlot(elementsLength, slot)
    ensures ValidSlot(elementsLength, nextSlot)
  {
    Slot(if slot.slot == elementsLength - 1 then 0 else slot.slot + 1)
  }
  function KthSlotSuccessor(elementsLength: nat, slot: Slot, k: nat): (nextSlot: Slot)
    requires k >= 0
    requires ValidSlot(elementsLength, slot)
    ensures ValidSlot(elementsLength, nextSlot)
  {
    if k == 0 then
      slot
    else
      SlotSuccessor(elementsLength, KthSlotSuccessor(elementsLength, slot, k - 1))
  }
  lemma {:induction true} KthSlotSuccessorWrapsAround(elementsLength: nat, slot: Slot, k: nat)
    requires 0 <= k < elementsLength
    requires ValidSlot(elementsLength, slot)
    ensures if k < elementsLength - slot.slot then KthSlotSuccessor(elementsLength, slot, k).slot == slot.slot + k else KthSlotSuccessor(elementsLength, slot, k).slot == k - (elementsLength - slot.slot)
    decreases k
  {
  }
  predicate SlotIsEmpty<V>(elements: seq<Item<V>>, slot: Slot)
    requires ValidSlot(|elements|, slot)
  {
    elements[slot.slot].Empty?
  }
  predicate SlotIsEntry<V>(elements: seq<Item<V>>, slot: Slot)
    requires ValidSlot(|elements|, slot)
  {
    elements[slot.slot].Entry?
  }
  predicate SlotIsTombstone<V>(elements: seq<Item<V>>, slot: Slot)
    requires ValidSlot(|elements|, slot)
  {
    elements[slot.slot].Tombstone?
  }
  predicate FilledWithOtherKey<V>(elements: seq<Item<V>>, slot: Slot, excludingKey: uint64)
    requires ValidElements(elements)
    requires ValidSlot(|elements|, slot)
  {
    (SlotIsTombstone(elements, slot) && elements[slot.slot].key != excludingKey) || (SlotIsEntry(elements, slot) && elements[slot.slot].key != excludingKey)
  }
  predicate FilledWithOtherKeys<V>(elements: seq<Item<V>>, start: Slot, count: nat, excludingKey: uint64)
    requires ValidElements(elements)
    requires ValidSlot(|elements|, start)
  {
    true &&
    forall offset: nat :: 
      offset < count ==>
        FilledWithOtherKey(elements, KthSlotSuccessor(|elements|, start, offset), excludingKey)
  }
  predicate FilledWithKey<V>(elements: seq<Item<V>>, slot: Slot, key: uint64)
    requires ValidElements(elements)
    requires ValidSlot(|elements|, slot)
  {
    (SlotIsEntry(elements, slot) || SlotIsTombstone(elements, slot)) &&
    elements[slot.slot].key == key
  }
  predicate FilledWithEntryKey<V>(elements: seq<Item<V>>, slot: Slot, key: uint64)
    requires ValidElements(elements)
    requires ValidSlot(|elements|, slot)
  {
    SlotIsEntry(elements, slot) &&
    elements[slot.slot].key == key
  }
  predicate SlotExplainsKey<V>(elements: seq<Item<V>>, skips: nat, key: uint64)
    requires ValidElements(elements)
  {
    ghost var foundSlot: Slot := KthSlotSuccessor(|elements|, SlotForKey(|elements|, key), skips);
    ValidSlot(|elements|, foundSlot) &&
    FilledWithOtherKeys(elements, SlotForKey(|elements|, key), skips, key) &&
    FilledWithKey(elements, foundSlot, key)
  }
  predicate {:opaque} {:fuel 0, 0} SomeSkipCountExplainsKey<V>(elements: seq<Item<V>>, key: uint64)
    requires ValidElements(elements)
  {
    exists skips: nat :: 
      SlotExplainsKey(elements, skips, key)
  }
  predicate TwoNonEmptyValidSlotsWithSameKey<V>(elements: seq<Item<V>>, slot1: Slot, slot2: Slot)
    requires ValidElements(elements)
  {
    ValidSlot(|elements|, slot1) &&
    ValidSlot(|elements|, slot2) &&
    (SlotIsEntry(elements, slot1) || SlotIsTombstone(elements, slot1)) &&
    (SlotIsEntry(elements, slot2) || SlotIsTombstone(elements, slot2)) &&
    elements[slot1.slot].key == elements[slot2.slot].key
  }
  predicate SameSlot(elementsLength: nat, slot1: Slot, slot2: Slot)
    requires ValidSlot(elementsLength, slot1)
    requires ValidSlot(elementsLength, slot2)
  {
    slot1 == slot2
  }
  predicate CantEquivocateStorageKey<V>(elements: seq<Item<V>>)
    requires ValidElements(elements)
  {
    forall slot1: Slot, slot2: Slot :: 
      TwoNonEmptyValidSlotsWithSameKey(elements, slot1, slot2) ==>
        SameSlot(|elements|, slot1, slot2)
  }
  predicate KeyInSlotIsInContents<V>(elements: seq<Item<V>>, contents: map<uint64, Option<V>>, slot: Slot)
    requires ValidSlot(|elements|, slot)
    requires SlotIsEntry(elements, slot) || SlotIsTombstone(elements, slot)
  {
    true &&
    ghost var key: uint64 := elements[slot.slot].key; true && key in contents
  }
  predicate SeqMatchesContentKeys<V>(elements: seq<Item<V>>, contents: map<uint64, Option<V>>)
    requires ValidElements(elements)
  {
    (forall key: uint64 :: 
      key in contents ==>
        exists skips: nat :: 
          SlotExplainsKey(elements, skips, key)) &&
    (forall slot: Slot :: 
      ValidSlot(|elements|, slot) &&
      (SlotIsEntry(elements, slot) || SlotIsTombstone(elements, slot)) ==>
        KeyInSlotIsInContents(elements, contents, slot)) &&
    CantEquivocateStorageKey(elements)
  }
  predicate EntryInSlotMatchesContents<V>(elements: seq<Item<V>>, slot: Slot, contents: map<uint64, Option<V>>)
    requires ValidSlot(|elements|, slot)
    requires SlotIsEntry(elements, slot)
  {
    true &&
    ghost var item: Item<V> := elements[slot.slot]; item.key in contents && contents[item.key] == Some(item.value)
  }
  predicate TombstoneInSlotMatchesContents<V>(elements: seq<Item<V>>, slot: Slot, contents: map<uint64, Option<V>>)
    requires ValidSlot(|elements|, slot)
    requires SlotIsTombstone(elements, slot)
  {
    true &&
    ghost var item: Item<V> := elements[slot.slot]; item.key in contents && contents[item.key].None?
  }
  predicate EntriesMatchContentValue<V>(elements: seq<Item<V>>, contents: map<uint64, Option<V>>)
    requires ValidElements(elements)
  {
    forall slot: Slot :: 
      ValidSlot(|elements|, slot) &&
      SlotIsEntry(elements, slot) ==>
        EntryInSlotMatchesContents(elements, slot, contents)
  }
  predicate TombstonesMatchContentValue<V>(elements: seq<Item<V>>, contents: map<uint64, Option<V>>)
    requires ValidElements(elements)
  {
    forall slot: Slot :: 
      ValidSlot(|elements|, slot) &&
      SlotIsTombstone(elements, slot) ==>
        TombstoneInSlotMatchesContents(elements, slot, contents)
  }
  function IndexSetThrough<V>(elements: seq<Item<V>>, through: nat): set<int>
    requires through <= |elements|
  {
    set i: int | 0 <= i < through && (elements[i].Entry? || elements[i].Tombstone?)
  }
  function IndexSet<V>(elements: seq<Item<V>>): set<int>
  {
    IndexSetThrough(elements, |elements|)
  }
  function Count1<V>(item: Item<V>): nat
  {
    if item.Entry? || item.Tombstone? then
      1
    else
      0
  }
  function CountFilled<V>(view: seq<Item<V>>): (result: nat)
  {
    if |view| == 0 then
      0
    else
      CountFilled(view[1..]) + Count1(view[0])
  }
  lemma CountFilledMatchesIndexSet<V>(elements: seq<Item<V>>)
    ensures CountFilled(elements) == |IndexSet(elements)|
  {
    ghost var i: nat := 0;
    while i < |elements|
      invariant i <= |elements|
      invariant |IndexSetThrough(elements, i)| == CountFilled(elements[..i])
    {
      ghost var j: int := i + 1;
      CountFilledAdditive(elements[..i], [elements[i]]);
      assert elements[..i] + [elements[i]] == elements[..j];
      if elements[i].Entry? || elements[i].Tombstone? {
        assert IndexSetThrough(elements, j) == IndexSetThrough(elements, i) + {i};
      } else {
        assert IndexSetThrough(elements, j) == IndexSetThrough(elements, i);
      }
      i := j;
    }
    assert elements[..i] == elements;
  }
  lemma IndexSetMatchesContents<V>(elements: seq<Item<V>>, contents: map<uint64, Option<V>>)
    requires ValidElements(elements)
    requires SeqMatchesContentKeys(elements, contents)
    ensures |IndexSet(elements)| == |contents.Keys|
  {
    ghost var relation: iset<(int, uint64)> := iset i: int | i in IndexSet(elements) :: (i, elements[i].key);
    ghost var setA: set<int> := IndexSet(elements);
    ghost var setB: set<uint64> := contents.Keys;
    assert forall a: nat | a in setA :: SlotIsEntry(elements, Slot(a)) || SlotIsTombstone(elements, Slot(a));
    assert forall a1: nat, a2: nat, b: uint64 | a1 in setA && a2 in setA && b in setB && (a1, b) in relation && (a2, b) in relation :: SameSlot(|elements|, Slot(a1), Slot(a2));
    BijectivityImpliesEqualCardinality(IndexSet(elements), contents.Keys, relation);
  }
  lemma {:induction true} CountFilledAdditive<V>(a: seq<Item<V>>, b: seq<Item<V>>)
    ensures CountFilled(a + b) == CountFilled(a) + CountFilled(b)
  {
    if |a| == 0 {
      assert a + b == b;
    } else {
      assert (a + b)[1..] == a[1..] + b;
    }
  }
  function View<V>(elements: seq<Item<V>>, start: nat): (result: seq<Item<V>>)
    requires start < |elements|
    ensures |result| == |elements|
  {
    elements[start..] + elements[..start]
  }
  lemma ViewsHaveConsistentCounts<V>(a: seq<Item<V>>, b: seq<Item<V>>, delta: nat)
    requires delta < |a|
    requires b == View(a, delta)
    ensures CountFilled(a) == CountFilled(b)
  {
    ghost var n: int := |a|;
    assert a == a[..delta] + a[delta..];
    CountFilledAdditive(a[..delta], a[delta..]);
    CountFilledAdditive(b[..n - delta], b[n - delta..]);
    assert b == b[..n - delta] + b[n - delta..];
  }
  function Uint64SlotSuccessor(elementsLength: nat, slot: uint64): (nextSlot: uint64)
    requires elementsLength < 18446744073709551616
    requires ValidSlot(elementsLength, Slot(slot as nat))
    ensures ValidSlot(elementsLength, Slot(nextSlot as nat))
    ensures Slot(nextSlot as nat) == SlotSuccessor(elementsLength, Slot(slot as nat))
  {
    Uint64SlotSuccessorUint64(elementsLength as uint64, slot)
  }
  function method Uint64SlotSuccessorUint64(elementsLength: uint64, slot: uint64): (nextSlot: uint64)
    requires ValidSlot(elementsLength as nat, Slot(slot as nat))
    ensures ValidSlot(elementsLength as nat, Slot(nextSlot as nat))
    ensures Slot(nextSlot as nat) == SlotSuccessor(elementsLength as nat, Slot(slot as nat))
  {
    if slot == elementsLength as uint64 - 1 then
      0
    else
      slot + 1
  }
  function MapFromStorage<V>(elements: seq<Item<V>>): (result: map<uint64, V>)
  {
    if |elements| == 0 then
      map[]
    else
      ghost var item: Item<V> := Last(elements); ghost var dropLastMap: map<uint64, V> := MapFromStorage(DropLast(elements)); if item.Entry? then dropLastMap[item.key := item.value] else dropLastMap
  }
  predicate CantEquivocate<V>(elements: seq<Item<V>>)
  {
    forall slot1: Slot, slot2: Slot :: 
      ValidSlot(|elements|, slot1) &&
      ValidSlot(|elements|, slot2) &&
      elements[slot1.slot].Entry? &&
      elements[slot2.slot].Entry? &&
      elements[slot1.slot].key == elements[slot2.slot].key ==>
        slot1 == slot2
  }
  lemma {:induction true} MapFromStorageProperties<V>(elements: seq<Item<V>>, result: map<uint64, V>)
    requires CantEquivocate(elements)
    requires MapFromStorage(elements) == result
    ensures forall slot: Slot :: ValidSlot(|elements|, slot) && elements[slot.slot].Entry? ==> true && ghost var item: Item<V> := elements[slot.slot]; item.key in result && result[item.key] == item.value
    ensures forall key: uint64 :: key in result ==> exists slot: Slot :: ValidSlot(|elements|, slot) && elements[slot.slot] == Entry(key, result[key])
    ensures forall key: uint64 :: key !in result ==> forall slot: Slot :: ValidSlot(|elements|, slot) && elements[slot.slot].Entry? ==> elements[slot.slot].key != key
  {
    if |elements| == 0 {
    } else if Last(elements).Entry? {
      ghost var item: Item<V> := Last(elements);
      assert elements == DropLast(elements) + [Last(elements)];
      ghost var dropLastMap: map<uint64, V> := MapFromStorage(DropLast(elements));
      MapFromStorageProperties(DropLast(elements), dropLastMap);
      forall slot: Slot | ValidSlot(|elements|, slot) && elements[slot.slot].Entry?
        ensures true && ghost var item: Item<V> := elements[slot.slot]; item.key in result && result[item.key] == item.value
      {
        ghost var slotItem: Item<V> := elements[slot.slot];
        if item.key == elements[slot.slot].key {
          if slot.slot == |elements| - 1 {
            assert slotItem.key in result && result[slotItem.key] == slotItem.value;
          } else {
            ghost var slot: Slot := Slot(|elements| - 1);
            assert ValidSlot(|elements|, slot);
            assert false;
          }
        } else {
          assert slotItem.key in result && result[slotItem.key] == slotItem.value;
        }
      }
      forall key: uint64 | key in result
        ensures exists slot: Slot :: ValidSlot(|elements|, slot) && elements[slot.slot] == Entry(key, result[key])
      {
        if key == item.key {
          ghost var slot: Slot := Slot(|elements| - 1);
          assert ValidSlot(|elements|, slot);
          assert elements[slot.slot] == Entry(key, result[key]);
        } else {
          assert exists slot: Slot :: ValidSlot(|elements|, slot) && elements[slot.slot] == Entry(key, result[key]);
        }
      }
    } else {
    }
  }
  predicate EntryExistsInElements<V>(elements: seq<Item<V>>, i: uint64, key: uint64)
    requires i as int <= |elements|
    requires ValidElements(elements)
  {
    true &&
    exists slot: Slot :: 
      slot.slot < i as int &&
      ValidSlot(|elements|, slot) &&
      FilledWithEntryKey(elements, slot, key)
  }
  lemma {:induction true} ElementsEntryInMap<V>(elements: seq<Item<V>>, item: Item<V>)
    requires item.Entry?
    requires item in elements
    ensures item.key in MapFromStorage(elements)
  {
  }
Dafny program verifier did not attempt verification