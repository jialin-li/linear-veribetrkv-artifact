  var Length: int  // immutable
  method getActionToSplit(s: ImplVariables, stack: seq<BT.G.Reference>, slots: seq<uint64>, i: uint64)
      returns (action: FlushPolicyModel.Action)
  {
    if i == 0 {
      if s.TotalCacheSize() <= MaxCacheSizeUint64() - 1 {
        action := FlushPolicyModel.ActionGrow;
      } else {
        action := FlushPolicyModel.ActionEvict;
      }
    } else {
      var _: Pivots.PivotTable, nodePrevChildren: Option<seq<BT.G.Reference>> := s.cache.GetNodeInfo(stack[i - 1]);
      if |nodePrevChildren.value| as uint64 < MaxNumChildrenUint64() {
        var bucketslen: uint64 := s.cache.GetNodeBucketsLen(stack[i]);
        if bucketslen == 1 {
          action := FlushPolicyModel.ActionRepivot(stack[i]);
        } else {
          if s.TotalCacheSize() <= MaxCacheSizeUint64() - 2 {
            action := FlushPolicyModel.ActionSplit(stack[i - 1], slots[i - 1]);
          } else {
            action := FlushPolicyModel.ActionEvict;
          }
        }
      } else {
        action := getActionToSplit(s, stack, slots, i - 1);
      }
    }
  }
  method {:timeLimitMultiplier 2} getActionToFlush(inout s: ImplVariables, stack: seq<BT.G.Reference>, slots: seq<uint64>)
      returns (action: FlushPolicyModel.Action)
  {
    if |stack| as uint64 == 40 {
      action := FlushPolicyModel.ActionFail;
    } else {
      var ref: NativeTypes.uint64 := stack[|stack| as uint64 - 1];
      var _: Pivots.PivotTable, children: Option<seq<BT.G.Reference>> := s.cache.GetNodeInfo(ref);
      var bucketslen: uint64 := s.cache.GetNodeBucketsLen(ref);
      if children.None? || bucketslen == MaxNumChildrenUint64() {
        action := getActionToSplit(s, stack, slots, |stack| as uint64 - 1);
      } else {
        var bs: (uint64, uint64) := s.cache.NodeBiggestSlot(ref);
        var (slot: uint64, slotWeight: uint64) := bs;
        if bucketslen as uint64 < 8 {
          var childref: NativeTypes.uint64 := children.value[slot];
          var childincache: bool := s.cache.InCache(childref);
          if childincache {
            s.lru.Use(childref);
            var childTotalWeight: uint64 := s.cache.NodeBucketsWeight(childref);
            if childTotalWeight + FlushTriggerWeightUint64() <= MaxTotalBucketWeightUint64() {
              if s.TotalCacheSize() <= MaxCacheSizeUint64() - 1 {
                action := FlushPolicyModel.ActionFlush(ref, slot);
              } else {
                action := FlushPolicyModel.ActionEvict;
              }
            } else {
              action := getActionToFlush(inout s, stack + [childref], slots + [slot]);
            }
          } else {
            if s.TotalCacheSize() <= MaxCacheSizeUint64() - 1 {
              action := FlushPolicyModel.ActionPageIn(childref);
            } else {
              action := FlushPolicyModel.ActionEvict;
            }
          }
        } else {
          action := getActionToSplit(s, stack, slots, |stack| as uint64 - 1);
        }
      }
    }
  }
  method {:timeLimitMultiplier 2} runFlushPolicy(inout s: ImplVariables, io: DiskIOHandler)
    modifies io
  {
    s.lru.Use(BT.G.Root());
    var action: FlushPolicyModel.Action := getActionToFlush(inout s, [BT.G.Root()], []);
    match action {
      case ActionPageIn(ref) =>
        {
          PageInNodeReq(inout s, io, ref);
        }
      case ActionSplit(parentref, slot) =>
        {
          var _, parent_children := s.cache.GetNodeInfo(parentref);
          split(inout s, parentref, parent_children.value[slot], slot);
        }
      case ActionRepivot(ref) =>
        {
          repivotLeaf(inout s, ref);
        }
      case ActionFlush(parentref, slot) =>
        {
          var _, parent_children := s.cache.GetNodeInfo(parentref);
          var childref := parent_children.value[slot];
          flush(inout s, parentref, slot, childref);
        }
      case ActionGrow() =>
        {
          grow(inout s);
        }
      case ActionEvict() =>
        {
          EvictOrDealloc(inout s, io);
        }
      case ActionFail() =>
        {
          print "ActionFail\n";
        }
    }
  }
Dafny program verifier did not attempt verification