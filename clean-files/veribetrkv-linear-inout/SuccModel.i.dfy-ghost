  var Length: int  // immutable
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8, x9: T9): bool
    reads reads(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8, x9: T9): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8): bool
    reads reads(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): bool
    reads reads(x0, x1, x2, x3, x4)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): set<object?>
    reads reads(x0, x1, x2, x3, x4)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6): bool
    reads reads(x0, x1, x2, x3, x4, x5, x6)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5, x6)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): bool
    reads reads(x0, x1, x2, x3, x4, x5)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  function {:opaque} {:fuel 0, 0} getPathInternal(s: BBC.Variables, io: IO, key: Key, acc: seq<Bucket>, start: UI.RangeStart, upTo: Option<Key>, maxToFind: int, ref: BT.G.Reference, counter: uint64, node: Node): (res: (BBC.Variables, IO, Option<UI.SuccResultList>))
    requires BBC.Inv(s)
    requires s.Ready?
    requires io.IOInit?
    requires BT.WFNode(node)
    requires ref in s.cache
    requires ref in s.ephemeralIndirectionTable.graph
    requires node == s.cache[ref]
    requires maxToFind >= 1
    requires BoundedKey(node.pivotTable, key)
    requires forall i: int | 0 <= i < |acc| :: WFBucket(acc[i])
    ensures var (s': BC.Variables, io: IO, sr: Option<UI.SuccResultList>) := res; s'.Ready? && s'.cache == s.cache
    decreases counter, 0
  {
    ghost var r: int := Route(node.pivotTable, key);
    ghost var bucket: Bucket := node.buckets[r];
    ghost var acc': seq<Bucket> := acc + [bucket];
    ghost var pivot: Keyspace.Element := node.pivotTable[r + 1];
    ghost var upTo': Option<Key> := if pivot.Max_Element? then upTo else ghost var ub: Key := GetKey(node.pivotTable, r + 1); if upTo.Some? then ghost var k: Key := if lt(upTo.value, ub) then upTo.value else ub; Some(k) else Some(ub);
    if node.children.Some? then
      if counter == 0 then
        (s, io, None)
      else
        lemmaChildInGraph(s, ref, node.children.value[r]); getPath(s, io, key, acc', start, upTo', maxToFind, node.children.value[r], counter - 1)
    else
      ghost var res: UI.SuccResultList := BucketSuccessorLoopModel.GetSuccessorInBucketStack(acc', maxToFind, start, upTo'); (s, io, Some(res))
  }
  function {:opaque} {:fuel 0, 0} getPath(s: BBC.Variables, io: IO, key: Key, acc: seq<Bucket>, start: UI.RangeStart, upTo: Option<Key>, maxToFind: int, ref: BT.G.Reference, counter: uint64): (res: (BBC.Variables, IO, Option<UI.SuccResultList>))
    requires BBC.Inv(s)
    requires s.Ready?
    requires io.IOInit?
    requires maxToFind >= 1
    requires ref in s.ephemeralIndirectionTable.graph
    requires forall i: int | 0 <= i < |acc| :: WFBucket(acc[i])
    ensures var (s': BC.Variables, io: IO, sr: Option<UI.SuccResultList>) := res; s'.Ready? && s'.cache == s.cache
    decreases counter, 1
  {
    if ref in s.cache then
      ghost var node: G.Node := s.cache[ref];
      if BoundedKey(node.pivotTable, key) then
        var (s0: BBC.Variables, io': IO, pr: Option<UI.SuccResultList>) := getPathInternal(s, io, key, acc, start, upTo, maxToFind, ref, counter, node);
        ghost var s': BC.Variables := s0;
        (s', io', pr)
      else
        (s, io, None)
    else if s.totalCacheSize() <= MaxCacheSize() - 1 then
      var (s': BBC.Variables, io': IO) := PageInNodeReq(s, io, ref);
      (s', io', None)
    else
      (s, io, None)
  }
  function {:opaque} {:fuel 0, 0} doSucc(s: BBC.Variables, io: IO, start: UI.RangeStart, maxToFind: int): (res: (BBC.Variables, IO, Option<UI.SuccResultList>))
    requires BBC.Inv(s)
    requires io.IOInit?
    requires s.Ready?
    requires maxToFind >= 1
  {
    ghost var startKey: seq<NativeTypes.byte> := if start.NegativeInf? then [] else start.key;
    getPath(s, io, startKey, [], start, None, maxToFind, BT.G.Root(), 40)
  }
  predicate LookupBucketsProps(lookup: PBS.Lookup, buckets: seq<Bucket>, upTo: Option<Key>, startKey: Key)
  {
    PBS.WFLookupForKey(lookup, startKey) &&
    upTo == PBS.LookupUpperBound(lookup, startKey) &&
    Last(lookup).node.children.None? &&
    |lookup| == |buckets| &&
    (forall i: int | 0 <= i < |lookup| :: 
      BoundedKey(lookup[i].node.pivotTable, startKey)) &&
    forall i: int | 0 <= i < |lookup| :: 
      buckets[i] == lookup[i].node.buckets[Route(lookup[i].node.pivotTable, startKey)]
  }
  lemma SatisfiesSuccBetreeStep(s: BBC.Variables, io: IO, start: UI.RangeStart, res: UI.SuccResultList, buckets: seq<Bucket>, lookup: PBS.Lookup, maxToFind: int, startKey: Key, upTo: Option<Key>)
    requires BBC.Inv(s) && s.Ready?
    requires io.IOInit?
    requires maxToFind >= 1
    requires LookupBucketsProps(lookup, buckets, upTo, startKey)
    requires forall i: int | 0 <= i < |lookup| :: lookup[i].ref in s.ephemeralIndirectionTable.graph
    requires forall i: int | 0 <= i < |lookup| :: MapsTo(s.cache, lookup[i].ref, lookup[i].node)
    requires upTo.Some? ==> lt(startKey, upTo.value)
    requires startKey == if start.NegativeInf? then [] else start.key
    requires res == BucketSuccessorLoopModel.GetSuccessorInBucketStack(buckets, maxToFind, start, upTo)
    ensures ValidDiskOp(diskOp(io))
    ensures BBC.Next(s, s, IDiskOp(diskOp(io)).bdop, AdvanceOp(UI.SuccOp(start, res.results, res.end), false))
  {
    if BucketListWellMarshalled(buckets) {
      BucketSuccessorLoopModel.GetSuccessorInBucketStackResult(buckets, maxToFind, start, upTo);
    }
    ghost var succStep: SuccQuery := BT.SuccQuery(start, res.results, res.end, buckets, lookup);
    assert BT.ValidSuccQuery(succStep);
    ghost var step: BetreeStep := BT.BetreeSuccQuery(succStep);
    assert BBC.BetreeMove(s, s, IDiskOp(diskOp(io)).bdop, AdvanceOp(UI.SuccOp(start, res.results, res.end), false), step);
    assert stepsBetree(s, s, AdvanceOp(UI.SuccOp(start, res.results, res.end), false), step);
  }
  lemma lemmaGetPathResult(s: BBC.Variables, io: IO, startKey: Key, acc: seq<Bucket>, lookup: PBS.Lookup, start: UI.RangeStart, upTo: Option<Key>, maxToFind: int, ref: BT.G.Reference, counter: uint64)
    requires BBC.Inv(s) && s.Ready?
    requires io.IOInit?
    requires maxToFind >= 1
    requires forall i: int | 0 <= i < |acc| :: WFBucket(acc[i])
    requires ref in s.ephemeralIndirectionTable.graph
    requires |lookup| > 0 ==> PBS.WFLookupForKey(lookup, startKey)
    requires |lookup| > 0 ==> Last(lookup).node.children.Some?
    requires |lookup| > 0 ==> ref == Last(lookup).node.children.value[Route(Last(lookup).node.pivotTable, startKey)]
    requires |lookup| == 0 ==> ref == BT.G.Root()
    requires upTo == PBS.LookupUpperBound(lookup, startKey)
    requires |lookup| == |acc|
    requires forall i: int | 0 <= i < |lookup| :: acc[i] == lookup[i].node.buckets[Route(lookup[i].node.pivotTable, startKey)]
    requires forall i: int | 0 <= i < |lookup| :: lookup[i].ref in s.ephemeralIndirectionTable.graph
    requires forall i: int | 0 <= i < |lookup| :: lookup[i].ref in s.cache && lookup[i].node == s.cache[lookup[i].ref]
    requires upTo.Some? ==> lt(startKey, upTo.value)
    requires startKey == if start.NegativeInf? then [] else start.key
    ensures var (s': BBC.Variables, io': IO, res: Option<UI.SuccResultList>) := getPath(s, io, startKey, acc, start, upTo, maxToFind, ref, counter); ValidDiskOp(diskOp(io')) && IDiskOp(diskOp(io')).jdop.NoDiskOp? && (res.Some? ==> BBC.Next(s, s', IDiskOp(diskOp(io')).bdop, AdvanceOp(UI.SuccOp(start, res.value.results, res.value.end), false))) && (res.None? ==> betree_next_dop(s, s', IDiskOp(diskOp(io')).bdop))
    decreases counter
  {
    reveal_getPath();
    reveal_getPathInternal();
    if ref in s.cache {
      ghost var node: G.Node := s.cache[ref];
      if BoundedKey(node.pivotTable, startKey) {
        ghost var r: int := Route(node.pivotTable, startKey);
        ghost var bucket: Bucket := node.buckets[r];
        ghost var acc1: seq<Bucket> := acc + [bucket];
        ghost var lookup1: seq<Layer> := lookup + [BT.G.ReadOp(ref, node)];
        forall idx: int | PBS.ValidLayerIndex(lookup1, idx) && idx < |lookup1| - 1
          ensures PBS.LookupFollowsChildRefAtLayer(startKey, lookup1, idx)
        {
          if idx == |lookup1| - 2 {
            assert PBS.LookupFollowsChildRefAtLayer(startKey, lookup1, idx);
          } else {
            assert PBS.LookupFollowsChildRefAtLayer(startKey, lookup, idx);
            assert PBS.LookupFollowsChildRefAtLayer(startKey, lookup1, idx);
          }
        }
        ghost var pivot: Keyspace.Element := node.pivotTable[r + 1];
        ghost var upTo': Option<Key> := if pivot.Max_Element? then upTo else ghost var ub: Key := GetKey(node.pivotTable, r + 1); if upTo.Some? then ghost var k: Key := if lt(upTo.value, ub) then upTo.value else ub; Some(k) else Some(ub);
        assert upTo'.Some? ==> lt(startKey, upTo'.value);
        PBS.reveal_LookupUpperBound();
        if node.children.Some? {
          if counter == 0 {
            assert noop(s, s);
          } else {
            lemmaChildInGraph(s, ref, node.children.value[r]);
            lemmaGetPathResult(s, io, startKey, acc1, lookup1, start, upTo', maxToFind, node.children.value[r], counter - 1);
          }
        } else {
          ghost var res: UI.SuccResultList := BucketSuccessorLoopModel.GetSuccessorInBucketStack(acc1, maxToFind, start, upTo');
          SatisfiesSuccBetreeStep(s, io, start, res, acc1, lookup1, maxToFind, startKey, upTo');
        }
      } else {
        assert noop(s, s);
      }
    } else {
      if s.totalCacheSize() <= MaxCacheSize() - 1 {
        assert ref in s.ephemeralIndirectionTable.graph;
        assert ref in s.ephemeralIndirectionTable.locs;
        PageInNodeReqCorrect(s, io, ref);
      } else {
        assert noop(s, s);
      }
    }
  }
Dafny program verifier did not attempt verification