  var Length: int  // immutable
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): bool
    reads reads(x0, x1, x2, x3, x4)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): set<object?>
    reads reads(x0, x1, x2, x3, x4)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8, x9: T9): bool
    reads reads(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8, x9: T9): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): bool
    reads reads(x0, x1, x2, x3, x4, x5)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  static method Alloc(pivotTable: Pivots.PivotTable, children: Option<seq<BT.G.Reference>>, buckets: lseq<BucketImpl.MutBucket>)
      returns (node: Node)
    requires MutBucket.InvLseq(buckets)
    ensures node.pivotTable == pivotTable
    ensures node.children == children
    ensures node.buckets == buckets
    ensures node.Inv()
  {
    node := Node(pivotTable, children, buckets);
  }
  predicate Inv()
  {
    MutBucket.InvLseq(buckets)
  }
  function I(): BT.G.Node
    requires Inv()
  {
    BT.G.Node(pivotTable, children, BucketImpl.MutBucket.ILseq(buckets))
  }
  static method EmptyNode() returns (node: Node)
    ensures node.Inv()
    ensures node.I() == PivotBetree.EmptyNode()
    ensures BT.WFNode(node.I())
  {
    var mutbucket: MutBucket := MutBucket.Alloc();
    var buckets: lseq<BucketImpl.MutBucket> := lseq_alloc(1);
    lseq_give_inout(inout buckets, 0, mutbucket);
    node := Node(Pivots.InitPivotTable(), None, buckets);
    assert node.I().buckets == [EmptyBucket()];
    WeightBucketListOneEmpty();
  }
  method BoundedBucket(pivots: Pivots.PivotTable, slot: uint64) returns (result: bool)
    requires Inv()
    requires |pivots| < 4611686018427387904
    requires Pivots.WFPivots(pivots)
    requires slot as nat < operator'cardinality?lseq(buckets)
    ensures result == Pivots.BoundedKeySeq(pivots, operator'subscript?lseq(buckets, slot as nat).I().keys)
  {
    var pkv: PKV.Pkv := lseq_peek(buckets, slot).GetPkv();
    ghost var keys: seq<Key> := PKV.IKeys(pkv.keys);
    assert operator'subscript?lseq(buckets, slot as nat).I().keys == keys;
    var bounded: bool := true;
    var i: uint64 := 0 as uint64;
    var len: uint64 := PKV.NumKVPairs(pkv);
    while i < len && bounded
      invariant 0 <= i <= len
      invariant bounded == Pivots.BoundedKeySeq(pivots, keys[..i])
    {
      var key: Key := PKV.GetKey(pkv, i);
      assert key == keys[i];
      bounded := Pivots.ComputeBoundedKey(pivots, key);
      i := i + 1;
    }
    return bounded;
  }
  method BucketWellMarshalled(slot: uint64) returns (result: bool)
    requires Inv()
    requires slot as nat < operator'cardinality?lseq(buckets)
    ensures result == BucketsLib.BucketWellMarshalled(operator'subscript?lseq(buckets, slot as nat).I())
  {
    result := lseq_peek(buckets, slot).WellMarshalled();
  }
  method BucketsWellMarshalled() returns (result: bool)
    requires Inv()
    requires operator'cardinality?lseq(buckets) < Uint64UpperBound()
    ensures result == BucketsLib.BucketListWellMarshalled(MutBucket.ILseq(buckets))
  {
    var i: uint64 := 0;
    while i < lseq_length_raw(buckets)
      invariant i as nat <= operator'cardinality?lseq(buckets)
      invariant BucketListWellMarshalled(MutBucket.ISeq(lseqs(buckets)[..i]))
    {
      var bwm: bool := lseq_peek(buckets, i).WellMarshalled();
      if !bwm {
        return false;
      }
      assert lseqs(buckets)[..i + 1] == lseqs(buckets)[..i] + [operator'subscript?lseq(buckets, i as nat)];
      i := i + 1;
    }
    assert lseqs(buckets) == lseqs(buckets)[..i];
    return true;
  }
  method UpdateSlot(slot: uint64, bucket: BucketImpl.MutBucket, childref: BT.G.Reference)
    requires old_self.Inv()
    requires bucket.Inv()
    requires old_self.children.Some?
    requires 0 <= slot as int < |old_self.children.value|
    requires 0 <= slot as int < operator'cardinality?lseq(old_self.buckets)
    requires slot as int + 1 < 18446744073709551616
    ensures self.Inv()
    ensures self.I() == BT.G.Node(old_self.I().pivotTable, Some(old_self.I().children.value[slot as int := childref]), old_self.I().buckets[slot as int := bucket.bucket])
  {
    var replaced: BucketImpl.MutBucket := lseq_swap_inout(inout self.buckets, slot, bucket);
    inout self.children := Some(SeqIndexUpdate(self.children.value, slot, childref));
    var _: () := FreeMutBucket(replaced);
    assert self.Inv();
  }
  method SplitParent(slot: uint64, pivot: Key, left_childref: BT.G.Reference, right_childref: BT.G.Reference)
    requires old_self.Inv()
    requires BT.WFNode(old_self.I())
    requires old_self.children.Some?
    requires 0 <= slot as int < |old_self.children.value|
    requires 0 <= slot as int < operator'cardinality?lseq(old_self.buckets)
    ensures self.Inv()
    ensures self.I() == BT.SplitParent(old_self.I(), pivot, slot as int, left_childref, right_childref)
  {
    ghost var b: Node := BT.SplitParent(self.I(), pivot, slot as int, left_childref, right_childref);
    inout self.pivotTable := Sequences.Insert(self.pivotTable, Pivots.Keyspace.Element(pivot), slot + 1);
    MutBucket.SplitOneInList(inout self.buckets, slot, pivot);
    assert MutBucket.ILseq(self.buckets) == SplitBucketInList(old_self.I().buckets, slot as int, pivot);
    var childrenReplaced: seq<BT.G.Reference> := Replace1with2(self.children.value, left_childref, right_childref, slot);
    inout self.children := Some(childrenReplaced);
    ghost var a: BT.G.Node := self.I();
    assert a == b;
  }
  method CutoffNodeAndKeepLeft(pivot: Key) returns (node: Node)
    requires Inv()
    requires BT.WFNode(I())
    requires Pivots.ValidLeftCutOffKey(pivotTable, pivot)
    ensures node.Inv()
    ensures node.I() == BT.CutoffNodeAndKeepLeft(I(), pivot)
  {
    BT.reveal_CutoffNodeAndKeepLeft();
    var cLeft: uint64 := Pivots.ComputeCutoffForLeft(this.pivotTable, pivot);
    var leftPivots: PivotTable := Pivots.ComputeSplitLeft(this.pivotTable, pivot, cLeft);
    var leftChildren: Option<seq<BT.G.Reference>> := if this.children.Some? then Some(this.children.value[..cLeft + 1]) else None;
    WeightBucketLeBucketList(MutBucket.ILseq(this.buckets), cLeft as int);
    var splitBucket: MutBucket := lseq_peek(buckets, cLeft).SplitLeft(pivot);
    var slice: lseq<MutBucket> := MutBucket.CloneSeq(this.buckets, 0, cLeft);
    var leftBuckets: lseq<MutBucket> := InsertLSeq(slice, splitBucket, cLeft);
    node := Node(leftPivots, leftChildren, leftBuckets);
  }
  method CutoffNodeAndKeepRight(pivot: Key) returns (node: Node)
    requires Inv()
    requires BT.WFNode(I())
    requires Pivots.BoundedKey(pivotTable, pivot)
    ensures node.Inv()
    ensures node.I() == BT.CutoffNodeAndKeepRight(I(), pivot)
  {
    BT.reveal_CutoffNodeAndKeepRight();
    var cRight: uint64 := Pivots.ComputeCutoffForRight(this.pivotTable, pivot);
    var rightPivots: PivotTable := Pivots.ComputeSplitRight(this.pivotTable, pivot, cRight);
    var rightChildren: Option<seq<BT.G.Reference>> := if this.children.Some? then Some(this.children.value[cRight..]) else None;
    WeightBucketLeBucketList(MutBucket.ILseq(this.buckets), cRight as int);
    var splitBucket: MutBucket := lseq_peek(buckets, cRight).SplitRight(pivot);
    var slice: lseq<MutBucket> := MutBucket.CloneSeq(buckets, cRight + 1, lseq_length_raw(buckets));
    var rightBuckets: lseq<MutBucket> := InsertLSeq(slice, splitBucket, 0);
    node := Node(rightPivots, rightChildren, rightBuckets);
    assert node.I().buckets == BT.CutoffNodeAndKeepRight(I(), pivot).buckets;
    assert node.I().children == BT.CutoffNodeAndKeepRight(I(), pivot).children;
    assert node.I().pivotTable == BT.CutoffNodeAndKeepRight(I(), pivot).pivotTable;
  }
  method CutoffNode(lbound: Key, rbound: Option<Key>) returns (node: Node)
    requires Inv()
    requires BT.WFNode(I())
    requires BT.ValidSplitKey(I(), lbound, rbound)
    ensures node.Inv()
    ensures node.I() == BT.CutoffNode(I(), lbound, rbound)
  {
    BT.reveal_CutoffNode();
    match rbound {
      case None() =>
        {
          node := CutoffNodeAndKeepRight(lbound);
        }
      case Some(rbound) =>
        {
          var node1 := CutoffNodeAndKeepLeft(rbound);
          node := node1.CutoffNodeAndKeepRight(lbound);
          var _ := FreeNode(node1);
        }
    }
  }
  method SplitChildLeft(num_children_left: uint64) returns (node: Node)
    requires Inv()
    requires |pivotTable| < Uint64UpperBound()
    requires 0 <= num_children_left as int - 1 <= |pivotTable| - 2
    requires children.Some? ==> 0 <= num_children_left as int <= |children.value|
    requires 0 <= num_children_left as int <= operator'cardinality?lseq(buckets)
    ensures node.Inv()
    ensures node.I() == BT.SplitChildLeft(I(), num_children_left as int)
  {
    var slice: lseq<MutBucket> := MutBucket.CloneSeq(buckets, 0, num_children_left);
    node := Node(pivotTable[..num_children_left + 1], if children.Some? then Some(children.value[..num_children_left]) else None, slice);
  }
  method SplitChildRight(num_children_left: uint64) returns (node: Node)
    requires Inv()
    requires 0 <= num_children_left as int <= |pivotTable| - 1
    requires children.Some? ==> 0 <= num_children_left as int <= |children.value|
    requires 0 <= num_children_left as int <= operator'cardinality?lseq(buckets)
    ensures node.Inv()
    ensures node.I() == BT.SplitChildRight(I(), num_children_left as int)
  {
    var slice: lseq<MutBucket> := MutBucket.CloneSeq(buckets, num_children_left, lseq_length_raw(buckets));
    node := Node(pivotTable[num_children_left..], if children.Some? then Some(children.value[num_children_left..]) else None, slice);
  }
  method InsertKeyValue(key: Key, msg: Message)
    requires old_self.Inv()
    requires BT.WFNode(old_self.I())
    requires Pivots.BoundedKey(old_self.pivotTable, key)
    requires WeightBucketList(MutBucket.ILseq(buckets)) + WeightKey(key) + WeightMessage(msg) < 18446744073709551616
    ensures self.Inv()
    ensures self.I() == BT.NodeInsertKeyValue(old_self.I(), key, msg)
  {
    BT.reveal_NodeInsertKeyValue();
    var r: uint64 := Pivots.ComputeRoute(self.pivotTable, key);
    WeightBucketLeBucketList(MutBucket.ILseq(self.buckets), r as int);
    var b: BucketImpl.MutBucket := lseq_take_inout(inout self.buckets, r);
    b.Insert(key, msg);
    lseq_give_inout(inout self.buckets, r, b);
    forall i: int | 0 <= i < operator'cardinality?lseq(self.buckets)
      ensures operator'subscript?lseq(self.buckets, i).Inv()
      ensures i != r as int ==> operator'subscript?lseq(self.buckets, i).bucket == operator'subscript?lseq(old_self.buckets, i).bucket
    {
    }
    assert self.Inv();
    assert self.I().buckets == BT.NodeInsertKeyValue(old_self.I(), key, msg).buckets;
  }
  function method FreeNode(node: Node): ()
    requires node.Inv()
  {
    var Node(_: Pivots.PivotTable, _: Option<seq<BT.G.Reference>>, buckets: lseq<BucketImpl.MutBucket>) := node;
    FreeMutBucketSeq(buckets)
  }
Dafny program verifier did not attempt verification