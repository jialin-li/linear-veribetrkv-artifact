  var Length: int  // immutable
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  predicate ElementIsKey(e: Element)
  {
    e.Element? &&
    |e.e| <= KeyType.MaxLen() as nat
  }
  predicate ElementsAreKeys(pt: PivotTable)
  {
    true &&
    forall i: int | 0 <= i < |pt| && pt[i].Element? :: 
      ElementIsKey(pt[i])
  }
  function KeyToElement(key: Key): Element
  {
    Keyspace.Element(key)
  }
  function KeysToElements(keys: seq<Key>): (elements: seq<Element>)
    ensures |keys| == |elements|
  {
    seq(|keys|, (i: int) requires 0 <= i < |keys| => Keyspace.Element(keys[i]))
  }
  predicate WFPivots(pt: PivotTable)
  {
    Keyspace.IsStrictlySorted(pt) &&
    (forall i: int | 0 <= i < NumBuckets(pt) :: 
      pt[i].Element?) &&
    ElementsAreKeys(pt) &&
    |pt| >= 2
  }
  predicate ContainsAllKeys(pt: PivotTable)
  {
    WFPivots(pt) &&
    pt[0] == Keyspace.Element([]) &&
    pt[|pt| - 1] == Keyspace.Max_Element
  }
  method ComputeContainsAllKeys(pt: PivotTable) returns (b: bool)
    requires WFPivots(pt)
    requires |pt| < 4611686018427387904
    ensures b == ContainsAllKeys(pt)
  {
    var len: uint64 := |pt| as uint64;
    var b1: int32 := KeyspaceImpl.cmp(pt[0], Keyspace.Element([]));
    var b2: int32 := KeyspaceImpl.cmp(pt[len - 1], Keyspace.Max_Element);
    return b1 == 0 && b2 == 0;
  }
  predicate BoundedKey(pt: PivotTable, key: Key)
    requires WFPivots(pt)
  {
    Keyspace.lte(pt[0], KeyToElement(key)) &&
    Keyspace.lt(KeyToElement(key), pt[|pt| - 1])
  }
  predicate ValidLeftCutOffKey(pt: PivotTable, key: Key)
    requires WFPivots(pt)
  {
    Keyspace.lt(pt[0], KeyToElement(key)) &&
    Keyspace.lte(KeyToElement(key), pt[|pt| - 1])
  }
  method ComputeBoundedKey(pt: PivotTable, key: Key) returns (b: bool)
    requires |pt| < 4611686018427387904
    requires WFPivots(pt)
    ensures b == BoundedKey(pt, key)
  {
    var pivot: Element := Keyspace.Element(key);
    var c1: int32 := KeyspaceImpl.cmp(pt[0], pivot);
    var c2: int32 := KeyspaceImpl.cmp(pivot, pt[|pt| as uint64 - 1]);
    return c1 <= 0 && c2 < 0;
  }
  method ComputeValidLeftCutOffKey(pt: PivotTable, key: Key) returns (b: bool)
    requires |pt| < 4611686018427387904
    requires WFPivots(pt)
    ensures b == ValidLeftCutOffKey(pt, key)
  {
    var pivot: Element := Keyspace.Element(key);
    var c1: int32 := KeyspaceImpl.cmp(pt[0], pivot);
    var c2: int32 := KeyspaceImpl.cmp(pivot, pt[|pt| as uint64 - 1]);
    return c1 < 0 && c2 <= 0;
  }
  predicate BoundedKeySeq(pt: PivotTable, keys: seq<Key>)
    requires WFPivots(pt)
  {
    forall k: Key | k in keys :: 
      BoundedKey(pt, k)
  }
  function NumBuckets(pt: PivotTable): int
  {
    |pt| - 1
  }
  function method PivotSize(e: Element): (n: uint64)
    requires e.Element? ==> ElementIsKey(e)
  {
    if e.Element? then
      |e.e| as uint64
    else
      0
  }
  function Route(pt: PivotTable, key: Key): (i: int)
    requires WFPivots(pt)
    requires BoundedKey(pt, key)
    ensures 0 <= i < NumBuckets(pt)
  {
    Keyspace.LargestLte(pt, KeyToElement(key))
  }
  method ComputeRoute(pt: PivotTable, key: Key) returns (i: uint64)
    requires |pt| < 4611686018427387904
    requires WFPivots(pt)
    requires BoundedKey(pt, key)
    ensures i as int == Route(pt, key)
  {
    var j: int64 := KeyspaceImpl.ComputeLargestLte(pt, Keyspace.Element(key));
    i := j as uint64;
  }
  lemma RouteIs(pt: PivotTable, key: Key, idx: int)
    requires WFPivots(pt)
    requires 0 <= idx < NumBuckets(pt)
    requires Keyspace.lte(pt[idx], KeyToElement(key))
    requires Keyspace.lt(KeyToElement(key), pt[idx + 1])
    ensures BoundedKey(pt, key)
    ensures Route(pt, key) == idx
  {
    Keyspace.reveal_IsStrictlySorted();
  }
  function method InitPivotTable(): (pt: PivotTable)
    ensures WFPivots(pt)
  {
    var pt: seq<Element> := [Keyspace.Element([]), Keyspace.Max_Element];
    Keyspace.reveal_IsStrictlySorted();
    pt
  }
  function GetKey(pt: PivotTable, idx: int): (k: Key)
    requires WFPivots(pt)
    requires 0 <= idx < |pt|
    requires pt[idx].Element?
    ensures KeyToElement(k) == pt[idx]
  {
    ghost var k: Base_Order.Element := pt[idx].e;
    k
  }
  method ComputeGetKey(pt: PivotTable, idx: uint64) returns (k: Key)
    requires |pt| < 4611686018427387904
    requires WFPivots(pt)
    requires 0 <= idx as int < |pt|
    requires pt[idx].Element?
    ensures GetKey(pt, idx as int) == k
    ensures KeyToElement(k) == pt[idx as int]
  {
    k := pt[idx].e;
  }
  lemma PivotIsBoundedKey(pt: PivotTable, idx: int)
    requires WFPivots(pt)
    requires 0 <= idx < NumBuckets(pt)
    ensures BoundedKey(pt, pt[idx].e)
  {
    Keyspace.reveal_IsSorted();
    Keyspace.IsStrictlySortedImpliesLt(pt, idx, |pt| - 1);
  }
  lemma GetKeyInBucket(pt: PivotTable, idx: int) returns (key: Key)
    requires WFPivots(pt)
    requires 0 <= idx < NumBuckets(pt)
    ensures BoundedKey(pt, key)
    ensures Route(pt, key) == idx
  {
    PivotIsBoundedKey(pt, idx);
    Keyspace.IsStrictlySortedImpliesLt(pt, idx, idx + 1);
    RouteIs(pt, pt[idx].e, idx);
    return pt[idx].e;
  }
  lemma WFPivotsRemoved(pt: PivotTable, idx: int)
    requires WFPivots(pt)
    requires 0 <= idx < |pt|
    requires |pt| > 2
    ensures WFPivots(remove(pt, idx))
  {
    Keyspace.reveal_IsStrictlySorted();
  }
  predicate PivotInsertable(pt: PivotTable, idx: int, key: Key)
    requires WFPivots(pt)
  {
    0 <= idx <= |pt| &&
    (idx == 0 ==>
      Keyspace.lt(KeyToElement(key), pt[0])) &&
    (idx == |pt| ==>
      Keyspace.lt(pt[|pt| - 1], KeyToElement(key))) &&
    (idx > 0 &&
    idx < |pt| ==>
      Keyspace.lt(pt[idx - 1], KeyToElement(key)) &&
      Keyspace.lt(KeyToElement(key), pt[idx])) &&
    (BoundedKey(pt, key) ==>
      Route(pt, key) + 1 == idx)
  }
  method ComputePivotInsertable(pt: PivotTable, idx: uint64, key: Key)
      returns (b: bool)
    requires WFPivots(pt)
    requires |pt| < 4611686018427387904
    ensures b == PivotInsertable(pt, idx as int, key)
  {
    var len: uint64 := |pt| as uint64;
    if idx > len {
      return false;
    }
    var pivot: Element := Keyspace.Element(key);
    if idx == 0 {
      var c: int32 := KeyspaceImpl.cmp(pivot, pt[0]);
      if c >= 0 {
        return false;
      }
    }
    if idx == len {
      var c: int32 := KeyspaceImpl.cmp(pt[len - 1], pivot);
      if c >= 0 {
        return false;
      }
    }
    if idx > 0 && idx < len {
      var c1: int32 := KeyspaceImpl.cmp(pt[idx - 1], pivot);
      var c2: int32 := KeyspaceImpl.cmp(pivot, pt[idx]);
      if c1 >= 0 || c2 >= 0 {
        return false;
      }
    }
    var bounded: bool := ComputeBoundedKey(pt, key);
    if bounded {
      var r: uint64 := ComputeRoute(pt, key);
      if r + 1 != idx {
        return false;
      }
    }
    return true;
  }
  function InsertPivot(pt: PivotTable, idx: int, key: Key): PivotTable
    requires WFPivots(pt)
    requires PivotInsertable(pt, idx, key)
  {
    insert(pt, KeyToElement(key), idx)
  }
  lemma WFPivotsInsert(pt: PivotTable, idx: int, key: Key)
    requires WFPivots(pt)
    requires PivotInsertable(pt, idx, key)
    ensures WFPivots(InsertPivot(pt, idx, key))
  {
    assert key == KeyToElement(key).e;
    Keyspace.reveal_IsStrictlySorted();
    Sequences.reveal_insert();
  }
  lemma WFSlice(pt: PivotTable, i: int, j: int)
    requires WFPivots(pt)
    requires 0 <= i <= j <= |pt|
    requires j - i > 1
    ensures WFPivots(pt[i .. j])
  {
    Keyspace.reveal_IsStrictlySorted();
  }
  lemma WFSuffix(pt: PivotTable, i: int)
    requires WFPivots(pt)
    requires 0 <= i <= |pt|
    requires |pt| - i > 1
    ensures WFPivots(pt[i..])
  {
    WFSlice(pt, i, |pt|);
    assert pt[i..] == pt[i .. |pt|];
  }
  lemma WFConcat3(left: PivotTable, key: Key, right: PivotTable)
    requires WFPivots(left)
    requires WFPivots(right)
    requires Last(left) == KeyToElement(key)
    requires right[0] == KeyToElement(key)
    ensures WFPivots(concat3(left[..|left| - 1], KeyToElement(key), right[1..]))
  {
    Keyspace.reveal_IsStrictlySorted();
    reveal_concat3();
    ghost var run: seq<Keyspace.Element> := concat3(left[..|left| - 1], KeyToElement(key), right[1..]);
    forall i: int, j: int | 0 <= i < j < |run|
      ensures Keyspace.lt(run[i], run[j])
    {
      if i < |left| - 1 {
        if j < |left| - 1 {
          assert Keyspace.lt(run[i], run[j]);
        } else if j == |left| - 1 {
          assert run[j] == KeyToElement(key);
          assert Keyspace.lt(run[i], run[j]);
        } else {
          assert run[i] == left[i];
          assert run[j] == right[j - |left| + 1];
          assert Keyspace.lt(run[i], run[j]);
        }
      } else if i == |left| - 1 {
        assert Keyspace.lt(run[i], run[j]);
      } else {
        assert j >= |left|;
        assert Keyspace.lt(run[i], run[j]);
      }
    }
  }
  function {:opaque} {:fuel 0, 0} CutoffForLeft(pt: PivotTable, pivot: Key): int
    requires WFPivots(pt)
    requires ValidLeftCutOffKey(pt, pivot)
    ensures 0 <= CutoffForLeft(pt, pivot) < NumBuckets(pt)
    ensures forall i: int | 0 <= i <= CutoffForLeft(pt, pivot) :: Keyspace.lt(pt[i], KeyToElement(pivot))
    ensures forall i: int | CutoffForLeft(pt, pivot) < i < |pt| :: Keyspace.lte(KeyToElement(pivot), pt[i])
  {
    Keyspace.LargestLt(pt, KeyToElement(pivot))
  }
  method ComputeCutoffForLeft(pt: PivotTable, pivot: Key) returns (i: uint64)
    requires |pt| < 4611686018427387904
    requires WFPivots(pt)
    requires ValidLeftCutOffKey(pt, pivot)
    ensures i as int == CutoffForLeft(pt, pivot)
  {
    reveal_CutoffForLeft();
    var j: int64 := KeyspaceImpl.ComputeLargestLt(pt, Keyspace.Element(pivot));
    i := j as uint64;
  }
  function SplitLeft(pt: PivotTable, pivot: Key): (ret: PivotTable)
    requires WFPivots(pt)
    requires ValidLeftCutOffKey(pt, pivot)
    ensures WFPivots(ret)
  {
    ghost var ret: seq<Keyspace.Element> := pt[..CutoffForLeft(pt, pivot) + 1] + [KeyToElement(pivot)];
    Keyspace.reveal_IsStrictlySorted();
    ret
  }
  method ComputeSplitLeft(pt: PivotTable, pivot: Key, cLeft: uint64)
      returns (ret: PivotTable)
    requires |pt| < 4611686018427387904
    requires WFPivots(pt)
    requires ValidLeftCutOffKey(pt, pivot)
    requires cLeft as int == CutoffForLeft(pt, pivot)
    ensures ret == SplitLeft(pt, pivot)
  {
    ret := pt[..cLeft + 1] + [Keyspace.Element(pivot)];
    Keyspace.reveal_IsStrictlySorted();
  }
  function {:opaque} {:fuel 0, 0} CutoffForRight(pt: PivotTable, pivot: Key): int
    requires WFPivots(pt)
    requires BoundedKey(pt, pivot)
    ensures 0 <= CutoffForRight(pt, pivot) < NumBuckets(pt)
    ensures forall i: int | 0 <= i <= CutoffForRight(pt, pivot) :: Keyspace.lte(pt[i], KeyToElement(pivot))
    ensures forall i: int | CutoffForRight(pt, pivot) < i < |pt| :: Keyspace.lt(KeyToElement(pivot), pt[i])
  {
    Route(pt, pivot)
  }
  method ComputeCutoffForRight(pt: PivotTable, pivot: Key) returns (i: uint64)
    requires |pt| < 4611686018427387904
    requires WFPivots(pt)
    requires BoundedKey(pt, pivot)
    ensures i as int == CutoffForRight(pt, pivot)
  {
    reveal_CutoffForRight();
    var j: uint64 := ComputeRoute(pt, pivot);
    i := j as uint64;
  }
  function SplitRight(pt: PivotTable, pivot: Key): (ret: PivotTable)
    requires WFPivots(pt)
    requires BoundedKey(pt, pivot)
    ensures WFPivots(ret)
  {
    ghost var ret: seq<Keyspace.Element> := [KeyToElement(pivot)] + pt[CutoffForRight(pt, pivot) + 1..];
    Keyspace.reveal_IsStrictlySorted();
    ret
  }
  method ComputeSplitRight(pt: PivotTable, pivot: Key, cRight: uint64)
      returns (ret: PivotTable)
    requires |pt| < 4611686018427387904
    requires WFPivots(pt)
    requires BoundedKey(pt, pivot)
    requires cRight as int == CutoffForRight(pt, pivot)
    ensures ret == SplitRight(pt, pivot)
  {
    ret := [Keyspace.Element(pivot)] + pt[cRight + 1..];
    Keyspace.reveal_IsStrictlySorted();
  }
  function PivotTableBucketKeySet(pt: PivotTable, i: int): iset<Key>
    requires WFPivots(pt)
    requires 0 <= i < NumBuckets(pt)
  {
    iset key: Key | BoundedKey(pt, key) && Route(pt, key) == i
  }
  lemma GetKeyInChildBucket(parentPivots: PivotTable, childPivots: PivotTable, parentIdx: int, childIdx: int)
      returns (key: Key)
    requires WFPivots(parentPivots)
    requires WFPivots(childPivots)
    requires 0 <= parentIdx < NumBuckets(parentPivots)
    requires 0 <= childIdx < NumBuckets(childPivots)
    requires Keyspace.lte(parentPivots[parentIdx], childPivots[0])
    requires Keyspace.lte(Last(childPivots), parentPivots[parentIdx + 1])
    ensures BoundedKey(parentPivots, key) && Route(parentPivots, key) == parentIdx
    ensures BoundedKey(childPivots, key) && Route(childPivots, key) == childIdx
  {
    key := GetKeyInBucket(childPivots, childIdx);
    assert Route(childPivots, key) == childIdx;
    assert Route(parentPivots, key) == parentIdx;
  }
Dafny program verifier did not attempt verification