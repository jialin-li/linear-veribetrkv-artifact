  var Length: int  // immutable
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): bool
    reads reads(x0, x1, x2, x3, x4)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): set<object?>
    reads reads(x0, x1, x2, x3, x4)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): bool
    reads reads(x0, x1, x2, x3, x4, x5)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6): bool
    reads reads(x0, x1, x2, x3, x4, x5, x6)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5, x6)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8, x9: T9): bool
    reads reads(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8, x9: T9): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  method DebugAccumulate() returns (acc: DebugAccumulator.DebugAccumulator)
    requires false
  {
  }
  predicate ConsistentBitmap()
    requires Ready? && blockAllocator.Inv()
  {
    ConsistentBitmapInteral(ephemeralIndirectionTable.I(), if frozenIndirectionTable.lSome? then lSome(frozenIndirectionTable.value.I()) else lNone, persistentIndirectionTable.I(), outstandingBlockWrites, blockAllocator.I())
  }
  function method TotalCacheSize(): (res: uint64)
    requires Ready?
    requires cache.Inv()
    requires |cache.I()| + |outstandingBlockReads| < 18446744073709551616
    ensures res as int == totalCacheSize()
  {
    CacheImpl.CacheCount(cache) + |outstandingBlockReads| as uint64
  }
  function totalCacheSize(): int
    requires Ready?
    requires cache.Inv()
  {
    |cache.I()| + |outstandingBlockReads|
  }
  predicate W()
  {
    Ready? ==>
      persistentIndirectionTable.Inv() &&
      (frozenIndirectionTable.lSome? ==>
        frozenIndirectionTable.value.Inv()) &&
      ephemeralIndirectionTable.Inv() &&
      lru.Inv() &&
      cache.Inv() &&
      blockAllocator.Inv()
  }
  predicate WFBCVars()
  {
    W() &&
    (Ready? ==>
      LruModel.WF(lru.Queue()) &&
      LruModel.I(lru.Queue()) == cache.I().Keys &&
      totalCacheSize() <= MaxCacheSize() &&
      ephemeralIndirectionTable.TrackingGarbage() &&
      BlockAllocatorModel.Inv(blockAllocator.I()) &&
      ConsistentBitmap() &&
      WFCache(cache.I()))
  }
  predicate WriteAllocConditions()
  {
    Ready? &&
    ephemeralIndirectionTable.Inv() &&
    ephemeralIndirectionTable.TrackingGarbage() &&
    blockAllocator.Inv() &&
    (forall loc: Location | loc in ephemeralIndirectionTable.I().locs.Values :: 
      DiskLayout.ValidNodeLocation(loc)) &&
    ConsistentBitmap() &&
    BlockAllocatorModel.Inv(blockAllocator.I()) &&
    BC.AllLocationsForDifferentRefsDontOverlap(ephemeralIndirectionTable.I())
  }
  function I(): BBC.Variables
    requires W()
  {
    if Ready? then
      BC.Ready(persistentIndirectionTable.I(), if frozenIndirectionTable.lSome? then Some(frozenIndirectionTable.value.I()) else None, ephemeralIndirectionTable.I(), persistentIndirectionTableLoc, frozenIndirectionTableLoc, outstandingIndirectionTableWrite, outstandingBlockWrites, outstandingBlockReads, cache.I())
    else if Loading? then
      BC.LoadingIndirectionTable(indirectionTableLoc, indirectionTableRead)
    else
      BC.Unready
  }
  predicate Inv()
  {
    WFBCVars() &&
    BBC.Inv(I())
  }
  predicate ChildrenConditions(succs: Option<seq<BT.G.Reference>>)
    requires Ready?
  {
    succs.Some? ==>
      |succs.value| <= MaxNumChildren() &&
      IT.IndirectionTable.SuccsValid(succs.value, ephemeralIndirectionTable.graph)
  }
  static method Constructor() returns (v: Variables)
    ensures v.Unready?
    ensures v.WFBCVars()
  {
    v := Unready;
  }
  predicate WFCache(cache: map<Reference, BT.G.Node>)
  {
    forall ref: NativeTypes.uint64 | ref in cache :: 
      BT.WFNode(cache[ref])
  }
  predicate IsLocAllocOutstanding(outstanding: map<BC.ReqId, BC.OutstandingWrite>, i: int)
  {
    !forall id: uint64 | id in outstanding :: outstanding[id].loc.addr as int != i * NodeBlockSize() as int
  }
  predicate {:opaque} {:fuel 0, 0} ConsistentBitmapInteral(ephemeralIndirectionTable: SectorType.IndirectionTable, frozenIndirectionTable: lOption<SectorType.IndirectionTable>, persistentIndirectionTable: SectorType.IndirectionTable, outstandingBlockWrites: map<BC.ReqId, BC.OutstandingWrite>, blockAllocator: BlockAllocatorModel.BlockAllocatorModel)
  {
    (forall i: int :: 
      ephemeralIndirectionTable.IsLocAllocIndirectionTable(i) <==> IT.IndirectionTable.IsLocAllocBitmap(blockAllocator.ephemeral, i)) &&
    (forall i: int :: 
      persistentIndirectionTable.IsLocAllocIndirectionTable(i) <==> IT.IndirectionTable.IsLocAllocBitmap(blockAllocator.persistent, i)) &&
    (frozenIndirectionTable.lSome? <==> blockAllocator.frozen.Some?) &&
    (frozenIndirectionTable.lSome? ==>
      forall i: int :: 
        frozenIndirectionTable.value.IsLocAllocIndirectionTable(i) <==> IT.IndirectionTable.IsLocAllocBitmap(blockAllocator.frozen.value, i)) &&
    forall i: int :: 
      IsLocAllocOutstanding(outstandingBlockWrites, i) <==> IT.IndirectionTable.IsLocAllocBitmap(blockAllocator.outstanding, i)
  }
Dafny program verifier did not attempt verification