  var Length: int  // immutable
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): bool
    reads reads(x0, x1, x2, x3, x4)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): set<object?>
    reads reads(x0, x1, x2, x3, x4)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): bool
    reads reads(x0, x1, x2, x3, x4, x5)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function BucketGet(m: BucketMap, key: Key): Message
  {
    if key in m then
      m[key]
    else
      IdentityMessage()
  }
  function BucketListItemFlush(parent: BucketMap, child: BucketMap, pivots: PivotTable, i: int): BucketMap
    requires WFPivots(pivots)
  {
    map key: Key | key in child.Keys + parent.Keys && BoundedKey(pivots, key) && Route(pivots, key) == i && Merge(BucketGet(parent, key), BucketGet(child, key)) != IdentityMessage() :: Merge(BucketGet(parent, key), BucketGet(child, key))
  }
  function BucketListFlushPartial(parent: BucketMap, children: seq<BucketMap>, pivots: PivotTable, i: int): (res: seq<BucketMap>)
    requires WFPivots(pivots)
    requires 0 <= i <= |children|
    ensures |res| == i
    ensures forall h: int :: 0 <= h < i ==> res[h] == BucketListItemFlush(parent, children[h], pivots, h)
  {
    if i == 0 then
      []
    else
      BucketListFlushPartial(parent, children, pivots, i - 1) + [BucketListItemFlush(parent, children[i - 1], pivots, i - 1)]
  }
  function BucketListFlush(parent: BucketMap, children: seq<BucketMap>, pivots: PivotTable): (res: seq<BucketMap>)
    requires WFPivots(pivots)
    ensures |res| == |children|
    ensures forall h: int :: 0 <= h < |res| ==> res[h] == BucketListItemFlush(parent, children[h], pivots, h)
  {
    BucketListFlushPartial(parent, children, pivots, |children|)
  }
  function {:opaque} {:fuel 0, 0} BucketIntersect(bucket: BucketMap, keys: set<Key>): (res: BucketMap)
  {
    map key: Key | key in bucket && key in keys :: bucket[key]
  }
  function {:opaque} {:fuel 0, 0} BucketComplement(bucket: BucketMap, keys: set<Key>): (res: BucketMap)
  {
    map key: Key | key in bucket && key !in keys :: bucket[key]
  }
  function {:opaque} {:fuel 0, 0} ClampRange(bucket: BucketMap, start: UI.RangeStart, end: UI.RangeEnd): (res: BucketMap)
  {
    map key: Key | key in bucket && MS.InRange(start, key, end) :: bucket[key]
  }
  function {:opaque} {:fuel 0, 0} ClampStart(bucket: BucketMap, start: UI.RangeStart): (res: BucketMap)
  {
    map key: Key | key in bucket && MS.LowerBound(start, key) :: bucket[key]
  }
  function {:opaque} {:fuel 0, 0} ClampEnd(bucket: BucketMap, end: UI.RangeEnd): (res: BucketMap)
  {
    map key: Key | key in bucket && MS.UpperBound(key, end) :: bucket[key]
  }
  function {:opaque} {:fuel 0, 0} Compose(top: BucketMap, bot: BucketMap): (res: BucketMap)
  {
    map key: Key | key in top.Keys + bot.Keys :: Merge(BucketGet(top, key), BucketGet(bot, key))
  }
  function {:opaque} {:fuel 0, 0} ComposeSeq(buckets: seq<BucketMap>): (res: BucketMap)
  {
    if |buckets| == 0 then
      map[]
    else
      Compose(ComposeSeq(DropLast(buckets)), Last(buckets))
  }
  lemma ComposeSeq1(b: BucketMap)
    ensures ComposeSeq([b]) == b
  {
    calc == {
      ComposeSeq([b]);
    ==
      {
        reveal_ComposeSeq();
      }
      Compose(ComposeSeq([]), b);
    ==
      {
        reveal_ComposeSeq();
      }
      Compose(map[], b);
    ==
      {
        reveal_Compose();
      }
      b;
    }
  }
  lemma ComposeAssoc(a: BucketMap, b: BucketMap, c: BucketMap)
    ensures Compose(Compose(a, b), c) == Compose(a, Compose(b, c))
  {
    reveal_Compose();
    ghost var ab_c: map<Key, Message> := Compose(Compose(a, b), c);
    ghost var a_bc: map<Key, Message> := Compose(a, Compose(b, c));
    forall key: Key | key in ab_c.Keys
      ensures ab_c[key] == a_bc[key]
    {
      ghost var av: Message := BucketGet(a, key);
      ghost var bv: Message := BucketGet(b, key);
      ghost var cv: Message := BucketGet(c, key);
      MergeIsAssociative(av, bv, cv);
    }
  }
  lemma ComposeSeqAdditive(a: seq<BucketMap>, b: seq<BucketMap>)
    ensures ComposeSeq(a + b) == Compose(ComposeSeq(a), ComposeSeq(b))
  {
    reveal_ComposeSeq();
    reveal_Compose();
    if |b| == 0 {
      assert b == [];
      assert a + b == a;
      assert ComposeSeq(a + b) == ComposeSeq(a) == Compose(ComposeSeq(a), map[]) == Compose(ComposeSeq(a), ComposeSeq(b));
    } else {
      ComposeSeqAdditive(a, b[..|b| - 1]);
      assert (a + b)[..|a + b| - 1] == a + b[..|b| - 1];
      assert (a + b)[|a + b| - 1] == b[|b| - 1];
      ComposeAssoc(ComposeSeq(a), ComposeSeq(b[..|b| - 1]), b[|b| - 1]);
      assert ComposeSeq(a + b) == Compose(ComposeSeq((a + b)[..|a + b| - 1]), (a + b)[|a + b| - 1]) == Compose(ComposeSeq(a + b[..|b| - 1]), b[|b| - 1]) == Compose(Compose(ComposeSeq(a), ComposeSeq(b[..|b| - 1])), b[|b| - 1]) == Compose(ComposeSeq(a), Compose(ComposeSeq(b[..|b| - 1]), b[|b| - 1])) == Compose(ComposeSeq(a), ComposeSeq(b));
    }
  }
  function {:opaque} {:fuel 0, 0} KeyValueMapOfBucket(bucket: BucketMap): map<Key, Value>
  {
    map key: Key | key in bucket && Merge(bucket[key], DefineDefault()).value != DefaultValue() :: Merge(bucket[key], DefineDefault()).value
  }
  function {:opaque} {:fuel 0, 0} SortedSeqOfKeyValueMap(m: map<Key, Value>): seq<UI.SuccResult>
  {
    ghost var max: Option<Element> := UnboundedKeyspace.maximumOpt(m.Keys);
    if max.None? then
      []
    else
      SortedSeqOfKeyValueMap(MapRemove1(m, max.value)) + [UI.SuccResult(max.value, m[max.value])]
  }
  lemma SortedSeqOfKeyValueHasKey(m: map<Key, Value>, key: Key)
    requires key in m
    ensures ghost var s: seq<UI.SuccResult> := SortedSeqOfKeyValueMap(m); exists i: int :: 0 <= i < |s| && s[i].key == key
  {
    reveal_SortedSeqOfKeyValueMap();
    ghost var max: Option<Element> := UnboundedKeyspace.maximumOpt(m.Keys);
    if max.Some? {
      if key != max.value {
        SortedSeqOfKeyValueHasKey(MapRemove1(m, max.value), key);
        ghost var i: int :| 0 <= i < |SortedSeqOfKeyValueMap(MapRemove1(m, max.value))| && SortedSeqOfKeyValueMap(MapRemove1(m, max.value))[i].key == key;
        assert SortedSeqOfKeyValueMap(m)[i].key == key;
      } else {
        assert Last(SortedSeqOfKeyValueMap(m)).key == key;
      }
    }
  }
  lemma SortedSeqOfKeyValueMaps(m: map<Key, Value>, i: int)
    requires 0 <= i < |SortedSeqOfKeyValueMap(m)|
    ensures MapsTo(m, SortedSeqOfKeyValueMap(m)[i].key, SortedSeqOfKeyValueMap(m)[i].value)
  {
    reveal_SortedSeqOfKeyValueMap();
    ghost var max: Option<Element> := UnboundedKeyspace.maximumOpt(m.Keys);
    if max.Some? && i != |SortedSeqOfKeyValueMap(m)| - 1 {
      SortedSeqOfKeyValueMaps(MapRemove1(m, max.value), i);
    }
  }
  lemma {:induction true} SortedSeqOfKeyValueMapHasSortedKeys(m: map<Key, Value>)
    ensures ghost var s: seq<UI.SuccResult> := SortedSeqOfKeyValueMap(m); forall i: int, j: int | 0 <= i < j < |s| :: UnboundedKeyspace.lt(s[i].key, s[j].key)
  {
    ghost var s: seq<UI.SuccResult> := SortedSeqOfKeyValueMap(m);
    reveal_SortedSeqOfKeyValueMap();
    ghost var max: Option<Element> := UnboundedKeyspace.maximumOpt(m.Keys);
    if max.Some? {
      SortedSeqOfKeyValueMapHasSortedKeys(MapRemove1(m, max.value));
    }
    forall i: int, j: int | 0 <= i < j < |s|
      ensures UnboundedKeyspace.lt(s[i].key, s[j].key)
    {
      if j == |s| - 1 {
        SortedSeqOfKeyValueMaps(MapRemove1(m, max.value), i);
        assert UnboundedKeyspace.lt(s[i].key, s[j].key);
      } else {
        ghost var s1: seq<UI.SuccResult> := SortedSeqOfKeyValueMap(MapRemove1(m, max.value));
        assert UnboundedKeyspace.lt(s1[i].key, s1[j].key);
      }
    }
  }
Dafny program verifier did not attempt verification