  var Length: int  // immutable
  method Dealloc(inout s: ImplVariables, io: DiskIOHandler, ref: BT.G.Reference)
    modifies io
  {
    var nop: bool := false;
    if s.frozenIndirectionTable.lSome? {
      var b: bool := s.frozenIndirectionTable.value.HasEmptyLoc(ref);
      if b {
        print "giving up; dealloc can't run because frozen isn't written";
        nop := true;
      }
    }
    if nop || BC.OutstandingRead(ref) in s.outstandingBlockReads.Values {
      print "giving up; dealloc can't dealloc because of outstanding read\n";
    } else {
      var oldLoc: Option<Location> := s.ephemeralIndirectionTable.RemoveRef(ref);
      s.lru.Remove(ref);
      s.cache.Remove(ref);
      if oldLoc.Some? {
        s.blockAllocator.MarkFreeEphemeral(oldLoc.value.addr / NodeBlockSizeUint64());
      }
    }
  }
  method FindDeallocable(s: ImplVariables) returns (ref: Option<Reference>)
  {
    ref := s.ephemeralIndirectionTable.FindDeallocable();
  }
Dafny program verifier did not attempt verification