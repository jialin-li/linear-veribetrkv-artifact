  var Length: int  // immutable
  method {:timeLimitMultiplier 2} doFlush(inout s: ImplVariables, parentref: BT.G.Reference, slot: uint64, childref: BT.G.Reference)
  {
    var b: bool := false;
    if s.frozenIndirectionTable.lSome? {
      b := s.frozenIndirectionTable.value.HasEmptyLoc(parentref);
    }
    if b {
      print "giving up; flush can't run because frozen isn't written";
    } else {
      var bounded: bool := s.cache.NodeBoundedBucket(parentref, childref, slot);
      if bounded {
        var newparentBucket: MutBucket, newchild: Node := s.cache.NodePartialFlush(parentref, childref, slot);
        var newchildref: Option<BT.G.Reference> := allocBookkeeping(inout s, newchild.children);
        if newchildref.None? {
          var _: () := FreeMutBucket(newparentBucket);
          var _: () := FreeNode(newchild);
          print "giving up; could not get parentref\n";
        } else {
          s.cache.Insert(newchildref.value, newchild);
          var newparent_children: Option<seq<BT.G.Reference>> := s.cache.NodeUpdateSlot(parentref, slot, newparentBucket, newchildref.value);
          writeBookkeeping(inout s, parentref, newparent_children);
        }
      } else {
        print "giving up; flush can't run because flushed keys are out of bound for its children";
      }
    }
  }
  method {:timeLimitMultiplier 2} flush(inout s: ImplVariables, parentref: BT.G.Reference, slot: uint64, childref: BT.G.Reference)
  {
    doFlush(inout s, parentref, slot, childref);
  }
Dafny program verifier did not attempt verification