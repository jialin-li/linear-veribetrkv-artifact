  var Length: int  // immutable
  static method Alloc() returns (mb: MutBucket)
  {
    var tmp: Node := LKMB.EmptyTree();
    mb := MutBucket(BFTree(tmp), 0, true, EmptyBucket());
  }
  static method AllocPkv(pkv: PackedKV.Pkv, is_sorted: bool) returns (mb: MutBucket)
  {
    mb := MutBucket(BFPkv(pkv), PackedKV.WeightPkv(pkv), is_sorted, PackedKV.I(pkv));
  }
  method GetPkvSorted(must_be_sorted: bool) returns (pkv: PKV.Pkv)
  {
    if format.BFTree? {
      pkv := tree_to_pkv(format.tree);
    } else if !must_be_sorted || sorted {
      pkv := this.format.pkv;
    } else {
      var tree: TreeMap;
      var weight: uint64;
      tree, weight := pkv_to_tree(this.format.pkv);
      pkv := tree_to_pkv(tree);
      var _: () := LKMB.FreeNode(tree);
    }
  }
  method GetPkv() returns (pkv: PKV.Pkv)
  {
    pkv := GetPkvSorted(false);
  }
  method WellMarshalled() returns (b: bool)
  {
    if format.BFTree? {
      b := true;
    } else {
      if sorted {
        b := true;
      } else {
        b := PackedKV.ComputeIsSorted(format.pkv);
      }
    }
  }
  method Empty() returns (result: bool)
  {
    if format.BFTree? {
      result := LKMB.Empty(format.tree);
    } else {
      result := 0 == |format.pkv.keys.offsets| as uint64;
    }
  }
  method WFBucketAt(pivots: Pivots.PivotTable, i: uint64) returns (result: bool)
  {
    var e: bool := Empty();
    if e {
      return true;
    }
    var firstkey: Key := GetFirstKey();
    var c: int32 := Pivots.KeyspaceImpl.cmp(pivots[i], Pivots.Keyspace.Element(firstkey));
    if 0 < c {
      return false;
    }
    var lastkey: Key := GetLastKey();
    c := Pivots.KeyspaceImpl.cmp(Pivots.Keyspace.Element(lastkey), pivots[i + 1]);
    if c >= 0 {
      return false;
    }
    return true;
  }
  method GetFirstKey() returns (result: Key)
  {
    if format.BFTree? {
      result := LKMB.MinKey(format.tree);
    } else {
      result := PackedKV.FirstKey(format.pkv);
    }
  }
  method GetMiddleKey() returns (res: Key)
  {
    var pkv: PackedKV.Pkv;
    if format.BFPkv? {
      pkv := format.pkv;
    } else {
      pkv := tree_to_pkv(format.tree);
    }
    if |pkv.keys.offsets| as uint64 == 0 {
      return [0];
    } else {
      var key: Key := PackedKV.GetKey(pkv, |pkv.keys.offsets| as uint64 / 2);
      if |key| as uint64 == 0 {
        return [0];
      } else {
        return key;
      }
    }
  }
  method GetLastKey() returns (result: Key)
  {
    if format.BFTree? {
      result := LKMB.MaxKey(format.tree);
    } else {
      result := PackedKV.LastKey(format.pkv);
    }
  }
  method Insert(key: Key, value: Message)
  {
    if self.format.BFPkv? {
      var tree: TreeMap;
      var weight: uint64;
      tree, weight := pkv_to_tree(self.format.pkv);
      inout self.weight := weight;
      var prevformat: BucketFormat := Replace(inout self.format, BFTree(tree));
      var _: () := FreeBucketFormat(prevformat);
    }
    if value.Define? {
      var MutBucket(format: BucketFormat, weight: uint64, sorted: bool, bucket: Bucket) := self;
      var BFTree(tree: TreeMap) := format;
      var cur: Option<Value>;
      tree, cur := LKMB.Insert(tree, key, value);
      if cur.Some? {
        weight := weight - WeightMessageUint64(cur.value) + WeightMessageUint64(value) as uint64;
      } else {
        weight := weight + WeightKeyUint64(key) + WeightMessageUint64(value);
      }
      self := MutBucket(BFTree(tree), weight, sorted, B(LKMB.Interpretation(tree)));
    }
  }
  method Query(key: Key) returns (m: Option<Message>)
  {
    if format.BFTree? {
      m := LKMB.Query(format.tree, key);
    } else if format.BFPkv? {
      m := PackedKV.BinarySearchQuery(format.pkv, key);
    }
  }
  method SplitLeft(pivot: Key) returns (left: MutBucket)
  {
    var pkv: PKV.Pkv := GetPkvSorted(false);
    var pkvleft: Pkv := PKV.SplitLeft(pkv, pivot);
    left := AllocPkv(pkvleft, sorted);
  }
  method SplitRight(pivot: Key) returns (right: MutBucket)
  {
    var pkv: PKV.Pkv := GetPkvSorted(false);
    var pkvright: Pkv := PKV.SplitRight(pkv, pivot);
    right := AllocPkv(pkvright, sorted);
  }
  static method SplitLeftRight(b: MutBucket, pivot: Key)
      returns (left: MutBucket, right: MutBucket)
  {
    left := b.SplitLeft(pivot);
    right := b.SplitRight(pivot);
  }
  static method SplitOneInList(inout buckets: lseq<MutBucket>, slot: uint64, pivot: Key)
  {
    var l: MutBucket, r: MutBucket := SplitLeftRight(lseq_peek(buckets, slot), pivot);
    var replaced: MutBucket;
    replaced := Replace1With2Lseq_inout(inout buckets, l, r, slot);
    var _: () := FreeMutBucket(replaced);
  }
  static method computeWeightOfSeq(buckets: lseq<MutBucket>) returns (weight: uint64)
  {
    var w: uint64 := 0;
    var j: uint64 := 0;
    while j < lseq_length_raw(buckets)
    {
      w := w + lseq_peek(buckets, j).weight;
      j := j + 1;
    }
    return w;
  }
  method Clone() returns (bucket': MutBucket)
  {
    if format.BFPkv? {
      bucket' := AllocPkv(format.pkv, sorted);
    } else {
      var pkv: PackedKV.Pkv;
      pkv := tree_to_pkv(format.tree);
      bucket' := AllocPkv(pkv, true);
    }
  }
  static method CloneSeq(buckets: lseq<MutBucket>, start: uint64, end: uint64)
      returns (buckets': lseq<MutBucket>)
  {
    buckets' := lseq_alloc(end - start);
    var j: uint64 := start;
    while j < end
    {
      var newbucket: MutBucket := lseq_peek(buckets, j).Clone();
      buckets' := lseq_give(buckets', j - start, newbucket);
      j := j + 1;
    }
  }
  method Free()
  {
    var BucketIter(_: Iterator, _: PackedKV.Pkv, _: Bucket) := this;
  }
  static function method makeIter(ghost bucket: Bucket, idx: uint64): (it': Iterator)
  {
    Iterator(if idx as int == |bucket.keys| then BucketIteratorModel.Done else BucketIteratorModel.Next(bucket.keys[idx], bucket.msgs[idx]), idx, |bucket.keys| - idx as int)
  }
  static method IterStart(bucket: MutBucket) returns (biter: BucketIter)
  {
    var pkv: PKV.Pkv := bucket.GetPkv();
    var it: Iterator := makeIter(b, 0);
    biter := BucketIter(it, pkv, b);
  }
  static method IterFindFirstGte(bucket: MutBucket, key: Key) returns (biter: BucketIter)
  {
    var pkv: PKV.Pkv := bucket.GetPkv();
    var i: uint64 := PSA.BinarySearchIndexOfFirstKeyGte(pkv.keys, key);
    var it: Iterator := makeIter(b, i);
    biter := BucketIter(it, pkv, b);
  }
  static method IterFindFirstGt(bucket: MutBucket, key: Key) returns (biter: BucketIter)
  {
    var pkv: PKV.Pkv := bucket.GetPkv();
    var i: uint64 := PSA.BinarySearchIndexOfFirstKeyGt(pkv.keys, key);
    var it: Iterator := makeIter(b, i);
    biter := BucketIter(it, pkv, b);
  }
  method IterInc()
  {
    inout self.it := makeIter(self.bucket, self.it.i + 1);
  }
  method GetNext() returns (next: BucketIteratorModel.IteratorOutput)
  {
    if it.i == |pkv.keys.offsets| as uint64 {
      next := BucketIteratorModel.Done;
    } else {
      next := BucketIteratorModel.Next(PackedKV.GetKey(pkv, it.i), PackedKV.GetMessage(pkv, it.i));
    }
  }
  method pkv_to_tree(pkv: PackedKV.Pkv) returns (tree: TreeMap, weight: uint64)
  {
    tree, weight := LKMBPKVOps.FromPkv(pkv);
  }
  method tree_to_pkv(tree: TreeMap) returns (pkv: PackedKV.Pkv)
  {
    pkv := LKMBPKVOps.ToPkv(tree);
  }
  function method FreeBucketFormat(format: BucketFormat): ()
  {
    match format {
      case BFTree(tree) =>
        var _ := LKMB.FreeNode(tree);
        ()
      case BFPkv(_v1) =>
        ()
    }
  }
  function method FreeMutBucket(bucket: MutBucket): ()
  {
    var MutBucket(format: BucketFormat, _: uint64, _: bool, _: Bucket) := bucket;
    var _: () := FreeBucketFormat(format);
    ()
  }
  function method FreeMutBucketSeqRecur(buckets: lseq<MutBucket>, i: uint64): (ebuckets: lseq<MutBucket>)
  {
    var (buckets': lseq<MutBucket>, wastebucket: MutBucket) := lseq_take_fun(buckets, i);
    var _: () := FreeMutBucket(wastebucket);
    if i + 1 == lseq_length_as_uint64(buckets') then
      buckets'
    else
      var e: lseq<MutBucket> := FreeMutBucketSeqRecur(buckets', i + 1); e
  }
  function method FreeMutBucketSeq(buckets: lseq<MutBucket>): ()
  {
    if lseq_length_as_uint64(buckets) == 0 then
      lseq_free_fun(buckets)
    else
      var buckets': lseq<MutBucket> := FreeMutBucketSeqRecur(buckets, 0); lseq_free_fun(buckets')
  }
  method pkvList2BucketList(pkvs: seq<PKV.Pkv>, sorted: bool) returns (buckets: lseq<MutBucket>)
  {
    buckets := lseq_alloc(|pkvs| as uint64);
    var i: uint64 := 0;
    while i < |pkvs| as uint64
    {
      var newbucket: MutBucket := MutBucket.AllocPkv(pkvs[i], sorted);
      buckets := lseq_give(buckets, i, newbucket);
      i := i + 1;
    }
  }
  method PartialFlush(top: MutBucket, bots: lseq<MutBucket>, pivots: Pivots.PivotTable)
      returns (newtop: MutBucket, newbots: lseq<MutBucket>)
  {
    var i: uint64 := 0;
    var bots_len: uint64 := lseq_length_raw(bots);
    var botPkvs: array<PKV.Pkv> := new PKV.Pkv[bots_len];
    var sorted: bool := true;
    while i < bots_len
    {
      botPkvs[i] := lseq_peek(bots, i).GetPkv();
      if !lseq_peek(bots, i).sorted {
        sorted := false;
      }
      i := i + 1;
    }
    var botPkvsSeq: seq<PKV.Pkv> := botPkvs[..];
    var topPkv: PKV.Pkv := top.GetPkv();
    if !top.sorted {
      sorted := false;
    }
    var result: PartialFlushResult := DPKV.PartialFlush(topPkv, pivots, botPkvsSeq);
    newtop := MutBucket.AllocPkv(result.top, sorted);
    newbots := pkvList2BucketList(result.bots, sorted);
  }
Dafny program verifier did not attempt verification