  var Length: int  // immutable
  method DebugAccumulate() returns (acc: DebugAccumulator.DebugAccumulator)
  {
    acc := DebugAccumulator.EmptyAccumulator();
    var a: DebugAccumulator.AccRec := new DebugAccumulator.AccRec(|bits| as uint64, "uint64");
    acc := DebugAccumulator.AccPut(acc, "bits", a);
  }
  static method Constructor(len: uint64) returns (bm: Bitmap)
  {
    var bits: array<uint64> := NativeArrays.newArrayFill(len / 64, 0);
    bm := Bitmap(bits[..]);
  }
  static function method SetBit(word: uint64, b: uint64): uint64
  {
    BitsetLemmas.set_bit_to_1_uint64(word, b)
  }
  method Set(c: uint64)
  {
    var i: uint64 := c / 64;
    var b: uint64 := c % 64;
    var word: uint64 := SetBit(self.bits[i], b);
    inout self.bits := self.bits[i := word];
  }
  static function method UnsetBit(word: uint64, b: uint64): uint64
  {
    BitsetLemmas.set_bit_to_0_uint64(word, b)
  }
  method Unset(c: uint64)
  {
    var i: uint64 := c / 64;
    var b: uint64 := c % 64;
    var word: uint64 := UnsetBit(self.bits[i], b);
    inout self.bits := self.bits[i := word];
  }
  function method GetIsSet(c: uint64): (result: bool)
  {
    var i: uint64 := c / 64;
    var b: uint64 := c % 64;
    BitsetLemmas.in_set_uint64(b, this.bits[i])
  }
  method Alloc() returns (res: Option<uint64>)
  {
    var i: uint64 := 0;
    while i < |this.bits| as uint64
    {
      if this.bits[i] != 18446744073709551615 {
        var j: uint64 := 0;
        while j < 64
        {
          if !BitsetLemmas.in_set_uint64(j, this.bits[i]) {
            res := Some(64 * i + j);
            return;
          }
          j := j + 1;
        }
      }
      i := i + 1;
    }
    res := None;
  }
  static method UnionConstructor(a: Bitmap, b: Bitmap) returns (bm: Bitmap)
  {
    var len: uint64 := |a.bits| as uint64;
    var bits: array<uint64> := new uint64[len];
    var i: uint64 := 0;
    while i < |a.bits| as uint64
    {
      bits[i] := BitsetLemmas.bit_or_uint64(a.bits[i], b.bits[i]);
      i := i + 1;
    }
    bm := Bitmap(bits[..]);
  }
  static method CloneConstructor(a: Bitmap) returns (bm: Bitmap)
  {
    bm := Bitmap(a.bits);
  }
  method Free()
  {
    var Bitmap(_: seq<uint64>) := this;
  }
Dafny program verifier did not attempt verification