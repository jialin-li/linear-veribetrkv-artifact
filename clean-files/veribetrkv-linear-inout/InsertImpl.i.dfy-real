  var Length: int  // immutable
  method insertKeyValue(inout s: ImplVariables, key: Key, value: Value)
      returns (success: bool)
  {
    success := true;
    if s.frozenIndirectionTable.lSome? {
      var b: bool := s.frozenIndirectionTable.value.HasEmptyLoc(BT.G.Root());
      if b {
        success := false;
        print "giving up; can't dirty root because frozen isn't written";
      }
    }
    if success {
      var msg: Message := ValueMessage.Define(value);
      s.cache.InsertKeyValue(BT.G.Root(), key, msg);
      writeBookkeepingNoSuccsUpdate(inout s, BT.G.Root());
    }
  }
  method insert(inout s: ImplVariables, io: DiskIOHandler, key: Key, value: Value, ghost replay: bool)
      returns (success: bool)
    modifies io
  {
    success := true;
    var indirectionTableSize: uint64 := s.ephemeralIndirectionTable.GetSize();
    if !(indirectionTableSize <= IT.MaxSizeUint64() - 3) {
      success := false;
    }
    if success {
      var rootLookup: bool := s.cache.InCache(BT.G.Root());
      if !rootLookup {
        if s.TotalCacheSize() <= MaxCacheSizeUint64() - 1 {
          PageInNodeReq(inout s, io, BT.G.Root());
          success := false;
        } else {
          print "insert: root not in cache, but cache is full\n";
          success := false;
        }
      }
    }
    if success {
      var pivots: Pivots.PivotTable, _: Option<seq<BT.G.Reference>> := s.cache.GetNodeInfo(BT.G.Root());
      var bounded: bool := ComputeBoundedKey(pivots, key);
      if !bounded {
        success := false;
        print "giving up; can't insert key at root because root is incorrects";
      }
    }
    if success {
      var weightSeq: uint64 := s.cache.NodeBucketsWeight(BT.G.Root());
      if WeightKeyUint64(key) + WeightMessageUint64(ValueMessage.Define(value)) + weightSeq <= MaxTotalBucketWeightUint64() {
        success := insertKeyValue(inout s, key, value);
      } else {
        runFlushPolicy(inout s, io);
        success := false;
      }
    }
  }
Dafny program verifier did not attempt verification