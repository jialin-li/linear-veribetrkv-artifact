  var Length: int  // immutable
  static method Alloc() returns (lru: LinearLru)
  {
    var size: uint64 := 128;
    var dlist: DList<uint64> := DList.DList<uint64>.Alloc(size + 1);
    var ptr_map: LinearHashMap<uint64> := LinearMutableMap.Constructor(size);
    lru := LinearLru(dlist, ptr_map);
  }
  method Free()
  {
    var LinearLru(dlist: DList.DList<uint64>, ptr_map: LinearMutableMap.LinearHashMap<uint64>) := this;
    dlist.Free();
    LinearMutableMap.Destructor(ptr_map);
  }
  method Remove(x: uint64)
  {
    var removed: Option<uint64> := LinearMutableMap.RemoveAndGet(inout self.ptr_map, x);
    if removed.Some? {
      var Some(p: uint64) := removed;
      self.dlist.Remove(p);
    }
  }
  method Use(x: uint64)
  {
    self.Remove(x);
    var p: uint64 := self.dlist.InsertBefore(0, x);
    LinearMutableMap.Insert(inout self.ptr_map, x, p);
  }
  method Next() returns (x: uint64)
  {
    var p: uint64 := this.dlist.Next(0);
    x := this.dlist.Get(p);
  }
  method NextOpt() returns (x: Option<uint64>)
  {
    var p: uint64 := this.dlist.Next(0);
    if p == 0 {
      x := None;
    } else {
      x := Some(this.dlist.Get(p));
    }
  }
Dafny program verifier did not attempt verification