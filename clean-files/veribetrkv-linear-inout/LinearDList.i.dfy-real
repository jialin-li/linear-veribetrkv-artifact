  var Length: int  // immutable
  function method Get(p: uint64): (a: A)
  {
    seq_get(this.nodes, p).data.value
  }
  function method Next(p: uint64): (p': uint64)
  {
    seq_get(this.nodes, p).next
  }
  function method Prev(p: uint64): (p': uint64)
  {
    seq_get(this.nodes, p).prev
  }
  static method BuildFreeStack(inout a: seq<Node<A>>, k: uint64)
  {
    var n: uint64 := k;
    shared_seq_length_bound(a);
    while n < seq_length(a)
    {
      mut_seq_set(inout a, n, Node(None, n - 1, 0));
      n := n + 1;
    }
  }
  static method Alloc(initial_len: uint64) returns (l: DList<A>)
  {
    var nodes: seq<Node<A>> := seq_alloc<Node<A>>(initial_len, Node(None, 0, 0));
    BuildFreeStack(inout nodes, 1);
    l := DList(nodes, initial_len - 1, [], [], seq(initial_len as nat, (p: int) => if p == 0 then sentinel else unused));
  }
  method Free()
  {
    var DList(nodes: seq<Node<A>>, freeStack: uint64, s: seq<A>, f: seq<int>, g: seq<int>) := this;
    var _: () := seq_free(nodes);
  }
  method Expand()
  {
    shared_seq_length_bound(self.nodes);
    var len: uint64 := seq_length(self.nodes);
    shared_seq_length_bound(self.nodes);
    var len': uint64 := if len < 9223372036854775807 then len + len else len + 1;
    var s: uint64 := self.freeStack;
    SeqResizeMut(inout self.nodes, len', Node(None, s, 0));
    BuildFreeStack(inout self.nodes, len + 1);
    inout self.freeStack := len' - 1;
  }
  method Remove(p: uint64)
  {
    var freeStack: uint64 := self.freeStack;
    var node: Node<A> := seq_get(self.nodes, p);
    var node_prev: Node<A> := seq_get(self.nodes, node.prev);
    mut_seq_set(inout self.nodes, node.prev, node_prev.(next := node.next));
    var node_next: Node<A> := seq_get(self.nodes, node.next);
    mut_seq_set(inout self.nodes, node.next, node_next.(prev := node.prev));
    mut_seq_set(inout self.nodes, p, Node(None, freeStack, 0));
    inout self.freeStack := p;
  }
  method {:timeLimitMultiplier 3} InsertAfter(p: uint64, a: A) returns (p': uint64)
  {
    p' := self.freeStack;
    var freeNode: Node<A> := seq_get(self.nodes, p');
    if p' == 0 || freeNode.data.Some? {
      self.Expand();
      p' := self.freeStack;
      freeNode := seq_get(self.nodes, p');
    }
    var node: Node<A> := seq_get(self.nodes, p);
    var node': Node<A> := Node(Some(a), node.next, p);
    mut_seq_set(inout self.nodes, p, node.(next := p'));
    var node_next: Node<A> := seq_get(self.nodes, node.next);
    mut_seq_set(inout self.nodes, node.next, node_next.(prev := p'));
    mut_seq_set(inout self.nodes, p', node');
    inout self.freeStack := freeNode.next;
  }
  method {:timeLimitMultiplier 3} InsertBefore(p: uint64, a: A) returns (p': uint64)
  {
    p' := self.freeStack;
    var freeNode: Node<A> := seq_get(self.nodes, p');
    if p' == 0 || freeNode.data.Some? {
      self.Expand();
      p' := self.freeStack;
      freeNode := seq_get(self.nodes, p');
    }
    var node: Node<A> := seq_get(self.nodes, p);
    var node': Node<A> := Node(Some(a), p, node.prev);
    mut_seq_set(inout self.nodes, p, node.(prev := p'));
    var node_prev: Node<A> := seq_get(self.nodes, node.prev);
    mut_seq_set(inout self.nodes, node.prev, node_prev.(next := p'));
    mut_seq_set(inout self.nodes, p', node');
    inout self.freeStack := freeNode.next;
  }
  method Clone() returns (l': DList<A>)
  {
    var DList(nodes: seq<Node<A>>, freeStack: uint64, s: seq<A>, f: seq<int>, g: seq<int>) := this;
    shared_seq_length_bound(nodes);
    var nodes': seq<Node<A>> := AllocAndCopy(nodes, 0, seq_length(nodes));
    l' := DList(nodes', freeStack, s, f, g);
  }
  static ghost const unused: int := -2
  static ghost const sentinel: int := -1
Dafny program verifier did not attempt verification