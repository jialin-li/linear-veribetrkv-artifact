  var Length: int  // immutable
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8, x9: T9): bool
    reads reads(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8, x9: T9): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): bool
    reads reads(x0, x1, x2, x3, x4, x5)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): bool
    reads reads(x0, x1, x2, x3, x4)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): set<object?>
    reads reads(x0, x1, x2, x3, x4)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function method grammar(): G
    ensures ValidGrammar(grammar())
  {
    GTuple([PSAMarshalling.grammar(), PSAMarshalling.grammar()])
  }
  function fromVal(v: V): (opkv: Option<Pkv>)
    requires ValInGrammar(v, grammar())
    ensures opkv.Some? ==> WF(opkv.value)
  {
    ghost var okeys: Option<Psa> := PSAMarshalling.fromVal(v.t[0]);
    ghost var omsgs: Option<Psa> := PSAMarshalling.fromVal(v.t[1]);
    if okeys.Some? && omsgs.Some? then
      ghost var pkv: Pkv := Pkv(okeys.value, omsgs.value);
      if WF(pkv) then
        Some(pkv)
      else
        None
    else
      None
  }
  function toVal(pkv: Pkv): (v: V)
    requires WF(pkv)
    ensures ValInGrammar(v, grammar())
  {
    VTuple([PSAMarshalling.toVal(pkv.keys), PSAMarshalling.toVal(pkv.messages)])
  }
  lemma parseMarshalledCorrect(pkv: Pkv)
    requires WF(pkv)
    ensures fromVal(toVal(pkv)) == Some(pkv)
  {
  }
  lemma uniqueMarshalling(v: V)
    requires ValInGrammar(v, grammar())
    requires fromVal(v).Some?
    ensures toVal(fromVal(v).value) == v
  {
    PSAMarshalling.uniqueMarshalling(v.t[0]);
    PSAMarshalling.uniqueMarshalling(v.t[1]);
  }
  method CheckStringLengths(offsets: seq<uint32>) returns (b: bool)
    requires |offsets| < Uint64UpperBound()
    ensures b <==> (0 < |offsets| ==> offsets[0] as nat <= KeyType.MaxLen() as nat) && forall i: int | 0 <= i < |offsets| - 1 :: offsets[i + 1] as int - offsets[i] as int <= KeyType.MaxLen() as int
  {
    var i: uint64 := 0;
    if 0 < |offsets| as uint64 && offsets[0] as uint64 > KeyType.MaxLen() {
      return false;
    }
    if |offsets| as nat <= 1 {
      return true;
    }
    while i + 1 < |offsets| as uint64
      invariant i as nat + 1 <= |offsets|
      invariant forall j: uint64 | 0 <= j < i :: offsets[j + 1] as int - offsets[j] as int <= KeyType.MaxLen() as int
    {
      var oi: int64 := offsets[i] as int64;
      var oip1: int64 := offsets[i + 1] as int64;
      if KeyType.MaxLen() as int64 < oip1 - oi {
        return false;
      }
      i := i + 1;
    }
    return true;
  }
  method ComputeWF(pkv: Pkv) returns (result: bool)
    requires PSA.WF(pkv.keys)
    requires PSA.WF(pkv.messages)
    ensures result == WF(pkv)
  {
    var vkl: bool := ComputeValidStringLens(pkv.keys, KeyType.MaxLen());
    var vml: bool := ComputeValidStringLens(pkv.messages, ValueType.MaxLen());
    assert IdentityMessage() !in IMessages(pkv.messages);
    result := PSA.psaNumStrings(pkv.keys) == PSA.psaNumStrings(pkv.messages) && vkl && vml;
    if result {
      assert WF(pkv);
    } else {
      assert !WF(pkv);
    }
  }
  method FromVal(v: V) returns (pkv: Option<Pkv>)
    requires ValInGrammar(v, grammar())
    requires ValidVal(v)
    ensures pkv == fromVal(v)
  {
    var okeys: Option<Psa> := PSAMarshalling.FromVal(v.t[0]);
    var omessages: Option<Psa> := PSAMarshalling.FromVal(v.t[1]);
    if okeys.Some? && omessages.Some? {
      var tmp: Pkv := Pkv(okeys.value, omessages.value);
      var wf: bool := ComputeWF(tmp);
      if wf {
        pkv := Some(tmp);
      } else {
        pkv := None;
      }
    } else {
      pkv := None;
    }
  }
  method ToVal(pkv: Pkv) returns (v: V)
    requires WF(pkv)
    ensures ValInGrammar(v, grammar())
    ensures v == toVal(pkv)
    ensures ValidVal(v)
  {
    var vkeys: V := PSAMarshalling.ToVal(pkv.keys);
    var vmessages: V := PSAMarshalling.ToVal(pkv.messages);
    v := VTuple([vkeys, vmessages]);
  }
  lemma PKVSizeOfV(pkv: Pkv)
    requires WF(pkv)
    ensures SizeOfV(toVal(pkv)) == 0 + SizeOfV(PSAMarshalling.toVal(pkv.keys)) + SizeOfV(PSAMarshalling.toVal(pkv.messages))
  {
    ghost var v: V := toVal(pkv);
    ghost var ov: V := v.t[0];
    ghost var dv: V := v.t[1];
    calc == {
      SizeOfV(v);
    ==
      {
        reveal_SeqSum();
      }
      SizeOfV(ov) + SeqSum(v.t[1..]);
    ==
      {
        reveal_SeqSum();
      }
      SizeOfV(ov) + SizeOfV(dv);
    }
  }
  lemma SizeOfVPackedStringArrayIsKeyListWeight(psa: PSA.Psa)
    requires PSA.WF(psa)
    requires ValidStringLens(PSA.I(psa), KeyType.MaxLen() as nat)
    ensures SizeOfV(PSAMarshalling.toVal(psa)) == BW.WeightKeyList(IKeys(psa)) + 2 * SizeOfV(VUint64(0))
    decreases |IKeys(psa)|
  {
    ghost var keys: seq<Key> := IKeys(psa);
    if |keys| == 0 {
    } else {
      ghost var prepsa: Psa := PSA.psaDropLast(psa);
      ghost var prekeys: seq<Key> := IKeys(prepsa);
      ghost var last: Key := Seq.Last(keys);
      SizeOfVPackedStringArrayIsKeyListWeight(prepsa);
      assert keys == prekeys + [Seq.Last(keys)];
      BW.WeightKeyListPushBack(prekeys, Seq.Last(keys));
      PSAMarshalling.PSASizeOfV(psa);
      PSAMarshalling.PSASizeOfV(prepsa);
    }
  }
  lemma SizeOfVPackedStringArrayIsMessageListWeight(psa: PSA.Psa)
    requires PSA.WF(psa)
    requires ValueType.ValidMessageBytestrings(PSA.I(psa))
    ensures SizeOfV(PSAMarshalling.toVal(psa)) == BW.WeightMessageList(IMessages(psa)) + 2 * SizeOfV(VUint64(0))
    decreases |PSA.I(psa)|
  {
    ghost var msgs: seq<Message> := IMessages(psa);
    assert msgs == bytestringSeq_to_MessageSeq(PSA.I(psa));
    if |msgs| == 0 {
    } else {
      ghost var prepsa: Psa := PSA.psaDropLast(psa);
      ghost var premsgs: seq<Message> := IMessages(prepsa);
      ghost var last: Message := Seq.Last(msgs);
      SizeOfVPackedStringArrayIsMessageListWeight(prepsa);
      bytestringSeq_to_MessageSeq_Additive(PSA.I(prepsa), [Seq.Last(PSA.I(psa))]);
      assert msgs == premsgs + [Seq.Last(msgs)];
      BW.WeightMessageListPushBack(premsgs, Seq.Last(msgs));
      PSAMarshalling.PSASizeOfV(psa);
      PSAMarshalling.PSASizeOfV(prepsa);
    }
  }
  lemma SizeOfVPackedKVIsBucketWeight(pkv: PackedKV.Pkv)
    requires PackedKV.WF(pkv)
    ensures SizeOfV(toVal(pkv)) == BW.WeightBucket(PackedKV.I(pkv)) + 4 * SizeOfV(VUint64(0))
    decreases NumKVPairs(pkv)
  {
    SizeOfVPackedStringArrayIsKeyListWeight(pkv.keys);
    SizeOfVPackedStringArrayIsMessageListWeight(pkv.messages);
    PKVSizeOfV(pkv);
  }
Dafny program verifier did not attempt verification