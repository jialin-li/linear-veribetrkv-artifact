  var Length: int  // immutable
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  method DebugAccumulate() returns (acc: DebugAccumulator.DebugAccumulator)
    requires false
  {
    acc := DebugAccumulator.EmptyAccumulator();
    var a: DebugAccumulator.AccRec := new DebugAccumulator.AccRec(|bits| as uint64, "uint64");
    acc := DebugAccumulator.AccPut(acc, "bits", a);
  }
  static predicate BitBSet(word: uint64, b: uint64)
    requires b < 64
  {
    BitsetLemmas.in_set_uint64(b, word)
  }
  lemma BitBSet0(b: uint64)
    requires b < 64
    ensures BitBSet(0, b) == false
  {
    BitsetLemmas.reveal_in_set_uint64();
    BitsetLemmas.reveal_in_set();
    BitsetLemmas.reveal_bit_and();
  }
  static predicate BitsSetAtIB(bitsSeq: seq<uint64>, i: nat, b: uint64)
    requires i < |bitsSeq|
    requires b < 64
  {
    true &&
    BitBSet(bitsSeq[i], b)
  }
  static predicate BitsSetAtC(bitsSeq: seq<uint64>, c: nat)
    requires c < 64 * |bitsSeq|
  {
    true &&
    BitsSetAtIB(bitsSeq, c / 64, (c % 64) as uint64)
  }
  static predicate ITimes64WithinUint64(i: nat)
  {
    true &&
    i * 64 < 18446744073709551616
  }
  predicate {:opaque} {:fuel 0, 0} Inv()
  {
    true &&
    |bits| < 18446744073709551616 / 128
  }
  static function {:opaque} {:fuel 0, 0} IPrefix(bits: seq<uint64>, i: int): (res: BitmapModelT)
    requires 0 <= i <= 64 * |bits|
    ensures |res| == i
    ensures forall j: int | 0 <= j < i :: res[j] == BitsSetAtC(bits, j)
  {
    if i == 0 then
      []
    else
      IPrefix(bits, i - 1) + [BitsSetAtC(bits, i - 1)]
  }
  function {:opaque} {:fuel 0, 0} I(): BitmapModelT
    requires Inv()
  {
    reveal Inv();
    IPrefix(bits, 64 * |bits|)
  }
  static method Constructor(len: uint64) returns (bm: Bitmap)
    requires len as int < 18446744073709551616 / 2
    requires len % 64 == 0
    ensures bm.Inv()
    ensures bm.I() == EmptyBitmap(len as int)
  {
    var bits: array<uint64> := NativeArrays.newArrayFill(len / 64, 0);
    bm := Bitmap(bits[..]);
    reveal bm.Inv();
    reveal bm.I();
    ghost var ghosty: bool := true;
    if ghosty {
      forall j: uint64 | 0 <= j < len
        ensures bm.I()[j] == EmptyBitmap(len as int)[j]
      {
        bm.BitBSet0(j % 64);
        reveal_IsSet();
        assert !IsSet(EmptyBitmap(len as int), j as int);
      }
    }
  }
  static function method SetBit(word: uint64, b: uint64): uint64
    requires b < 64
  {
    BitsetLemmas.set_bit_to_1_uint64(word, b)
  }
  method Set(c: uint64)
    requires old_self.Inv()
    requires c as nat < Len(old_self.I())
    ensures self.Inv()
    ensures self.I() == BitSet(old_self.I(), c as int)
  {
    reveal Inv();
    reveal I();
    var i: uint64 := c / 64;
    var b: uint64 := c % 64;
    var word: uint64 := SetBit(self.bits[i], b);
    inout self.bits := self.bits[i := word];
    ghost var ghosty: bool := true;
    if ghosty {
      reveal_BitSet();
      reveal_IsSet();
      forall c': int | 0 <= c' as int < 64 * |self.bits|
        ensures self.I()[c'] == BitSet(old_self.I(), c as int)[c']
      {
        ghost var i': int := c' / 64;
        ghost var b': int := c' % 64;
        if i' == i as nat {
          if b' == b as nat {
            BitsetLemmas.set_bit_to_1_self_uint64(old_self.bits[i], b);
            assert self.I()[c'] == BitSet(old_self.I(), c as int)[c'];
          } else {
            BitsetLemmas.set_bit_to_1_other_uint64(old_self.bits[i], b, b' as uint64);
            assert self.I()[c'] == BitSet(old_self.I(), c as int)[c'];
          }
        } else {
          assert self.I()[c'] == BitSet(old_self.I(), c as int)[c'];
        }
      }
    }
  }
  static function method UnsetBit(word: uint64, b: uint64): uint64
    requires b < 64
  {
    BitsetLemmas.set_bit_to_0_uint64(word, b)
  }
  method Unset(c: uint64)
    requires old_self.Inv()
    requires c as nat < Len(old_self.I())
    ensures self.Inv()
    ensures self.I() == BitUnset(old_self.I(), c as int)
  {
    reveal Inv();
    reveal I();
    var i: uint64 := c / 64;
    var b: uint64 := c % 64;
    var word: uint64 := UnsetBit(self.bits[i], b);
    inout self.bits := self.bits[i := word];
    ghost var ghosty: bool := true;
    if ghosty {
      reveal_BitUnset();
      reveal_IsSet();
      forall c': int | 0 <= c' as int < 64 * |self.bits|
        ensures self.I()[c'] == BitUnset(old_self.I(), c as int)[c']
      {
        ghost var i': int := c' / 64;
        ghost var b': int := c' % 64;
        if i' == i as nat {
          if b' == b as nat {
            BitsetLemmas.set_bit_to_0_self_uint64(old_self.bits[i], b);
            assert self.I()[c'] == BitUnset(old_self.I(), c as int)[c'];
          } else {
            BitsetLemmas.set_bit_to_0_other_uint64(old_self.bits[i], b, b' as uint64);
            assert self.I()[c'] == BitUnset(old_self.I(), c as int)[c'];
          }
        } else {
          assert self.I()[c'] == BitUnset(old_self.I(), c as int)[c'];
        }
      }
    }
  }
  function method GetIsSet(c: uint64): (result: bool)
    requires Inv()
    requires c as nat < Len(I())
    ensures result == IsSet(I(), c as int)
  {
    reveal Inv();
    reveal I();
    var i: uint64 := c / 64;
    var b: uint64 := c % 64;
    reveal_IsSet();
    BitsetLemmas.in_set_uint64(b, this.bits[i])
  }
  lemma lemma_IsAllocNone()
    requires Inv()
    requires forall k: int | 0 <= k < |this.bits| :: this.bits[k] == 18446744073709551615
    ensures BitAlloc(I()).None?
  {
    reveal Inv();
    reveal I();
    BitmapModel.reveal_IsSet();
    ghost var bm: BitmapModelT := I();
    if BitAlloc(bm).Some? {
      ghost var c: uint64 := BitAlloc(bm).value as uint64;
      LemmaBitAllocResult(bm);
      ghost var i: uint64 := c / 64;
      ghost var b: uint64 := c % 64;
      assert this.bits[i] == 18446744073709551615;
      BitsetLemmas.all1s_is_set_uint64(b);
    }
  }
  lemma lemma_IsAllocSome(i: uint64, b: uint64)
    requires Inv()
    requires 0 <= i as int < |this.bits|
    requires 0 <= b < 64
    requires forall k: int | 0 <= k < i as int :: this.bits[k] == 18446744073709551615
    requires forall l: uint64 | 0 <= l < b :: BitsetLemmas.in_set_uint64(l, this.bits[i])
    requires !BitsetLemmas.in_set_uint64(b, this.bits[i])
    ensures BitAlloc(I()) == Some(64 * i as int + b as int)
  {
    reveal Inv();
    reveal I();
    BitmapModel.reveal_IsSet();
    ghost var bm: seq<bool> := I();
    ghost var c: uint64 := 64 * i + b;
    assert !bm[c];
    LemmaBitAllocResultStronger(bm);
    if BitAlloc(bm).None? {
      assert c as int < |bm|;
      assert IsSet(bm, c as int);
      assert false;
    }
    if BitAlloc(bm).Some? && BitAlloc(bm).value > c as int {
      assert IsSet(bm, c as int);
      assert false;
    }
    if BitAlloc(bm).Some? && BitAlloc(bm).value < c as int {
      ghost var c0: uint64 := BitAlloc(bm).value as uint64;
      ghost var i0: uint64 := c0 / 64;
      ghost var b0: uint64 := c0 % 64;
      if i0 == i {
        assert b0 < b;
        assert false;
      } else {
        assert bits[i0] == 18446744073709551615;
        BitsetLemmas.all1s_is_set_uint64(b0);
        assert false;
      }
    }
  }
  method Alloc() returns (res: Option<uint64>)
    requires Inv()
    ensures res.Some? <==> BitAlloc(I()).Some?
    ensures res.Some? ==> res.value as int == BitAlloc(I()).value
  {
    reveal Inv();
    reveal I();
    var i: uint64 := 0;
    while i < |this.bits| as uint64
      invariant 0 <= i as int <= |this.bits|
      invariant forall k: uint64 | 0 <= k < i :: this.bits[k] == 18446744073709551615
    {
      if this.bits[i] != 18446744073709551615 {
        var j: uint64 := 0;
        while j < 64
          invariant 0 <= j <= 64
          invariant forall l: uint64 | 0 <= l < j :: BitsetLemmas.in_set_uint64(l, this.bits[i])
        {
          if !BitsetLemmas.in_set_uint64(j, this.bits[i]) {
            lemma_IsAllocSome(i, j);
            res := Some(64 * i + j);
            return;
          }
          j := j + 1;
        }
        BitsetLemmas.all_in_set_implies_all1s_uint64(this.bits[i]);
        assert false;
      }
      i := i + 1;
    }
    res := None;
    lemma_IsAllocNone();
  }
  static method UnionConstructor(a: Bitmap, b: Bitmap) returns (bm: Bitmap)
    requires a.Inv()
    requires b.Inv()
    requires Len(a.I()) == Len(b.I())
    ensures bm.Inv()
    ensures bm.I() == BitUnion(a.I(), b.I())
  {
    reveal a.I();
    reveal b.I();
    var len: uint64 := |a.bits| as uint64;
    var bits: array<uint64> := new uint64[len];
    var i: uint64 := 0;
    while i < |a.bits| as uint64
      invariant 0 <= i as int <= |a.bits|
      invariant fresh(bits)
      invariant a.I() == old(a.I())
      invariant b.I() == old(b.I())
      invariant |b.bits| == |a.bits|
      invariant forall j: int | 0 <= j < i as int :: bits[j] == BitsetLemmas.bit_or_uint64(a.bits[j], b.bits[j])
    {
      bits[i] := BitsetLemmas.bit_or_uint64(a.bits[i], b.bits[i]);
      i := i + 1;
    }
    bm := Bitmap(bits[..]);
    reveal bm.Inv();
    reveal bm.I();
    ghost var x: seq<bool> := bm.I();
    ghost var y: seq<bool> := BitUnion(a.I(), b.I());
    assert |x| == |y|;
    forall c: uint64 | 0 <= c as int < |x|
      ensures x[c] == y[c]
    {
      reveal_IsSet();
      ghost var i: uint64 := c / 64;
      ghost var t: uint64 := c % 64;
      calc == {
        x[c];
      ==
        BitBSet(bm.bits[i], t);
      ==
        {
          BitsetLemmas.bit_or_is_union_uint64(a.bits[i], b.bits[i], t);
        }
        BitBSet(a.bits[i], t) || BitBSet(b.bits[i], t);
      ==
        IsSet(y, c as int);
      ==
        y[c];
      }
    }
  }
  static method CloneConstructor(a: Bitmap) returns (bm: Bitmap)
    requires a.Inv()
    ensures bm.Inv()
    ensures bm.I() == a.I()
  {
    bm := Bitmap(a.bits);
    reveal bm.I();
    reveal bm.Inv();
  }
  method Free()
  {
    var Bitmap(_: seq<uint64>) := this;
  }
Dafny program verifier did not attempt verification