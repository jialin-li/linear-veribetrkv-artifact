  var Length: int  // immutable
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): bool
    reads reads(x0, x1, x2, x3, x4)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): set<object?>
    reads reads(x0, x1, x2, x3, x4)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): bool
    reads reads(x0, x1, x2, x3, x4, x5)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  method computeJournalBlockOfByteSeq(s: seq<byte>, i: uint64) returns (jb: Option<JournalBlock>)
    requires |s| < 18446744073709551615
    requires i as int + 4096 <= |s|
    ensures jb == JournalBlockOfByteSeq(s[i .. i + 4096])
  {
    reveal_JournalBlockOfByteSeq();
    lemma_seq_slice_slice(s, i as int, (i + 4096) as int, 0, 32);
    assert s[i .. i + 32] == s[i .. i + 4096][0 .. 32];
    lemma_seq_slice_slice(s, i as int, (i + 4096) as int, 32, 4096);
    assert s[i + 32 .. i + 4096] == s[i .. i + 4096][32 .. 4096];
    var chunk: seq<byte> := s[i + 32 .. i + 4096];
    D.reveal_ChecksumChecksOut();
    var c: seq<byte> := CRC32_C_Impl.compute_crc32c_padded(chunk);
    if c == s[i .. i + 32] {
      jb := Some(chunk);
    } else {
      jb := None;
    }
  }
  method computeJournalRangeOfByteSeq(s: seq<byte>) returns (res: Option<JournalRange>)
    requires |s| < 18446744073709551616
    ensures res == JournalRangeOfByteSeq(s)
    ensures res.Some? ==> forall i: int | 0 <= i < |res.value| :: |res.value[i]| == 4064
  {
    if |s| as uint64 % 4096 != 0 {
      return None;
    }
    var numBlocks: uint64 := |s| as uint64 / 4096;
    var i: uint64 := numBlocks;
    var ar: array<JournalBlock> := new JournalBlock[numBlocks];
    calc == {
      JournalRangeOfByteSeq(s[4096 * i..]);
    ==
      JournalRangeOfByteSeq([]);
    ==
      {
        reveal_JournalRangeOfByteSeq();
      }
      Some([]);
    ==
      {
        assert ar[i..] == [];
      }
      Some(ar[i..]);
    }
    while i > 0
      invariant 0 <= i <= numBlocks
      invariant JournalRangeOfByteSeq(s[4096 * i..]) == Some(ar[i..])
      invariant forall j: uint64 | i <= j < numBlocks :: |ar[j]| == 4064
    {
      ghost var cur: seq<seq<byte>> := ar[i..];
      i := i - 1;
      var block: Option<JournalBlock> := computeJournalBlockOfByteSeq(s, 4096 * i);
      assert s[4096 * i .. 4096 * (i + 1)] == s[4096 * i..][0 .. 4096];
      assert s[4096 * (i + 1)..] == s[4096 * i..][4096..];
      if block.Some? {
        assert |block.value| == 4064 by {
          reveal_JournalBlockOfByteSeq();
        }
        ar[i] := block.value;
        calc == {
          JournalRangeOfByteSeq(s[4096 * i..]);
        ==
          {
            reveal_JournalRangeOfByteSeq();
          }
          Some([block.value] + cur);
        ==
          {
            assert ar[i..] == [ar[i]] + cur;
          }
          Some(ar[i..]);
        }
      } else {
        assert JournalRangeOfByteSeq(s) == None by {
          reveal_JournalRangeOfByteSeq();
          if JournalRangeOfByteSeq(s).Some? {
            JournalBytesSplit(s, numBlocks as int, i as int);
            assert false;
          }
        }
        return None;
      }
    }
    assert i == 0;
    res := Some(ar[..]);
  }
  method doConcat(s: seq<JournalBlock>) returns (t: seq<byte>)
    requires forall i: int | 0 <= i < |s| :: |s[i]| == 4064
    requires 4064 * |s| < 18446744073709551615
    ensures t == concatSeq(s)
  {
    var ar: array<byte> := new byte[4064 * |s| as uint64];
    var i: uint64 := 0;
    calc == {
      concatSeq(s[..i]);
    ==
      concatSeq([]);
    ==
      {
        reveal_concatSeq();
      }
      [];
    }
    while i < |s| as uint64
      invariant 0 <= i <= |s| as uint64
      invariant ar[0 .. 4064 * i] == concatSeq(s[..i])
    {
      NativeArrays.CopySeqIntoArray(s[i], 0, ar, i * 4064, 4064);
      calc == {
        ar[0 .. 4064 * (i + 1)];
      ==
        ar[0 .. 4064 * i] + s[i];
      ==
        concatSeq(s[..i]) + s[i];
      ==
        {
          reveal_concatSeq();
          assert DropLast(s[..i + 1]) == s[..i];
          assert Last(s[..i + 1]) == s[i];
        }
        concatSeq(s[..i + 1]);
      }
      i := i + 1;
    }
    assert s[..i] == s;
    t := ar[..];
  }
  method ParseHeader(s: JournalBlock) returns (nentries: uint32, nblocks: uint32)
    requires |s| >= 8
    requires |s| < 18446744073709551616
    ensures parseHeader(s) == Header(nentries as int, nblocks as int)
  {
    reveal_parseHeader();
    nentries := Unpack_LittleEndian_Uint32(s, 0);
    nblocks := Unpack_LittleEndian_Uint32(s, 4);
  }
  method ParseJournalRangeOfBytes(s: seq<byte>, len: uint64) returns (res: Option<seq<JournalEntry>>)
    requires 0 <= 8 <= |s| < 18446744073709551616
    requires 0 <= len
    ensures res == parseJournalRangeOfBytes(s, len as int)
    ensures res.Some? ==> |res.value| <= |s|
  {
    var ar: array<JournalEntry> := new JournalEntry[len];
    var i: uint64 := 0;
    var idx: uint64 := 8;
    while i < len
      invariant 0 <= i <= len
      invariant 0 <= idx as int <= |s|
      invariant ar.Length == len as int
      invariant parseEntries(s, (len - i) as int, idx as int).None? ==> true && parseEntries(s, len as int, 8).None?
      invariant parseEntries(s, (len - i) as int, idx as int).Some? ==> parseEntries(s, len as int, 8).Some? && parseEntries(s, len as int, 8).value == ar[..i] + parseEntries(s, (len - i) as int, idx as int).value
      invariant i <= idx
    {
      var idx0: uint64 := idx;
      if !(4 <= |s| as uint64 - idx0) {
        return None;
      }
      var idx1: uint64 := idx0 + 4;
      var keyLen: uint32 := Unpack_LittleEndian_Uint32(s, idx0);
      if !(4 + keyLen as uint64 + 4 <= |s| as uint64 - idx && keyLen as uint64 <= KeyType.MaxLen()) {
        return None;
      }
      var key: Key := s[idx1 .. idx1 + keyLen as uint64];
      var idx2: uint64 := idx1 + keyLen as uint64;
      var valueLen: uint32 := Unpack_LittleEndian_Uint32(s, idx2);
      var idx3: uint64 := idx2 + 4;
      if !(valueLen as uint64 <= ValueType.MaxLen() && valueLen as uint64 <= |s| as uint64 - idx3) {
        return None;
      }
      var value: Value := s[idx3 .. idx3 + valueLen as uint64];
      var idx4: uint64 := idx3 + valueLen as uint64;
      var je: JournalEntry := JournalInsert(key, value);
      ar[i] := je;
      i := i + 1;
      idx := idx4;
    }
    res := Some(ar[..]);
    calc == {
      ar[..];
    ==
      {
        assert parseEntries(s, (len - i) as int, idx as int).value == [];
      }
      ar[..i] + parseEntries(s, (len - i) as int, idx as int).value;
    ==
      parseEntries(s, len as int, 8).value;
    }
  }
  method ParseJournalRange(jr: JournalRange) returns (res: Option<seq<JournalEntry>>)
    requires forall i: int | 0 <= i < |jr| :: |jr[i]| == 4064
    requires |jr| <= 4294967296
    ensures res.Some? ==> |res.value| <= |jr| * 4064
    ensures res == parseJournalRange(jr)
  {
    if |jr| as uint64 == 0 {
      return Some([]);
    } else {
      var nentries: uint32, nblocks: uint32 := ParseHeader(jr[0]);
      if 0 <= nentries && 1 <= nblocks as uint64 <= |jr| as uint64 {
        lemma_concatSeqLen_ge_elemLen(jr[..nblocks], 0);
        lemma_concatSeqLen_le_mul(jr[..nblocks], 4064);
        var c: seq<byte> := doConcat(jr[..nblocks]);
        var p1: Option<seq<JournalEntry>> := ParseJournalRangeOfBytes(c, nentries as uint64);
        if p1.Some? {
          var p2: Option<seq<JournalEntry>> := ParseJournalRange(jr[nblocks..]);
          if p2.Some? {
            return Some(p1.value + p2.value);
          } else {
            return None;
          }
        } else {
          return None;
        }
      } else {
        return None;
      }
    }
  }
Dafny program verifier did not attempt verification