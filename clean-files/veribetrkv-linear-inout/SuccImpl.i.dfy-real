  var Length: int  // immutable
  method composeGenerator(cache: CacheImpl.LMutCache, ref: BT.G.Reference, r: uint64, g: lOption<BGI.Generator>, ghost acc: seq<Bucket>, ghost bucket: Bucket, start: UI.RangeStart)
      returns (g': BGI.Generator)
  {
    var g2: BGI.Generator := cache.NodeBucketGen(ref, r, start);
    match g {
      case lSome(g1) =>
        g' := BGI.Generator.GenCompose(g1, g2);
      case lNone() =>
        g' := g2;
    }
  }
  method getPathInternal(inout s: ImplVariables, io: DiskIOHandler, key: Key, ghost acc: seq<Bucket>, g: lOption<BGI.Generator>, start: UI.RangeStart, upTo: Option<Key>, maxToFind: uint64, ref: BT.G.Reference, counter: uint64, pivots: PivotTable, children: Option<seq<BT.G.Reference>>)
      returns (res: Option<UI.SuccResultList>)
    modifies io
  {
    var r: uint64 := Pivots.ComputeRoute(pivots, key);
    var upTo': Option<Key>;
    if pivots[r + 1].Max_Element? {
      upTo' := upTo;
    } else {
      var ub: Key := ComputeGetKey(pivots, r + 1);
      if upTo.Some? {
        var c: int32 := cmp(upTo.value, ub);
        var k: Key := if c < 0 then upTo.value else ub;
        upTo' := Some(k);
      } else {
        upTo' := Some(ub);
      }
    }
    if children.Some? {
      if counter == 0 {
        print "getPathInternal failure: count ran down\n";
        res := None;
        match g {
          case lSome(g1) =>
            g1.Free();
          case lNone() =>
        }
      } else {
        var g': BGI.Generator := composeGenerator(s.cache, ref, r, g, acc, bucket, start);
        res := getPath(inout s, io, key, acc', lSome(g'), start, upTo', maxToFind, children.value[r], counter - 1);
      }
    } else {
      var g': BGI.Generator := composeGenerator(s.cache, ref, r, g, acc, bucket, start);
      var res0: UI.SuccResultList := BucketSuccessorLoopImpl.GetSuccessorInBucketStack(g', acc', maxToFind, start, upTo');
      res := Some(res0);
    }
  }
  method getPath(inout s: ImplVariables, io: DiskIOHandler, key: Key, ghost acc: seq<Bucket>, g: lOption<BGI.Generator>, start: UI.RangeStart, upTo: Option<Key>, maxToFind: uint64, ref: BT.G.Reference, counter: uint64)
      returns (res: Option<UI.SuccResultList>)
    modifies io
  {
    var incache: bool := s.cache.InCache(ref);
    if incache {
      var pivots: Pivots.PivotTable, children: Option<seq<BT.G.Reference>> := s.cache.GetNodeInfo(ref);
      var boundedkey: bool := ComputeBoundedKey(pivots, key);
      if boundedkey {
        res := getPathInternal(inout s, io, key, acc, g, start, upTo, maxToFind, ref, counter, pivots, children);
        s.lru.Use(ref);
      } else {
        match g {
          case lSome(g1) =>
            g1.Free();
          case lNone() =>
        }
        print "getPath: look up key is not bounded in path nodes\n";
        res := None;
      }
    } else {
      match g {
        case lSome(g1) =>
          g1.Free();
        case lNone() =>
      }
      if CacheImpl.CacheCount(s.cache) + |s.outstandingBlockReads| as uint64 <= MaxCacheSizeUint64() - 1 {
        PageInNodeReq(inout s, io, ref);
      } else {
        print "getPath: Can't page in anything because cache is full\n";
      }
      res := None;
    }
  }
  method doSucc(inout s: ImplVariables, io: DiskIOHandler, start: UI.RangeStart, maxToFind: uint64)
      returns (res: Option<UI.SuccResultList>)
    modifies io
  {
    var startKey: seq<NativeTypes.byte> := if start.NegativeInf? then [] else start.key;
    res := getPath(inout s, io, startKey, [], lNone, start, None, maxToFind, BT.G.Root(), 40);
  }
Dafny program verifier did not attempt verification