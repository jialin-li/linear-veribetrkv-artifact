  var Length: int  // immutable
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  predicate eq_map<A(!new), B>(x: map<A, B>, y: map<A, B>)
    ensures eq_map(x, y) ==> x == y
  {
    (forall a: A :: 
      a in x <==> a in y) &&
    forall a: A :: 
      a in x ==>
        x[a] == y[a]
  }
  function domain<U(!new), V>(m: map<U, V>): set<U>
    ensures forall i: U :: i in domain(m) <==> i in m
  {
    set s: U | s in m
  }
  function union<U(!new), V>(m: map<U, V>, m': map<U, V>): map<U, V>
    requires m.Keys !! m'.Keys
    ensures forall i: U :: i in union(m, m') <==> i in m || i in m'
    ensures forall i: U :: i in m ==> union(m, m')[i] == m[i]
    ensures forall i: U :: i in m' ==> union(m, m')[i] == m'[i]
  {
    map i: U {:auto_trigger} | i in domain(m) + domain(m') :: if i in m then m[i] else m'[i]
  }
  function RemoveElt<U(!new), V>(m: map<U, V>, elt: U): map<U, V>
    requires elt in m
    ensures |RemoveElt(m, elt)| == |m| - 1
    ensures !(elt in RemoveElt(m, elt))
    ensures forall elt': U :: elt' in RemoveElt(m, elt) <==> elt' in m && elt' != elt
    decreases |m|
  {
    ghost var m': map<U, V> := map elt': U | elt' in m && elt' != elt :: m[elt'];
    lemma_map_remove_one(m, m', elt);
    m'
  }
  lemma lemma_non_empty_map_has_elements<S(!new), T>(m: map<S, T>)
    requires |m| > 0
    ensures exists x: S :: x in m
  {
    ghost var dom: set<S> := domain(m);
    ghost var empty: map<S, T> := map[];
    assert m.Keys !! empty.Keys;
    assert m != map[];
    assert |dom| > 0;
  }
  lemma lemma_MapSizeIsDomainSize<S(!new), T>(dom: set<S>, m: map<S, T>)
    requires dom == domain(m)
    ensures |m| == |dom|
  {
    if |m| == 0 {
      assert |dom| == 0;
    } else {
      lemma_non_empty_map_has_elements(m);
      ghost var x: S :| x in m;
      assert x in m;
      assert x in dom;
      ghost var m': map<S, T> := map y: S | y in m && y != x :: m[y];
      ghost var dom': set<S> := dom - {x};
      lemma_MapSizeIsDomainSize(dom', m');
      assert |dom'| == |m'|;
      assert |dom| == |dom'| + 1;
      assert m == m'[x := m[x]];
      assert |m| == |m'| + 1;
    }
  }
  lemma lemma_maps_decrease<S(!new), T>(before: map<S, T>, after: map<S, T>, item_removed: S)
    requires item_removed in before
    requires after == map s: S | s in before && s != item_removed :: before[s]
    ensures |after| < |before|
  {
    assert !(item_removed in after);
    forall i: S | i in after
      ensures i in before
    {
      assert i in before;
    }
    ghost var domain_before: set<S> := set s: S | s in before;
    ghost var domain_after: set<S> := set s: S | s in after;
    lemma_MapSizeIsDomainSize(domain_before, before);
    lemma_MapSizeIsDomainSize(domain_after, after);
    if |after| == |before| {
      if domain_before == domain_after {
        assert !(item_removed in domain_after);
        assert false;
      } else {
        assert |domain_after| == |domain_before|;
        ghost var diff: set<S> := domain_after - domain_before;
        assert forall i: S :: i in domain_after ==> i in domain_before;
        assert |diff| == 0;
        ghost var diff2: set<S> := domain_before - domain_after;
        assert item_removed in diff2;
        assert |diff2| >= 1;
        assert false;
      }
    } else if |after| > |before| {
      ghost var diff: set<S> := domain_after - domain_before;
      assert |domain_after| > |domain_before|;
      if |diff| == 0 {
        assert |diff| == |domain_after| - |domain_after * domain_before|;
        assert |domain_after * domain_before| <= |domain_before|;
        assert |domain_after| == |domain_after * domain_before|;
        assert |domain_after| <= |domain_before|;
        assert false;
      } else {
        assert |diff| >= 1;
        ghost var diff_item: S :| diff_item in diff;
        assert diff_item in domain_after;
        assert !(diff_item in domain_before);
        assert false;
      }
      assert false;
    }
  }
  lemma lemma_map_remove_one<S(!new), T>(before: map<S, T>, after: map<S, T>, item_removed: S)
    requires item_removed in before
    requires after == map s: S | s in before && s != item_removed :: before[s]
    ensures |after| + 1 == |before|
  {
    lemma_maps_decrease(before, after, item_removed);
    ghost var domain_before: set<S> := domain(before);
    ghost var domain_after: set<S> := domain(after);
    lemma_MapSizeIsDomainSize(domain_before, before);
    lemma_MapSizeIsDomainSize(domain_after, after);
    assert domain_after + {item_removed} == domain_before;
  }
Dafny program verifier did not attempt verification