  var Length: int  // immutable
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): bool
    reads reads(x0, x1, x2, x3, x4)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4): set<object?>
    reads reads(x0, x1, x2, x3, x4)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): bool
    reads reads(x0, x1, x2, x3, x4, x5)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6): bool
    reads reads(x0, x1, x2, x3, x4, x5, x6)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5, x6)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(): bool
    reads reads()
  function reads(): set<object?>
    reads reads()
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0): bool
    reads reads(x0)
  function reads(x0: T0): set<object?>
    reads reads(x0)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1): bool
    reads reads(x0, x1)
  function reads(x0: T0, x1: T1): set<object?>
    reads reads(x0, x1)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8, x9: T9): bool
    reads reads(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8, x9: T9): set<object?>
    reads reads(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2): bool
    reads reads(x0, x1, x2)
  function reads(x0: T0, x1: T1, x2: T2): set<object?>
    reads reads(x0, x1, x2)
  function requires(x0: T0, x1: T1, x2: T2, x3: T3): bool
    reads reads(x0, x1, x2, x3)
  function reads(x0: T0, x1: T1, x2: T2, x3: T3): set<object?>
    reads reads(x0, x1, x2, x3)
  predicate RefAvailable(s: ImplVariables, ref: BT.G.Reference)
    requires s.Ready? && s.W()
  {
    ref !in s.ephemeralIndirectionTable.I().graph &&
    ref !in s.cache.I() &&
    ref != BT.G.Root()
  }
  method getFreeRef(s: ImplVariables) returns (ref: Option<BT.G.Reference>)
    requires s.Ready?
    requires s.W()
    ensures s.Ready?
    ensures s.W()
    ensures ref.Some? ==> RefAvailable(s, ref.value)
    ensures forall ref1: NativeTypes.uint64 | ref1 in s.cache.I() :: Some(ref1) != ref
    ensures (forall r: uint64 | r in s.ephemeralIndirectionTable.graph :: r <= s.ephemeralIndirectionTable.refUpperBound) && ref == BookkeepingModel.getFreeRef(s.I(), s.ephemeralIndirectionTable.refUpperBound)
  {
    BookkeepingModel.reveal_getFreeRef();
    ghost var getable: IndirectionTable := s.I().ephemeralIndirectionTable;
    s.ephemeralIndirectionTable.UpperBounded();
    var upperBound: uint64 := s.ephemeralIndirectionTable.refUpperBound;
    var i: uint64 := upperBound;
    if i == 18446744073709551615 {
      return None;
    }
    i := i + 1;
    while true
      invariant i >= 1
      invariant forall r: uint64 | r in s.ephemeralIndirectionTable.graph :: r < i
      invariant BookkeepingModel.getFreeRefIterate(s.I(), i) == BookkeepingModel.getFreeRef(s.I(), upperBound)
      decreases 18446744073709551616 - i as int
    {
      var cacheLookup: bool := s.cache.InCache(i);
      if !cacheLookup {
        return Some(i);
      }
      if i == 18446744073709551615 {
        return None;
      } else {
        i := i + 1;
      }
    }
  }
  method getFreeRef2(s: ImplVariables, avoid: BT.G.Reference) returns (ref: Option<BT.G.Reference>)
    requires s.Ready?
    requires s.W()
    ensures ref.Some? ==> ref.value != avoid
    ensures ref.Some? ==> RefAvailable(s, ref.value)
    ensures forall ref1: NativeTypes.uint64 | ref1 in s.cache.I() :: Some(ref1) != ref
    ensures (forall r: uint64 | r in s.ephemeralIndirectionTable.graph :: r <= s.ephemeralIndirectionTable.refUpperBound) && ref == BookkeepingModel.getFreeRef2(s.I(), avoid, s.ephemeralIndirectionTable.refUpperBound)
  {
    BookkeepingModel.reveal_getFreeRef2();
    s.ephemeralIndirectionTable.UpperBounded();
    var upperBound: uint64 := s.ephemeralIndirectionTable.refUpperBound;
    var i: uint64 := upperBound;
    if i == 18446744073709551615 {
      return None;
    }
    i := i + 1;
    while true
      invariant i >= 1
      invariant forall r: uint64 | r in s.ephemeralIndirectionTable.I().graph :: r < i
      invariant BookkeepingModel.getFreeRef2Iterate(s.I(), avoid, i) == BookkeepingModel.getFreeRef2(s.I(), avoid, upperBound)
      decreases 18446744073709551616 - i as int
    {
      if i != avoid {
        var cacheLookup: bool := s.cache.InCache(i);
        if !cacheLookup {
          return Some(i);
        }
      }
      if i == 18446744073709551615 {
        return None;
      } else {
        i := i + 1;
      }
    }
  }
  lemma lemmaIndirectionTableLocIndexValid(s: ImplVariables, ref: BT.G.Reference)
    requires s.W()
    requires s.WriteAllocConditions()
    ensures ref in s.ephemeralIndirectionTable.locs ==> 0 <= s.ephemeralIndirectionTable.locs[ref].addr as int / NodeBlockSize() < NumBlocks() && s.ephemeralIndirectionTable.locs[ref].addr as int / NodeBlockSize() * NodeBlockSize() == s.ephemeralIndirectionTable.locs[ref].addr as int
  {
    if ref in s.ephemeralIndirectionTable.locs {
      reveal_ConsistentBitmapInteral();
      ghost var loc: Location := s.ephemeralIndirectionTable.locs[ref];
      ghost var i: int := loc.addr as int / NodeBlockSize();
      assert s.ephemeralIndirectionTable.I().locs[ref] == loc;
      assert loc in s.ephemeralIndirectionTable.I().locs.Values;
      assert DiskLayout.ValidNodeLocation(loc);
      DiskLayout.reveal_ValidNodeAddr();
      assert i * NodeBlockSize() == loc.addr as int;
      assert IT.IndirectionTable.IsLocAllocBitmap(s.blockAllocator.I().ephemeral, i);
    }
  }
  lemma freeIndirectionTableLocCorrect(s: ImplVariables, s': ImplVariables, ref: BT.G.Reference, j: Option<int>)
    requires s.WriteAllocConditions()
    requires s.W()
    requires s'.W()
    requires s'.Ready?
    requires forall r: NativeTypes.uint64 | r != ref :: MapsAgreeOnKey(s.ephemeralIndirectionTable.I().locs, s'.ephemeralIndirectionTable.I().locs, r)
    requires ref !in s'.ephemeralIndirectionTable.I().locs
    requires j.Some? ==> 0 <= j.value < NumBlocks()
    requires j.Some? ==> ref in s.ephemeralIndirectionTable.I().locs
    requires j.Some? ==> s.ephemeralIndirectionTable.I().locs[ref].addr as int == j.value * NodeBlockSize()
    requires j.Some? ==> s'.blockAllocator.I() == BlockAllocatorModel.MarkFreeEphemeral(s.blockAllocator.I(), j.value)
    requires j.None? ==> s'.blockAllocator == s.blockAllocator
    requires j.None? ==> ref !in s.ephemeralIndirectionTable.I().locs
    ensures forall i: int :: s'.ephemeralIndirectionTable.I().IsLocAllocIndirectionTable(i) <==> IT.IndirectionTable.IsLocAllocBitmap(s'.blockAllocator.I().ephemeral, i)
    ensures BlockAllocatorModel.Inv(s'.blockAllocator.I())
    ensures BC.AllLocationsForDifferentRefsDontOverlap(s'.ephemeralIndirectionTable.I())
    ensures forall loc: Location | loc in s'.ephemeralIndirectionTable.I().locs.Values :: DiskLayout.ValidNodeLocation(loc)
  {
    reveal_ConsistentBitmapInteral();
    BitmapModel.reveal_IsSet();
    BitmapModel.reveal_BitUnset();
    lemmaIndirectionTableLocIndexValid(s, ref);
    forall r1: NativeTypes.uint64, r2: NativeTypes.uint64 | r1 in s'.ephemeralIndirectionTable.I().locs && r2 in s'.ephemeralIndirectionTable.I().locs
      ensures BC.LocationsForDifferentRefsDontOverlap(s'.ephemeralIndirectionTable.I(), r1, r2)
    {
      assert MapsAgreeOnKey(s.ephemeralIndirectionTable.I().locs, s'.ephemeralIndirectionTable.I().locs, r1);
      assert MapsAgreeOnKey(s.ephemeralIndirectionTable.I().locs, s'.ephemeralIndirectionTable.I().locs, r2);
    }
    forall loc: Location | loc in s'.ephemeralIndirectionTable.I().locs.Values
      ensures DiskLayout.ValidNodeLocation(loc)
    {
      ghost var r: NativeTypes.uint64 :| r in s'.ephemeralIndirectionTable.I().locs && s'.ephemeralIndirectionTable.I().locs[r] == loc;
      assert MapsAgreeOnKey(s.ephemeralIndirectionTable.I().locs, s'.ephemeralIndirectionTable.I().locs, r);
    }
    if j.Some? {
      assert DiskLayout.ValidNodeLocation(s.ephemeralIndirectionTable.I().locs[ref]);
      assert j.value >= MinNodeBlockIndex() by {
        DiskLayout.reveal_ValidNodeAddr();
      }
    }
    forall i: int | s'.ephemeralIndirectionTable.I().IsLocAllocIndirectionTable(i)
      ensures IT.IndirectionTable.IsLocAllocBitmap(s'.blockAllocator.I().ephemeral, i)
    {
      if j.Some? && i == j.value {
        if 0 <= i < MinNodeBlockIndex() {
          assert false;
        } else {
          ghost var r: NativeTypes.uint64 :| r in s'.ephemeralIndirectionTable.locs && s'.ephemeralIndirectionTable.locs[r].addr as int == i * NodeBlockSize() as int;
          assert MapsAgreeOnKey(s.ephemeralIndirectionTable.I().locs, s'.ephemeralIndirectionTable.I().locs, r);
          assert BC.LocationsForDifferentRefsDontOverlap(s.ephemeralIndirectionTable.I(), ref, r);
          assert ref !in s'.ephemeralIndirectionTable.I().locs;
          assert r in s'.ephemeralIndirectionTable.I().locs;
          assert s.ephemeralIndirectionTable.I().locs[r] == s.ephemeralIndirectionTable.I().locs[ref];
          assert r == ref;
          assert false;
        }
      } else {
        if 0 <= i < MinNodeBlockIndex() {
          assert s.ephemeralIndirectionTable.I().IsLocAllocIndirectionTable(i);
          assert IT.IndirectionTable.IsLocAllocBitmap(s.blockAllocator.I().ephemeral, i);
          assert IT.IndirectionTable.IsLocAllocBitmap(s'.blockAllocator.I().ephemeral, i);
        } else {
          ghost var r: NativeTypes.uint64 :| r in s'.ephemeralIndirectionTable.locs && s'.ephemeralIndirectionTable.locs[r].addr as int == i * NodeBlockSize() as int;
          assert MapsAgreeOnKey(s.ephemeralIndirectionTable.I().locs, s'.ephemeralIndirectionTable.I().locs, r);
          assert s.ephemeralIndirectionTable.I().IsLocAllocIndirectionTable(i);
          assert IT.IndirectionTable.IsLocAllocBitmap(s.blockAllocator.I().ephemeral, i);
          assert IT.IndirectionTable.IsLocAllocBitmap(s'.blockAllocator.I().ephemeral, i);
        }
      }
    }
    forall i: int | IT.IndirectionTable.IsLocAllocBitmap(s'.blockAllocator.I().ephemeral, i)
      ensures s'.ephemeralIndirectionTable.I().IsLocAllocIndirectionTable(i)
    {
      if j.Some? && i == j.value {
        assert s'.ephemeralIndirectionTable.I().IsLocAllocIndirectionTable(i);
      } else {
        assert IT.IndirectionTable.IsLocAllocBitmap(s.blockAllocator.I().ephemeral, i);
        assert s.ephemeralIndirectionTable.I().IsLocAllocIndirectionTable(i);
        if 0 <= i < MinNodeBlockIndex() {
          assert s'.ephemeralIndirectionTable.I().IsLocAllocIndirectionTable(i);
        } else {
          ghost var r: NativeTypes.uint64 :| r in s.ephemeralIndirectionTable.locs && s.ephemeralIndirectionTable.locs[r].addr as int == i * NodeBlockSize() as int;
          assert MapsAgreeOnKey(s.ephemeralIndirectionTable.I().locs, s'.ephemeralIndirectionTable.I().locs, r);
          assert r in s'.ephemeralIndirectionTable.locs && s'.ephemeralIndirectionTable.locs[r].addr as int == i * NodeBlockSize() as int;
          assert s'.ephemeralIndirectionTable.I().IsLocAllocIndirectionTable(i);
        }
      }
    }
    if j.Some? {
      forall i: int | 0 <= i < NumBlocks()
        ensures BitmapModel.IsSet(s'.blockAllocator.I().full, i) == (BitmapModel.IsSet(s'.blockAllocator.I().ephemeral, i) || (s'.blockAllocator.I().frozen.Some? && BitmapModel.IsSet(s'.blockAllocator.I().frozen.value, i)) || BitmapModel.IsSet(s'.blockAllocator.I().persistent, i) || BitmapModel.IsSet(s'.blockAllocator.I().full, i))
      {
        if i == j.value {
        } else {
          assert BitmapModel.IsSet(s'.blockAllocator.I().full, i) == BitmapModel.IsSet(s.blockAllocator.I().full, i);
          assert BitmapModel.IsSet(s'.blockAllocator.I().ephemeral, i) == BitmapModel.IsSet(s.blockAllocator.I().ephemeral, i);
          assert s'.blockAllocator.I().frozen.Some? ==> BitmapModel.IsSet(s'.blockAllocator.I().frozen.value, i) == BitmapModel.IsSet(s.blockAllocator.I().frozen.value, i);
          assert BitmapModel.IsSet(s'.blockAllocator.I().persistent, i) == BitmapModel.IsSet(s.blockAllocator.I().persistent, i);
          assert BitmapModel.IsSet(s'.blockAllocator.I().outstanding, i) == BitmapModel.IsSet(s.blockAllocator.I().outstanding, i);
        }
      }
    }
  }
  method writeBookkeeping(inout s: ImplVariables, ref: BT.G.Reference, children: Option<seq<BT.G.Reference>>)
  {
    lemmaIndirectionTableLocIndexValid(s, ref);
    var oldLoc: Option<Location> := s.ephemeralIndirectionTable.UpdateAndRemoveLoc(ref, if children.Some? then children.value else []);
    s.lru.Use(ref);
    if oldLoc.Some? {
      s.blockAllocator.MarkFreeEphemeral(oldLoc.value.addr / NodeBlockSizeUint64());
    }
    LruModel.LruUse(old_s.lru.Queue(), ref);
    assert LruModel.I(s.lru.Queue()) == LruModel.I(old_s.lru.Queue()) + {ref};
    assert |LruModel.I(s.lru.Queue())| == |LruModel.I(old_s.lru.Queue()) + {ref}| <= |LruModel.I(old_s.lru.Queue())| + |{ref}| == |LruModel.I(old_s.lru.Queue())| + 1;
    reveal BookkeepingModel.writeBookkeeping();
    freeIndirectionTableLocCorrect(old_s, s, ref, if oldLoc.Some? then Some(oldLoc.value.addr as int / NodeBlockSize()) else None);
    reveal_ConsistentBitmapInteral();
    assert s.WriteAllocConditions();
  }
  method allocBookkeeping(inout s: ImplVariables, children: Option<seq<BT.G.Reference>>) returns (ref: Option<BT.G.Reference>)
  {
    BookkeepingModel.reveal_allocBookkeeping();
    ref := getFreeRef(s);
    if ref.Some? {
      writeBookkeeping(inout s, ref.value, children);
    }
  }
  method writeBookkeepingNoSuccsUpdate(inout s: ImplVariables, ref: BT.G.Reference)
  {
    BookkeepingModel.reveal_writeBookkeepingNoSuccsUpdate();
    lemmaIndirectionTableLocIndexValid(s, ref);
    var oldLoc: Option<Location> := s.ephemeralIndirectionTable.RemoveLoc(ref);
    s.lru.Use(ref);
    if oldLoc.Some? {
      s.blockAllocator.MarkFreeEphemeral(oldLoc.value.addr / NodeBlockSizeUint64());
    }
    freeIndirectionTableLocCorrect(old_s, s, ref, if oldLoc.Some? then Some(oldLoc.value.addr as int / NodeBlockSize()) else None);
    reveal ConsistentBitmapInteral();
    LruModel.LruUse(old_s.lru.Queue(), ref);
    assert LruModel.I(s.lru.Queue()) == LruModel.I(old_s.lru.Queue()) + {ref};
    assert |LruModel.I(s.lru.Queue())| == |LruModel.I(old_s.lru.Queue()) + {ref}| <= |LruModel.I(old_s.lru.Queue())| + |{ref}| == |LruModel.I(old_s.lru.Queue())| + 1;
  }
Dafny program verifier did not attempt verification