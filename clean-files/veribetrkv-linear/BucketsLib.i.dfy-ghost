// BucketsLib.i.dfy
module BucketsLib {
  datatype Bucket = Bucket(keys: seq<Key>, msgs: seq<Message>) {
    function as_map(): BucketMap
      requires |this.keys| == |this.msgs|
      ensures WFBucket(this) ==> WFBucketMap(as_map())
      decreases this
    {
      value_sets_le(keys, msgs);
      map_of_seqs(keys, msgs)
    }
  }
  type BucketList = seq<Bucket>
  predicate WFBucketMap(bucket: BucketMap)
    decreases bucket
  {
    forall message: Message {:trigger message in bucket.Values} :: 
      message in bucket.Values ==>
        message != IdentityMessage()
  }
  predicate WFMessageSeq(messages: seq<Message>)
    decreases messages
  {
    forall i: int {:trigger messages[i]} | 0 <= i < |messages| :: 
      messages[i] != IdentityMessage()
  }
  predicate PreWFBucket(bucket: Bucket)
    decreases bucket
  {
    true &&
    |bucket.keys| == |bucket.msgs|
  }
  predicate WFBucket(bucket: Bucket)
    decreases bucket
  {
    PreWFBucket(bucket) &&
    WFMessageSeq(bucket.msgs)
  }
  predicate BucketWellMarshalled(bucket: Bucket)
    decreases bucket
  {
    IsStrictlySorted(bucket.keys)
  }
  predicate BucketListWellMarshalled(blist: BucketList)
    decreases blist
  {
    forall i: int {:trigger blist[i]} | 0 <= i < |blist| :: 
      BucketWellMarshalled(blist[i])
  }
  function EmptyBucket(): (result: Bucket)
    ensures WFBucket(result)
    ensures result.as_map() == map[]
    ensures BucketWellMarshalled(result)
  {
    MapOfEmptySeq();
    Bucket([], [])
  }
  function SingletonBucket(key: Key, msg: Message): (result: Bucket)
    ensures PreWFBucket(result)
    ensures BucketWellMarshalled(result)
    ensures msg != IdentityMessage() ==> WFBucket(result)
    decreases key, msg
  {
    Bucket([key], [msg])
  }
  function BucketDropLast(bucket: Bucket): Bucket
    requires PreWFBucket(bucket)
    requires 0 < |bucket.keys|
    decreases bucket
  {
    Bucket(DropLast(bucket.keys), DropLast(bucket.msgs))
  }
  lemma BucketDropLastWF(bucket: Bucket)
    requires PreWFBucket(bucket)
    requires 0 < |bucket.keys|
    ensures PreWFBucket(BucketDropLast(bucket))
    ensures WFBucket(bucket) ==> WFBucket(BucketDropLast(bucket))
    decreases bucket
  {
  }
  lemma BucketDropLastWellMarshalled(bucket: Bucket)
    requires PreWFBucket(bucket)
    requires BucketWellMarshalled(bucket)
    requires 0 < |bucket.keys|
    ensures BucketWellMarshalled(BucketDropLast(bucket))
    decreases bucket
  {
    reveal_IsStrictlySorted();
  }
  lemma BucketMapMapsIndex(bucket: Bucket, i: int)
    requires PreWFBucket(bucket)
    requires BucketWellMarshalled(bucket)
    requires 0 <= i < |bucket.keys|
    ensures bucket.keys[i] in bucket.as_map()
    ensures bucket.as_map()[bucket.keys[i]] == bucket.msgs[i]
    decreases bucket, i
  {
    MapMapsIndex(bucket.keys, bucket.msgs, i);
  }
  predicate WFBucketAt(bucket: Bucket, pivots: PivotTable, i: int)
    requires WFPivots(pivots)
    decreases bucket, pivots, i
  {
    WFBucket(bucket) &&
    (forall key: Key {:trigger BoundedKey(pivots, key)} {:trigger key in bucket.keys} | key in bucket.keys :: 
      BoundedKey(pivots, key)) &&
    forall key: Key {:trigger Route(pivots, key)} {:trigger key in bucket.keys} | key in bucket.keys :: 
      Route(pivots, key) == i
  }
  lemma WellMarshalledBucketsEq(a: Bucket, b: Bucket)
    requires PreWFBucket(a)
    requires PreWFBucket(b)
    requires BucketWellMarshalled(a)
    requires BucketWellMarshalled(b)
    requires a.as_map() == b.as_map()
    ensures a == b
    decreases |a.keys|
  {
    SeqsEqOfMapsEq(a.keys, a.msgs, b.keys, b.msgs);
  }
  predicate WFBucketList(blist: BucketList, pivots: PivotTable)
    decreases blist, pivots
  {
    WFPivots(pivots) &&
    |blist| == NumBuckets(pivots) &&
    forall i: int {:trigger blist[i]} | 0 <= i < |blist| :: 
      WFBucket(blist[i])
  }
  predicate WFBucketListProper(blist: BucketList, pivots: PivotTable)
    decreases blist, pivots
  {
    WFBucketList(blist, pivots) &&
    forall i: int {:trigger blist[i]} | 0 <= i < |blist| :: 
      WFBucketAt(blist[i], pivots, i)
  }
  predicate BoundedBucket(bucket: Bucket, pivots: PivotTable)
    decreases bucket, pivots
  {
    WFPivots(pivots) &&
    forall key: Key {:trigger BoundedKey(pivots, key)} {:trigger key in bucket.keys} | key in bucket.keys :: 
      BoundedKey(pivots, key)
  }
  predicate BoundedBucketList(blist: BucketList, pivots: PivotTable)
    decreases blist, pivots
  {
    WFPivots(pivots) &&
    forall i: int {:trigger blist[i]} | 0 <= i < |blist| :: 
      PreWFBucket(blist[i]) &&
      BoundedBucket(blist[i], pivots)
  }
  function {:opaque} {:fuel 0, 0} B(m: map<Key, Message>): (b: Bucket)
    ensures PreWFBucket(b)
    ensures IsStrictlySorted(b.keys)
    ensures b.as_map() == m
    ensures WFBucketMap(m) ==> WFBucket(b)
    decreases m
  {
    IsStrictlySorted_seqs_of_map(m);
    map_of_seqs_of_seqs_of_map(m);
    ghost var sp: SeqPair := seqs_of_map(m);
    ghost var b: Bucket := Bucket(sp.keys, sp.msgs);
    assert b.as_map() == map_of_seqs(b.keys, b.msgs);
    test(m, sp, b);
    b
  }
  lemma  test(m: map<Key, Message>, sp: SeqPair, b: Bucket)
    requires sp == seqs_of_map(m)
    requires b == Bucket(sp.keys, sp.msgs)
    ensures WFBucketMap(m) ==> WFBucket(b)
    decreases m, sp, b
  {
    if WFBucketMap(m) {
      assert Set(b.msgs) == m.Values by {
        seqs_of_map_preserves_values(m, sp);
      }
      assert forall i: int {:trigger b.msgs[i]} :: 0 <= i < |b.msgs| ==> b.msgs[i] != IdentityMessage() by {
        forall i: int {:trigger b.msgs[i]} | 0 <= i < |b.msgs|
          ensures b.msgs[i] != IdentityMessage()
        {
          assert b.msgs[i] in m.Values;
        }
      }
    }
  }
  function BucketInsert(bucket: Bucket, key: Key, msg: Message): Bucket
    requires PreWFBucket(bucket)
    decreases bucket, key, msg
  {
    ghost var m: BucketMap := bucket.as_map();
    ghost var mergedMsg: Message := Merge(msg, BucketGet(m, key));
    if mergedMsg == IdentityMessage() then
      B(MapRemove1(m, key))
    else
      B(m[key := mergedMsg])
  }
  function BucketListInsert(blist: BucketList, pivots: PivotTable, key: Key, msg: Message): BucketList
    requires WFBucketList(blist, pivots)
    requires BoundedKey(pivots, key)
    decreases blist, pivots, key, msg
  {
    ghost var i: int := Route(pivots, key);
    blist[i := BucketInsert(blist[i], key, msg)]
  }
  function BucketListGet(blist: BucketList, pivots: PivotTable, key: Key): Message
    requires WFBucketList(blist, pivots)
    requires BoundedKey(pivots, key)
    decreases blist, pivots, key
  {
    BucketGet(blist[Route(pivots, key)].as_map(), key)
  }
  lemma WFBucketInsert(bucket: Bucket, key: Key, msg: Message)
    requires WFBucket(bucket)
    ensures WFBucket(BucketInsert(bucket, key, msg))
    decreases bucket, key, msg
  {
    ghost var m: map<Key, Message> := bucket.as_map();
    ghost var mergedMsg: Message := Merge(msg, BucketGet(m, key));
    ghost var m': map<Key, Message> := if mergedMsg == IdentityMessage() then MapRemove1(m, key) else m[key := mergedMsg];
    ghost var bucket': Bucket := BucketInsert(bucket, key, msg);
    assert m' == bucket'.as_map();
    assert m' == map_of_seqs(bucket'.keys, bucket'.msgs);
    forall i: int {:trigger bucket'.msgs[i]} | 0 <= i < |bucket'.msgs|
      ensures bucket'.msgs[i] != IdentityMessage()
    {
      MapMapsIndex(bucket'.keys, bucket'.msgs, i);
      ghost var k: Key := bucket'.keys[i];
      assert m'[k] == bucket'.msgs[i];
      if k != key {
        assert m[k] == bucket'.msgs[i];
        ghost var j: int := GetIndex(bucket.keys, bucket.msgs, k);
      }
    }
  }
  function {:opaque} {:fuel 0, 0} SplitBucketLeft(bucket: Bucket, pivot: Key): (res: Bucket)
    requires PreWFBucket(bucket)
    ensures PreWFBucket(res)
    decreases bucket, pivot
  {
    ghost var i: int := BoundedKeyspace.binarySearchIndexOfFirstKeyGte(bucket.keys, pivot);
    Bucket(bucket.keys[..i], bucket.msgs[..i])
  }
  function {:opaque} {:fuel 0, 0} SplitBucketRight(bucket: Bucket, pivot: Key): (res: Bucket)
    requires PreWFBucket(bucket)
    ensures PreWFBucket(res)
    decreases bucket, pivot
  {
    ghost var i: int := BoundedKeyspace.binarySearchIndexOfFirstKeyGte(bucket.keys, pivot);
    Bucket(bucket.keys[i..], bucket.msgs[i..])
  }
  function SplitBucketListLeft(blist: BucketList, pivots: PivotTable, cLeft: int, key: Key): BucketList
    requires WFBucketList(blist, pivots)
    requires ValidLeftCutOffKey(pivots, key)
    requires CutoffForLeft(pivots, key) == cLeft
    decreases blist, pivots, cLeft, key
  {
    blist[..cLeft] + [SplitBucketLeft(blist[cLeft], key)]
  }
  function SplitBucketListRight(blist: BucketList, pivots: PivotTable, cRight: int, key: Key): BucketList
    requires WFBucketList(blist, pivots)
    requires BoundedKey(pivots, key)
    requires CutoffForRight(pivots, key) == cRight
    decreases blist, pivots, cRight, key
  {
    [SplitBucketRight(blist[cRight], key)] + blist[cRight + 1..]
  }
  function {:opaque} {:fuel 0, 0} SplitBucketInList(blist: BucketList, slot: int, pivot: Key): BucketList
    requires 0 <= slot < |blist|
    requires PreWFBucket(blist[slot])
    decreases blist, slot, pivot
  {
    replace1with2(blist, SplitBucketLeft(blist[slot], pivot), SplitBucketRight(blist[slot], pivot), slot)
  }
  function {:opaque} {:fuel 0, 0} MergeBuckets(left: Bucket, right: Bucket): (res: Bucket)
    requires PreWFBucket(left)
    requires PreWFBucket(right)
    ensures PreWFBucket(res)
    decreases left, right
  {
    Bucket(left.keys + right.keys, left.msgs + right.msgs)
  }
  function {:opaque} {:fuel 0, 0} MergeBucketsInList(blist: BucketList, slot: int): (blist': BucketList)
    requires 0 <= slot < |blist| - 1
    requires PreWFBucket(blist[slot])
    requires PreWFBucket(blist[slot + 1])
    ensures |blist'| == |blist| - 1
    ensures PreWFBucket(blist'[slot])
    decreases blist, slot
  {
    replace2with1(blist, MergeBuckets(blist[slot], blist[slot + 1]), slot)
  }
  lemma WFSplitBucketListLeft(blist: BucketList, pivots: PivotTable, cLeft: int, key: Key)
    requires WFBucketList(blist, pivots)
    requires ValidLeftCutOffKey(pivots, key)
    requires CutoffForLeft(pivots, key) == cLeft
    ensures WFBucketList(SplitBucketListLeft(blist, pivots, cLeft, key), SplitLeft(pivots, key))
    decreases blist, pivots, cLeft, key
  {
    reveal_SplitBucketLeft();
  }
  lemma WFProperSplitBucketListLeft(blist: BucketList, pivots: PivotTable, cLeft: int, key: Key)
    requires WFBucketListProper(blist, pivots)
    requires ValidLeftCutOffKey(pivots, key)
    requires CutoffForLeft(pivots, key) == cLeft
    requires IsStrictlySorted(blist[cLeft].keys)
    ensures WFBucketListProper(SplitBucketListLeft(blist, pivots, cLeft, key), SplitLeft(pivots, key))
    decreases blist, pivots, cLeft, key
  {
    reveal_SplitBucketLeft();
    ghost var pivots': seq<Element> := SplitLeft(pivots, key);
    ghost var blist': seq<Bucket> := SplitBucketListLeft(blist, pivots, cLeft, key);
    BucketListHasWFBucketAtIdenticalSlice(blist, pivots, blist', pivots', 0, cLeft - 1, 0);
    assert pivots[cLeft] == pivots'[cLeft];
    assert WFBucketAt(blist'[cLeft], pivots', cLeft) by {
      reveal_IsStrictlySorted();
      forall k: Key {:trigger Route(pivots', k)} {:trigger BoundedKey(pivots', k)} {:trigger k in blist'[cLeft].keys} | k in blist'[cLeft].keys
        ensures BoundedKey(pivots', k) && Route(pivots', k) == cLeft
      {
        assert k in blist[cLeft].keys;
      }
    }
  }
  lemma WFSplitBucketListRight(blist: BucketList, pivots: PivotTable, cRight: int, key: Key)
    requires WFBucketList(blist, pivots)
    requires BoundedKey(pivots, key)
    requires CutoffForRight(pivots, key) == cRight
    ensures WFBucketList(SplitBucketListRight(blist, pivots, cRight, key), SplitRight(pivots, key))
    decreases blist, pivots, cRight, key
  {
    reveal_SplitBucketRight();
    WFSuffix(pivots, cRight);
  }
  lemma WFProperSplitBucketListRight(blist: BucketList, pivots: PivotTable, cRight: int, key: Key)
    requires WFBucketListProper(blist, pivots)
    requires BoundedKey(pivots, key)
    requires CutoffForRight(pivots, key) == cRight
    requires IsStrictlySorted(blist[cRight].keys)
    ensures WFBucketListProper(SplitBucketListRight(blist, pivots, cRight, key), SplitRight(pivots, key))
    decreases blist, pivots, cRight, key
  {
    reveal_SplitBucketRight();
    ghost var blist': seq<Bucket> := SplitBucketListRight(blist, pivots, cRight, key);
    ghost var pivots': seq<Element> := SplitRight(pivots, key);
    assert pivots[cRight + 1] == pivots'[1];
    BucketListHasWFBucketAtIdenticalSlice(blist, pivots, blist', pivots', 1, |blist'| - 1, 0 - cRight);
    assert WFBucketAt(blist'[0], pivots', 0) by {
      reveal_IsStrictlySorted();
      forall k: Key {:trigger Route(pivots', k)} {:trigger BoundedKey(pivots', k)} {:trigger k in blist'[0].keys} | k in blist'[0].keys
        ensures BoundedKey(pivots', k) && Route(pivots', k) == 0
      {
        assert k in blist[cRight].keys;
        assert WFBucketAt(blist[cRight], pivots, cRight);
        assert BoundedKey(pivots, k);
        assert Route(pivots, k) == cRight;
      }
    }
  }
  lemma WFSplitBucketInList(blist: BucketList, slot: int, pivot: Key, pivots: PivotTable)
    requires WFBucketList(blist, pivots)
    requires 1 <= slot <= |blist|
    requires BoundedKey(pivots, pivot)
    requires PivotInsertable(pivots, slot, pivot)
    ensures WFPivots(InsertPivot(pivots, slot, pivot))
    ensures WFBucketList(SplitBucketInList(blist, slot - 1, pivot), InsertPivot(pivots, slot, pivot))
    decreases blist, slot, pivot, pivots
  {
    WFPivotsInsert(pivots, slot, pivot);
    reveal_SplitBucketInList();
    ghost var newbuckets: seq<Bucket> := SplitBucketInList(blist, slot - 1, pivot);
    forall i: int {:trigger newbuckets[i]} | 0 <= i < |newbuckets|
      ensures WFBucket(newbuckets[i])
    {
      if i < slot - 1 {
        assert newbuckets[i] == blist[i];
      } else if i == slot - 1 {
        reveal_SplitBucketLeft();
      } else if i == slot {
        reveal_SplitBucketRight();
      } else {
        assert newbuckets[i] == blist[i - 1];
      }
    }
  }
  lemma WFProperSplitBucketInList(blist: BucketList, slot: int, pivot: Key, pivots: PivotTable)
    requires WFBucketListProper(blist, pivots)
    requires BoundedKey(pivots, pivot)
    requires 1 <= slot <= |blist|
    requires PivotInsertable(pivots, slot, pivot)
    requires IsStrictlySorted(blist[slot - 1].keys)
    ensures WFPivots(InsertPivot(pivots, slot, pivot))
    ensures WFBucketListProper(SplitBucketInList(blist, slot - 1, pivot), InsertPivot(pivots, slot, pivot))
    decreases blist, slot, pivot, pivots
  {
    ghost var blist': seq<Bucket> := SplitBucketInList(blist, slot - 1, pivot);
    assert |blist'| == |blist| + 1 by {
      reveal_SplitBucketInList();
    }
    ghost var pivots': seq<Element> := InsertPivot(pivots, slot, pivot);
    WFPivotsInsert(pivots, slot, pivot);
    assert WFBucketAt(blist[slot - 1], pivots, slot - 1);
    assert WFBucketAt(blist'[slot - 1], pivots', slot - 1) by {
      assert blist'[slot - 1] == SplitBucketLeft(blist[slot - 1], pivot) by {
        reveal_SplitBucketInList();
      }
      reveal_SplitBucketLeft();
      assert WFBucket(blist'[slot - 1]);
      forall k: Key {:trigger Route(pivots', k)} {:trigger BoundedKey(pivots', k)} | k in blist'[slot - 1].keys
        ensures BoundedKey(pivots', k) && Route(pivots', k) == slot - 1
      {
        assert k in blist[slot - 1].keys;
        reveal_IsStrictlySorted();
        assert Keyspace.lte(pivots'[slot - 1], KeyToElement(k));
        assert Keyspace.lte(KeyToElement(k), pivots'[slot]);
      }
    }
    assert WFBucketAt(blist'[slot], pivots', slot) by {
      assert blist'[slot] == SplitBucketRight(blist[slot - 1], pivot) by {
        reveal_SplitBucketInList();
      }
      reveal_IsStrictlySorted();
      reveal_SplitBucketRight();
      assert WFBucket(blist'[slot]);
      forall k: Key {:trigger Route(pivots', k)} {:trigger BoundedKey(pivots', k)} {:trigger k in blist'[slot].keys} | k in blist'[slot].keys
        ensures BoundedKey(pivots', k) && Route(pivots', k) == slot
      {
        assert k in blist[slot - 1].keys;
        reveal_IsStrictlySorted();
      }
    }
    reveal_SplitBucketInList();
    BucketListHasWFBucketAtIdenticalSlice(blist, pivots, blist', pivots', 0, slot - 2, 0);
    BucketListHasWFBucketAtIdenticalSlice(blist, pivots, blist', pivots', slot + 1, |blist'| - 1, 1);
  }
  lemma WellMarshalledSplitBucketInList(blist: BucketList, slot: int, pivot: Key)
    requires 0 <= slot < |blist|
    requires BucketListWellMarshalled(blist)
    requires PreWFBucket(blist[slot])
    ensures BucketListWellMarshalled(SplitBucketInList(blist, slot, pivot))
    decreases blist, slot, pivot
  {
    ghost var blist': seq<Bucket> := SplitBucketInList(blist, slot, pivot);
    reveal_SplitBucketInList();
    assert BucketWellMarshalled(SplitBucketLeft(blist[slot], pivot)) by {
      reveal_SplitBucketLeft();
      reveal_IsStrictlySorted();
    }
    assert BucketWellMarshalled(SplitBucketRight(blist[slot], pivot)) by {
      reveal_SplitBucketRight();
      reveal_IsStrictlySorted();
    }
    forall i: int {:trigger blist'[i]} | 0 <= i < |blist'|
      ensures BucketWellMarshalled(blist'[i])
    {
      if i < slot {
        assert BucketWellMarshalled(blist[i]);
      } else if i > slot + 1 {
        assert BucketWellMarshalled(blist[i - 1]);
      }
    }
  }
  lemma WFMergeBucketsInList(blist: BucketList, slot: int, pivots: PivotTable)
    requires 0 <= slot < |blist| - 1
    requires WFBucketList(blist, pivots)
    ensures WFBucketList(MergeBucketsInList(blist, slot), remove(pivots, slot + 1))
    decreases blist, slot, pivots
  {
    reveal_MergeBucketsInList();
    WFPivotsRemoved(pivots, slot + 1);
    reveal_MergeBuckets();
  }
  lemma WFProperMergeBucketsInList(blist: BucketList, slot: int, pivots: PivotTable)
    requires 0 <= slot < |blist| - 1
    requires WFBucketListProper(blist, pivots)
    ensures WFBucketListProper(MergeBucketsInList(blist, slot), remove(pivots, slot + 1))
    decreases blist, slot, pivots
  {
    reveal_MergeBucketsInList();
    WFPivotsRemoved(pivots, slot + 1);
    ghost var blist': seq<Bucket> := MergeBucketsInList(blist, slot);
    ghost var pivots': seq<Element> := remove(pivots, slot + 1);
    BucketListHasWFBucketAtIdenticalSlice(blist, pivots, blist', pivots', 0, slot - 1, 0);
    BucketListHasWFBucketAtIdenticalSlice(blist, pivots, blist', pivots', slot + 1, |blist'| - 1, -1);
    reveal_MergeBuckets();
    Keyspace.reveal_IsStrictlySorted();
    assert Keyspace.lt(pivots'[slot], pivots'[slot + 1]);
  }
  lemma WellMarshalledMergeBucketsInList(blist: BucketList, slot: int, pivots: PivotTable)
    requires 0 <= slot < |blist| - 1
    requires PreWFBucket(blist[slot])
    requires PreWFBucket(blist[slot + 1])
    requires BucketListWellMarshalled(blist)
    requires WFBucketListProper(blist, pivots)
    ensures BucketListWellMarshalled(MergeBucketsInList(blist, slot))
    decreases blist, slot, pivots
  {
    reveal_MergeBuckets();
    reveal_MergeBucketsInList();
    reveal_IsStrictlySorted();
    ghost var merged: Bucket := MergeBucketsInList(blist, slot)[slot];
    ghost var pivot: Key := GetKey(pivots, slot + 1);
    assert forall k: Element {:trigger lt(k, pivot)} {:trigger k in blist[slot].keys} | k in blist[slot].keys :: lt(k, pivot);
    assert forall k: Element {:trigger lte(pivot, k)} | k in blist[slot + 1].keys :: lte(pivot, k);
    forall i: int, j: int {:trigger merged.keys[j], merged.keys[i]} | 0 <= i < j < |merged.keys|
      ensures lt(merged.keys[i], merged.keys[j])
    {
      if i < |blist[slot].keys| && j >= |blist[slot].keys| {
        assert lt(merged.keys[i], pivot);
        assert lte(pivot, merged.keys[j]);
        assert lt(merged.keys[i], merged.keys[j]);
      }
    }
  }
  lemma SplitOfMergeBucketsInList(blist: BucketList, slot: int, pivots: PivotTable)
    requires 0 <= slot < |blist| - 1
    requires WFBucketListProper(blist, pivots)
    ensures SplitBucketLeft(MergeBucketsInList(blist, slot)[slot], GetKey(pivots, slot + 1)) == blist[slot]
    ensures SplitBucketRight(MergeBucketsInList(blist, slot)[slot], GetKey(pivots, slot + 1)) == blist[slot + 1]
    decreases blist, slot, pivots
  {
    reveal_MergeBucketsInList();
    reveal_MergeBuckets();
    ghost var merged: Bucket := MergeBucketsInList(blist, slot)[slot];
    ghost var pivot: Key := GetKey(pivots, slot + 1);
    assert forall k: Element {:trigger lt(k, pivot)} {:trigger k in blist[slot].keys} | k in blist[slot].keys :: lt(k, pivot);
    assert forall k: Element {:trigger lte(pivot, k)} | k in blist[slot + 1].keys :: lte(pivot, k);
    assert BoundedKeyspace.binarySearchIndexOfFirstKeyGte(merged.keys, pivot) == |blist[slot].keys| by {
      assert forall i: int {:trigger merged.keys[i]} | 0 <= i < |merged.keys| :: (i < |blist[slot].keys| ==> lt(merged.keys[i], pivot)) && (i >= |blist[slot].keys| ==> lte(pivot, merged.keys[i]));
    }
    reveal_SplitBucketLeft();
    reveal_SplitBucketRight();
  }
  lemma BucketListWellMarshalledSlice(blist: BucketList, i: int, j: int)
    requires BucketListWellMarshalled(blist)
    requires 0 <= i <= j <= |blist|
    ensures BucketListWellMarshalled(blist[i .. j])
    decreases blist, i, j
  {
  }
  lemma BucketListHasWFBucketAtIdenticalSlice(blist: BucketList, pivots: PivotTable, blist': BucketList, pivots': PivotTable, a: int, b: int, d: int)
    requires WFBucketListProper(blist, pivots)
    requires WFPivots(pivots')
    requires |blist'| == NumBuckets(pivots')
    requires 0 <= a
    requires b < |blist'|
    requires a - d >= 0
    requires b - d < |blist|
    requires forall i: int {:trigger blist'[i]} | a <= i <= b :: blist'[i] == blist[i - d]
    requires forall i: int {:trigger pivots'[i]} | a <= i <= b :: pivots'[i] == pivots[i - d]
    requires 0 <= b - d + 1 && 0 <= b + 1 ==> Upperbounded_Lexicographic_Byte_Order.lte(pivots[b - d + 1], pivots'[b + 1])
    requires b >= a && b < |pivots'| ==> (b - d < |pivots| && pivots'[b] == pivots[b - d]) || forall key: Key {:trigger KeyToElement(key)} {:trigger key in blist'[b].keys} | key in blist'[b].keys :: lt(KeyToElement(key), pivots'[b])
    requires b >= a && a - 1 >= 0 ==> (a - 1 - d >= 0 && pivots'[a - 1] == pivots[a - 1 - d]) || forall key: Key {:trigger KeyToElement(key)} {:trigger key in blist'[a].keys} | key in blist'[a].keys :: lte(pivots'[a - 1], KeyToElement(key))
    ensures forall i: int {:trigger blist'[i]} | a <= i <= b :: WFBucketAt(blist'[i], pivots', i)
    decreases blist, pivots, blist', pivots', a, b, d
  {
    forall i: int {:trigger blist'[i]} | a <= i <= b
      ensures WFBucketAt(blist'[i], pivots', i)
    {
      assert pivots[i - d] == pivots'[i];
      assert Upperbounded_Lexicographic_Byte_Order.lte(pivots[i - d + 1], pivots'[i + 1]);
    }
  }
  function binarySearch(keys: seq<Key>, key: Key): (i: Option<nat>)
    ensures IsStrictlySorted(keys) ==> i.None? ==> key !in keys
    ensures i.Some? ==> 0 <= i.value < |keys| && key == keys[i.value]
    decreases keys, key
  {
    if |keys| == 0 then
      None
    else
      reveal_IsStrictlySorted(); ghost var mid: int := |keys| / 2; if lt(key, keys[mid]) then binarySearch(keys[..mid], key) else if keys[mid] == key then Some(mid) else ghost var sub: Option<nat> := binarySearch(keys[mid + 1..], key); if sub.Some? then Some(mid + 1 + sub.value) else None
  }
  function bucketBinarySearchLookup(bucket: Bucket, key: Key): (msg: Option<Message>)
    requires WFBucket(bucket)
    ensures BucketWellMarshalled(bucket) ==> msg.None? ==> key !in bucket.as_map()
    ensures BucketWellMarshalled(bucket) ==> msg.Some? ==> key in bucket.as_map() && bucket.as_map()[key] == msg.value
    decreases bucket, key
  {
    ghost var i: Option<nat> := binarySearch(bucket.keys, key);
    if i.Some? then
      if BucketWellMarshalled(bucket) then
        PosEqLargestLte(bucket.keys, key, i.value);
        MapMapsIndex(bucket.keys, bucket.msgs, i.value);
        Some(bucket.msgs[i.value])
      else
        Some(bucket.msgs[i.value])
    else
      assert BucketWellMarshalled(bucket) ==> key !in bucket.as_map() by {
    if key in bucket.as_map() {
      ghost var j: int := GetIndex(bucket.keys, bucket.msgs, key);
    }
  } None
  }
  function getMiddleKey(bucket: Bucket): Key
    requires WFBucket(bucket)
    decreases bucket
  {
    if |bucket.keys| == 0 then
      [0]
    else
      ghost var key: Key := bucket.keys[|bucket.keys| / 2]; if |key| == 0 then [0] else key
  }
  lemma WFPivotsOfGetMiddleKey(bucket: Bucket)
    requires WFBucket(bucket)
    ensures WFPivots(insert(InitPivotTable(), KeyToElement(getMiddleKey(bucket)), 1))
    decreases bucket
  {
    reveal_IsStrictlySorted();
    SeqComparison.reveal_lte();
    assert InitPivotTable()[1].Max_Element?;
    WFPivotsInsert(InitPivotTable(), 1, getMiddleKey(bucket));
  }
  function {:opaque} {:fuel 0, 0} MapsOfBucketList(blist: BucketList): (res: seq<BucketMap>)
    requires forall i: int {:trigger blist[i]} | 0 <= i < |blist| :: PreWFBucket(blist[i])
    ensures |res| == |blist|
    ensures forall i: int {:trigger blist[i]} {:trigger res[i]} | 0 <= i < |res| :: res[i] == blist[i].as_map()
    decreases blist
  {
    seq(|blist|, (i: int) requires 0 <= i < |blist| => blist[i].as_map())
  }
  lemma B_empty_map()
    ensures B(map[]) == EmptyBucket()
  {
    MapSeqs.empty_seqs_of_map();
    reveal_B();
  }
  lemma B_of_as_map_sorted(b: Bucket)
    requires PreWFBucket(b)
    requires IsStrictlySorted(b.keys)
    ensures B(b.as_map()) == b
    decreases b
  {
    assert B(b.as_map()).as_map() == b.as_map();
    SeqsEqOfMapsEq(b.keys, b.msgs, B(b.as_map()).keys, B(b.as_map()).msgs);
  }
}
Dafny program verifier did not attempt verification