// BucketIteratorModel.i.dfy
module BucketIteratorModel {
  datatype IteratorOutput = Next(key: Key, msg: Message) | Done
  datatype Iterator = Iterator(ghost next: IteratorOutput, ghost idx: int, ghost decreaser: int)
  function SetGte(bucket: BucketMap, key: Key): set<Key>
    decreases bucket, key
  {
    set k: Key {:trigger Keyspace.lte(key, k)} {:trigger k in bucket} | k in bucket && Keyspace.lte(key, k)
  }
  predicate {:opaque} {:fuel 0, 0} WFIter(bucket: Bucket, it: Iterator)
    ensures WFIter(bucket, it) ==> PreWFBucket(bucket) && it.decreaser >= 0 && (it.next.Next? && BucketWellMarshalled(bucket) ==> it.next.key in bucket.as_map() && bucket.as_map()[it.next.key] == it.next.msg)
    decreases bucket, it
  {
    PreWFBucket(bucket) &&
    it.decreaser >= 0 &&
    it.idx >= 0 &&
    it.idx + it.decreaser == |bucket.keys| &&
    |bucket.keys| == |bucket.msgs| &&
    (it.next.Next? ==>
      it.decreaser > 0 &&
      it.next.key == bucket.keys[it.idx] &&
      it.next.msg == bucket.msgs[it.idx]) &&
    (it.next.Done? ==>
      true &&
      it.decreaser == 0) &&
    (it.next.Next? &&
    BucketWellMarshalled(bucket) ==>
      it.next.key in bucket.as_map() &&
      bucket.as_map()[it.next.key] == it.next.msg)
  }
  function iterForIndex(bucket: Bucket, idx: int): (it: Iterator)
    requires WFBucket(bucket)
    requires |bucket.keys| == |bucket.msgs|
    requires 0 <= idx <= |bucket.keys|
    ensures WFIter(bucket, it)
    decreases bucket, idx
  {
    reveal WFIter();
    ghost var it: Iterator := Iterator(if idx == |bucket.keys| then Done else Next(bucket.keys[idx], bucket.msgs[idx]), idx, |bucket.keys| - idx);
    assert it.next.Next? && BucketWellMarshalled(bucket) ==> (MapSeqs.MapMapsIndex(bucket.keys, bucket.msgs, idx); it.next.key in bucket.as_map() && bucket.as_map()[it.next.key] == it.next.msg);
    it
  }
  function iterEnd(bucket: Bucket): (it: Iterator)
    requires |bucket.keys| == |bucket.msgs|
    ensures WFIter(bucket, it)
    decreases bucket
  {
    reveal WFIter();
    Iterator(Done, |bucket.keys|, 0)
  }
  function {:opaque} {:fuel 0, 0} IterStart(bucket: Bucket): (it': Iterator)
    requires WFBucket(bucket)
    ensures WFIter(bucket, it')
    decreases bucket
  {
    reveal WFIter();
    iterForIndex(bucket, 0)
  }
  function {:opaque} {:fuel 0, 0} IterFindFirstGte(bucket: Bucket, key: Key): (it': Iterator)
    requires WFBucket(bucket)
    ensures WFIter(bucket, it')
    ensures it'.next.Next? ==> Keyspace.lte(key, it'.next.key)
    decreases bucket, key
  {
    iterForIndex(bucket, Keyspace.binarySearchIndexOfFirstKeyGte(bucket.keys, key))
  }
  function {:opaque} {:fuel 0, 0} IterFindFirstGt(bucket: Bucket, key: Key): (it': Iterator)
    requires WFBucket(bucket)
    ensures WFIter(bucket, it')
    ensures it'.next.Next? ==> Keyspace.lt(key, it'.next.key)
    decreases bucket, key
  {
    reveal WFIter();
    iterForIndex(bucket, Keyspace.binarySearchIndexOfFirstKeyGt(bucket.keys, key))
  }
  function {:opaque} {:fuel 0, 0} IterInc(bucket: Bucket, it: Iterator): (it': Iterator)
    requires WFBucket(bucket)
    requires WFIter(bucket, it)
    requires it.next.Next?
    ensures WFIter(bucket, it')
    ensures it'.decreaser < it.decreaser
    decreases bucket, it
  {
    reveal WFIter();
    iterForIndex(bucket, it.idx + 1)
  }
  lemma noKeyBetweenIterAndIterInc(bucket: Bucket, it: Iterator, key: Key)
    requires WFBucket(bucket)
    requires BucketWellMarshalled(bucket)
    requires WFIter(bucket, it)
    requires key in bucket.as_map()
    requires it.next.Next?
    ensures IterInc(bucket, it).next.Next? ==> Keyspace.lte(key, it.next.key) || Keyspace.lte(IterInc(bucket, it).next.key, key)
    ensures IterInc(bucket, it).next.Done? ==> Keyspace.lte(key, it.next.key)
    decreases bucket, it, key
  {
    reveal WFIter();
    Keyspace.reveal_IsStrictlySorted();
    reveal_IterInc();
    ghost var i: int := MapSeqs.GetIndex(bucket.keys, bucket.msgs, key);
  }
  lemma IterIncKeyGreater(bucket: Bucket, it: Iterator)
    requires WFIter(bucket, it)
    requires it.next.Next?
    requires WFBucket(bucket)
    requires BucketWellMarshalled(bucket)
    ensures IterInc(bucket, it).next.Next? ==> Keyspace.lt(it.next.key, IterInc(bucket, it).next.key)
    decreases bucket, it
  {
    reveal WFIter();
    Keyspace.reveal_IsStrictlySorted();
    reveal_IterInc();
  }
  lemma noKeyBetweenIterFindFirstGte(bucket: Bucket, key: Key, key0: Key)
    requires WFBucket(bucket)
    requires BucketWellMarshalled(bucket)
    requires key0 in bucket.as_map()
    ensures IterFindFirstGte(bucket, key).next.Next? ==> Keyspace.lt(key0, key) || Keyspace.lte(IterFindFirstGte(bucket, key).next.key, key0)
    ensures IterFindFirstGte(bucket, key).next.Done? ==> Keyspace.lt(key0, key)
    decreases bucket, key, key0
  {
    Keyspace.reveal_IsStrictlySorted();
    reveal_IterFindFirstGte();
    ghost var i: int := MapSeqs.GetIndex(bucket.keys, bucket.msgs, key0);
  }
  lemma noKeyBetweenIterFindFirstGt(bucket: Bucket, key: Key, key0: Key)
    requires WFBucket(bucket)
    requires BucketWellMarshalled(bucket)
    requires key0 in bucket.as_map()
    ensures IterFindFirstGt(bucket, key).next.Next? ==> Keyspace.lte(key0, key) || Keyspace.lte(IterFindFirstGt(bucket, key).next.key, key0)
    ensures IterFindFirstGt(bucket, key).next.Done? ==> Keyspace.lte(key0, key)
    decreases bucket, key, key0
  {
    Keyspace.reveal_IsStrictlySorted();
    reveal_IterFindFirstGt();
    ghost var i: int := MapSeqs.GetIndex(bucket.keys, bucket.msgs, key0);
  }
  lemma noKeyBeforeIterStart(bucket: Bucket, key0: Key)
    requires WFBucket(bucket)
    requires BucketWellMarshalled(bucket)
    requires key0 in bucket.as_map()
    ensures IterStart(bucket).next.Next?
    ensures Keyspace.lte(IterStart(bucket).next.key, key0)
    decreases bucket, key0
  {
    Keyspace.reveal_IsStrictlySorted();
    reveal_IterStart();
    ghost var i: int := MapSeqs.GetIndex(bucket.keys, bucket.msgs, key0);
  }
  lemma lemma_NextFromIndex(bucket: Bucket, it: Iterator)
    requires WFIter(bucket, it)
    ensures |bucket.keys| == |bucket.msgs|
    ensures 0 <= it.idx <= |bucket.keys|
    ensures 0 <= it.idx < |bucket.keys| ==> it.next.Next? && it.next.key == bucket.keys[it.idx] && it.next.msg == bucket.msgs[it.idx]
    ensures it.idx == |bucket.keys| ==> true && it.next.Done?
    decreases bucket, it
  {
    reveal WFIter();
  }
}
Dafny program verifier did not attempt verification