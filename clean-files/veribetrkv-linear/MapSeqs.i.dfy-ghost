// MapSeqs.i.dfy
module MapSeqs {
    reveals SeqPair
    reveals SeqPair
  datatype   SeqPair = SeqPair(keys: seq<Key>, msgs: seq<Message>)
  function map_of_seqs(keys: seq<Key>, msgs: seq<Message>): map<Key, Message>
    requires |keys| == |msgs|
    decreases keys, msgs
  {
    if |keys| == 0 then
      map[]
    else
      map_of_seqs(DropLast(keys), DropLast(msgs))[Last(keys) := Last(msgs)]
  }
  function maximumKey(b: set<Key>): Option<Key>
    decreases b
  {
    ghost var m: Option<Element> := Lexicographic_Byte_Order.maximumOpt(b);
    if m.Some? then
      assert |m.value| <= KeyType.MaxLen() as nat;
      ghost var k: Key := m.value;
      Some(k)
    else
      None
  }
  function seqs_of_map(m: map<Key, Message>): (res: SeqPair)
    ensures |res.keys| == |res.msgs|
    decreases m
  {
    ghost var keyOpt: Option<Key> := maximumKey(m.Keys);
    match keyOpt {
      case None() =>
        SeqPair([], [])
      case Some(key) =>
        var m' := MapRemove1(m, key);
        var SeqPair(keys', msgs') := seqs_of_map(m');
        SeqPair(keys' + [key], msgs' + [m[key]])
    }
  }
  lemma  seqs_of_map_preserves_values(m: map<Key, Message>, res: SeqPair)
    requires seqs_of_map(m) == res
    ensures m.Values == Set(res.msgs)
    decreases m, res
  {
    ghost var keyOpt: Option<Key> := maximumKey(m.Keys);
    match keyOpt {
      case None() =>
        {
          assert m.Values == Set(res.msgs);
        }
      case Some(key) =>
        {
          var m' := MapRemove1(m, key);
          var SeqPair(keys', msgs') := seqs_of_map(m');
          assert m'.Values == Set(msgs') by {
            seqs_of_map_preserves_values(m', SeqPair(keys', msgs'));
          }
          assert res == SeqPair(keys' + [key], msgs' + [m[key]]);
          assert Set(res.msgs) == Set(msgs') + {m[key]};
          assert m.Values == m'.Values + {m[key]};
          assert Set(res.msgs) == m.Values;
        }
    }
  }
  lemma  IsStrictlySorted_seqs_of_map(m: map<Key, Message>)
    ensures IsStrictlySorted(seqs_of_map(m).keys)
    decreases m
  {
    ghost var keyOpt: Option<Key> := maximumKey(m.Keys);
    match keyOpt {
      case None() =>
        {
          reveal_IsStrictlySorted();
        }
      case Some(key) =>
        {
          var m' := MapRemove1(m, key);
          var SeqPair(keys', msgs') := seqs_of_map(m');
          IsStrictlySorted_seqs_of_map(m');
          StrictlySortedAugment(keys', key);
        }
    }
  }
  lemma  MapMapsIndex(keys: seq<Key>, msgs: seq<Message>, i: int)
    requires |keys| == |msgs|
    requires 0 <= i < |keys|
    requires IsStrictlySorted(keys)
    ensures keys[i] in map_of_seqs(keys, msgs)
    ensures map_of_seqs(keys, msgs)[keys[i]] == msgs[i]
    decreases keys, msgs, i
  {
    if i == |keys| - 1 {
    } else {
      reveal_IsStrictlySorted();
      MapMapsIndex(DropLast(keys), DropLast(msgs), i);
    }
  }
  lemma GetIndex_seqs_of_map(m: map<Key, Message>, k: Key) returns (i: int)
    requires k in m
    ensures 0 <= i < |seqs_of_map(m).keys|
    ensures seqs_of_map(m).keys[i] == k
    ensures seqs_of_map(m).msgs[i] == m[k]
    decreases m, k
  {
    ghost var keyOpt: Option<Key> := maximumKey(m.Keys);
    match keyOpt {
      case None() =>
        {
          assert false;
        }
      case Some(key) =>
        {
          if keyOpt.value == k {
            i := |seqs_of_map(m).keys| - 1;
          } else {
            var m' := MapRemove1(m, key);
            i := GetIndex_seqs_of_map(m', k);
          }
        }
    }
  }
  lemma  MapMapsIndex_seqs_of_map(m: map<Key, Message>, i: int)
    requires 0 <= i < |seqs_of_map(m).keys|
    ensures seqs_of_map(m).keys[i] in m
    ensures m[seqs_of_map(m).keys[i]] == seqs_of_map(m).msgs[i]
    decreases m, i
  {
    ghost var keyOpt: Option<Key> := maximumKey(m.Keys);
    match keyOpt {
      case None() =>
        {
          assert false;
        }
      case Some(key) =>
        {
          if i == |seqs_of_map(m).keys| - 1 {
          } else {
            var m' := MapRemove1(m, key);
            MapMapsIndex_seqs_of_map(m', i);
            assert key != seqs_of_map(m).keys[i];
          }
        }
    }
  }
  lemma {:fuel seqs_of_map, 0} {:fuel map_of_seqs, 0}  map_of_seqs_of_seqs_of_map(m: map<Key, Message>)
    ensures ghost var a: SeqPair := seqs_of_map(m); map_of_seqs(a.keys, a.msgs) == m
    decreases m
  {
    IsStrictlySorted_seqs_of_map(m);
    ghost var a: SeqPair := seqs_of_map(m);
    ghost var t: map<Key, Message> := map_of_seqs(a.keys, a.msgs);
    forall k: Key {:trigger m[k]} {:trigger t[k]} {:trigger k in t} {:trigger k in m} | k in m
      ensures k in t && t[k] == m[k]
    {
      ghost var i: int := GetIndex_seqs_of_map(m, k);
      MapMapsIndex(a.keys, a.msgs, i);
    }
    forall k: Key {:trigger k in m} {:trigger k in t} | k in t
      ensures k in m
    {
      ghost var i: int := GetIndex(a.keys, a.msgs, k);
      MapMapsIndex_seqs_of_map(m, i);
    }
  }
  lemma GetIndex(keys: seq<Key>, msgs: seq<Message>, key: Key)
      returns (i: int)
    requires |keys| == |msgs|
    requires key in map_of_seqs(keys, msgs)
    ensures 0 <= i < |keys|
    ensures keys[i] == key
    ensures msgs[i] == map_of_seqs(keys, msgs)[key]
    decreases keys, msgs, key
  {
    if keys[|keys| - 1] == key {
      i := |keys| - 1;
    } else {
      i := GetIndex(DropLast(keys), DropLast(msgs), key);
    }
  }
  lemma GetIndexOfVal(keys: seq<Key>, msgs: seq<Message>, key: Key, m: Message)
      returns (i: int)
    requires |keys| == |msgs|
    requires key in map_of_seqs(keys, msgs)
    requires map_of_seqs(keys, msgs)[key] == m
    ensures 0 <= i < |keys|
    ensures keys[i] == key
    ensures msgs[i] == m
    decreases keys, msgs, key, m
  {
    if keys[|keys| - 1] == key && msgs[|msgs| - 1] == m {
      i := |keys| - 1;
    } else {
      i := GetIndex(DropLast(keys), DropLast(msgs), key);
    }
  }
  lemma lemma_maxkey_not_in_map_of_seqs_drop_last(keys: seq<Key>, msgs: seq<Message>)
    requires |keys| == |msgs|
    requires IsStrictlySorted(keys)
    requires |keys| > 0
    ensures keys[|keys| - 1] !in map_of_seqs(DropLast(keys), DropLast(msgs))
    decreases keys, msgs
  {
    if keys[|keys| - 1] in map_of_seqs(DropLast(keys), DropLast(msgs)) {
      ghost var i: int := GetIndex(DropLast(keys), DropLast(msgs), keys[|keys| - 1]);
      reveal_IsStrictlySorted();
    }
  }
  lemma  SeqsEqOfMapsEq(keys: seq<Key>, msgs: seq<Message>, keys': seq<Key>, msgs': seq<Message>)
    requires IsStrictlySorted(keys)
    requires IsStrictlySorted(keys')
    requires |keys| == |msgs|
    requires |keys'| == |msgs'|
    requires map_of_seqs(keys, msgs) == map_of_seqs(keys', msgs')
    ensures keys == keys'
    ensures msgs == msgs'
    decreases keys, msgs, keys', msgs'
  {
    if |keys| == 0 {
      assert map_of_seqs(keys', msgs') == map_of_seqs(keys, msgs) == map[];
      if 0 < |keys'| {
        MapMapsIndex(keys', msgs', 0);
        assert false;
      }
    } else {
      ghost var maxkey: Key := Last(keys);
      ghost var maxval: Message := Last(msgs);
      MapMapsIndex(keys, msgs, |keys| - 1);
      ghost var i: int := GetIndex(keys', msgs', maxkey);
      assert i == |keys'| - 1 by {
        if i < |keys'| - 1 {
          ghost var maxkey': Key := Last(keys');
          MapMapsIndex(keys', msgs', |keys'| - 1);
          ghost var j: int := GetIndex(keys, msgs, maxkey');
          reveal_IsStrictlySorted();
        }
      }
      assert Last(keys) == Last(keys');
      assert IsStrictlySorted(DropLast(keys)) by {
        reveal_IsStrictlySorted();
      }
      assert IsStrictlySorted(DropLast(keys')) by {
        reveal_IsStrictlySorted();
      }
      calc == {
        map_of_seqs(DropLast(keys), DropLast(msgs));
      ==
        {
          lemma_maxkey_not_in_map_of_seqs_drop_last(keys, msgs);
        }
        MapRemove1(map_of_seqs(keys, msgs), maxkey);
      ==
        MapRemove1(map_of_seqs(keys', msgs'), maxkey);
      ==
        {
          lemma_maxkey_not_in_map_of_seqs_drop_last(keys', msgs');
        }
        map_of_seqs(DropLast(keys'), DropLast(msgs'));
      }
      SeqsEqOfMapsEq(DropLast(keys), DropLast(msgs), DropLast(keys'), DropLast(msgs'));
      calc == {
        keys;
      ==
        DropLast(keys) + [Last(keys)];
      ==
        DropLast(keys') + [Last(keys')];
      ==
        keys';
      }
      calc == {
        msgs;
      ==
        DropLast(msgs) + [Last(msgs)];
      ==
        DropLast(msgs') + [Last(msgs')];
      ==
        msgs';
      }
    }
  }
  lemma MapOfEmptySeq()
    ensures map_of_seqs([], []) == map[]
    ensures IsStrictlySorted([])
  {
    reveal_IsStrictlySorted();
  }
  lemma  map_of_seqs_push_back(keys: seq<Key>, msgs: seq<Message>, key: Key, msg: Message)
    requires |keys| == |msgs|
    requires IsStrictlySorted(keys)
    requires forall k: Element {:trigger lt(k, key)} {:trigger k in keys} | k in keys :: lt(k, key)
    ensures map_of_seqs(keys + [key], msgs + [msg]) == map_of_seqs(keys, msgs)[key := msg]
    ensures key !in map_of_seqs(keys, msgs)
    decreases keys, msgs, key, msg
  {
    if key in map_of_seqs(keys, msgs) {
      ghost var i: int := GetIndex(keys, msgs, key);
      assert lt(keys[i], key);
    }
  }
  lemma map_of_seqs_pop_front(keys: seq<Key>, msgs: seq<Message>, i: int)
    requires |keys| == |msgs|
    requires 0 <= i < |keys|
    requires IsStrictlySorted(keys)
    ensures map_of_seqs(keys[i + 1..], msgs[i + 1..])[keys[i] := msgs[i]] == map_of_seqs(keys[i..], msgs[i..])
    ensures keys[i] !in map_of_seqs(keys[i + 1..], msgs[i + 1..])
    decreases keys, msgs, i
  {
    ghost var a: map<Key, Message> := map_of_seqs(keys[i + 1..], msgs[i + 1..])[keys[i] := msgs[i]];
    ghost var b: map<Key, Message> := map_of_seqs(keys[i..], msgs[i..]);
    forall k: Key {:trigger b[k]} {:trigger a[k]} {:trigger k in b} {:trigger k in a} | k in a
      ensures k in b && a[k] == b[k]
    {
      reveal_IsStrictlySorted();
      if k == keys[i] {
        MapMapsIndex(keys[i..], msgs[i..], 0);
        assert a[k] == b[k];
      } else {
        ghost var j: int := GetIndex(keys[i + 1..], msgs[i + 1..], k);
        MapMapsIndex(keys[i..], msgs[i..], j + 1);
        assert a[k] == b[k];
      }
    }
    forall k: Key {:trigger k in a} {:trigger k in b} | k in b
      ensures k in a
    {
      reveal_IsStrictlySorted();
      ghost var j: int := GetIndex(keys[i..], msgs[i..], k);
      if j > 0 {
        MapMapsIndex(keys[i + 1..], msgs[i + 1..], j - 1);
      } else {
      }
    }
    if keys[i] in map_of_seqs(keys[i + 1..], msgs[i + 1..]) {
      ghost var j: int := GetIndex(keys[i + 1..], msgs[i + 1..], keys[i]);
      reveal_IsStrictlySorted();
      assert false;
    }
  }
  lemma  map_union_of_seq_concat(keys1: seq<Key>, msgs1: seq<Message>, keys2: seq<Key>, msgs2: seq<Message>)
    requires |keys1| == |msgs1|
    requires |keys2| == |msgs2|
    requires IsStrictlySorted(keys1 + keys2)
    ensures IsStrictlySorted(keys1)
    ensures IsStrictlySorted(keys2)
    ensures map_of_seqs(keys1, msgs1).Keys !! map_of_seqs(keys2, msgs2).Keys
    ensures MapDisjointUnion(map_of_seqs(keys1, msgs1), map_of_seqs(keys2, msgs2)) == map_of_seqs(keys1 + keys2, msgs1 + msgs2)
    decreases keys1, msgs1, keys2, msgs2
  {
    assert IsStrictlySorted(keys1) by {
      reveal_IsStrictlySorted();
      assert keys1 == (keys1 + keys2)[..|keys1|];
    }
    assert IsStrictlySorted(keys2) by {
      reveal_IsStrictlySorted();
      assert keys2 == (keys1 + keys2)[|keys1|..];
    }
    key_sets_eq(keys1, msgs1);
    key_sets_eq(keys2, msgs2);
    forall k: Key {:trigger k in map_of_seqs(keys2, msgs2).Keys} {:trigger k in map_of_seqs(keys1, msgs1).Keys} | k in map_of_seqs(keys1, msgs1).Keys && k in map_of_seqs(keys2, msgs2).Keys
      ensures false
    {
      ghost var i: int := GetIndex(keys1, msgs1, k);
      ghost var j: int := GetIndex(keys2, msgs2, k);
      reveal_IsStrictlySorted();
      assert (keys1 + keys2)[i] == (keys1 + keys2)[|keys1| + j];
    }
    ghost var a: map<Key, Message> := MapDisjointUnion(map_of_seqs(keys1, msgs1), map_of_seqs(keys2, msgs2));
    ghost var b: map<Key, Message> := map_of_seqs(keys1 + keys2, msgs1 + msgs2);
    forall k: Key {:trigger b[k]} {:trigger a[k]} {:trigger k in b} {:trigger k in a} | k in a
      ensures k in b && a[k] == b[k]
    {
      if k in map_of_seqs(keys1, msgs1) {
        ghost var i: int := GetIndex(keys1, msgs1, k);
        MapMapsIndex(keys1 + keys2, msgs1 + msgs2, i);
      } else {
        ghost var i: int := GetIndex(keys2, msgs2, k);
        MapMapsIndex(keys1 + keys2, msgs1 + msgs2, |keys1| + i);
      }
    }
    forall k: Key {:trigger k in a} {:trigger k in b} | k in b
      ensures k in a
    {
      ghost var i: int := GetIndex(keys1 + keys2, msgs1 + msgs2, k);
      if i < |keys1| {
        MapMapsIndex(keys1, msgs1, i);
      } else {
        MapMapsIndex(keys2, msgs2, i - |keys1|);
      }
    }
    assert a == b;
  }
  lemma  eq_map_of_seqs(keys: seq<Key>, msgs: seq<Message>, bmap: map<Key, Message>)
    requires IsStrictlySorted(keys)
    requires Set(keys) == bmap.Keys
    requires |keys| == |msgs|
    requires forall i: int {:trigger msgs[i]} {:trigger keys[i]} | 0 <= i < |keys| :: bmap[keys[i]] == msgs[i]
    ensures bmap == map_of_seqs(keys, msgs)
    decreases keys, msgs, bmap
  {
    ghost var m: map<Key, Message> := map_of_seqs(keys, msgs);
    forall k: seq<NativeTypes.byte> {:trigger m[k]} {:trigger bmap[k]} {:trigger k in m} {:trigger k in bmap} | k in bmap
      ensures k in m && bmap[k] == m[k]
    {
      ghost var i: int :| 0 <= i < |keys| && keys[i] == k;
      MapMapsIndex(keys, msgs, i);
    }
    forall k: Key {:trigger k in bmap} {:trigger k in m} | k in m
      ensures k in bmap
    {
      ghost var i: int := GetIndex(keys, msgs, k);
    }
    assert m == bmap;
  }
  lemma  MapHasKey(keys: seq<Key>, msgs: seq<Message>, i: int)
    requires |keys| == |msgs|
    requires 0 <= i < |keys|
    ensures keys[i] in map_of_seqs(keys, msgs)
    decreases keys, msgs, i
  {
    if i == |keys| - 1 {
    } else {
      MapHasKey(DropLast(keys), DropLast(msgs), i);
    }
  }
  lemma  key_sets_eq(keys: seq<Key>, msgs: seq<Message>)
    requires |keys| == |msgs|
    ensures Set(keys) == map_of_seqs(keys, msgs).Keys
    decreases keys, msgs
  {
    ghost var a: set<Key> := Set(keys);
    ghost var b: set<Key> := map_of_seqs(keys, msgs).Keys;
    forall k: Key {:trigger k in b} {:trigger k in a} | k in a
      ensures k in b
    {
      ghost var i: int :| 0 <= i < |keys| && keys[i] == k;
      MapHasKey(keys, msgs, i);
    }
    forall k: Key {:trigger k in a} {:trigger k in b} | k in b
      ensures k in a
    {
      ghost var i: int := GetIndex(keys, msgs, k);
    }
  }
  lemma  value_sets_le(keys: seq<Key>, msgs: seq<Message>)
    requires |keys| == |msgs|
    ensures map_of_seqs(keys, msgs).Values <= Set(msgs)
    decreases keys, msgs
  {
    ghost var mp: map<Key, Message> := map_of_seqs(keys, msgs);
    ghost var a: set<Message> := mp.Values;
    ghost var b: set<Message> := Set(msgs);
    forall m: Message {:trigger m in b} {:trigger m in a} | m in a
      ensures m in b
    {
      assert exists k: seq<NativeTypes.byte> {:trigger mp[k]} {:trigger k in mp} :: k in mp && mp[k] == m;
      ghost var k: Key :| k in mp && mp[k] == m;
      ghost var i: int := GetIndex(keys, msgs, k);
    }
  }
  lemma  lemma_multisets_eq(keys: seq<Key>, msgs: seq<Message>)
    requires IsStrictlySorted(keys)
    requires |keys| == |msgs|
    ensures ghost var m: map<Key, Message> := map_of_seqs(keys, msgs); multiset(m.Keys) == multiset(keys) && Multisets.ValueMultiset(m) == multiset(msgs)
    decreases keys, msgs
  {
    if |keys| == 0 {
    } else {
      ghost var keys': seq<Key> := DropLast(keys);
      ghost var msgs': seq<Message> := DropLast(msgs);
      ghost var key: Key := Last(keys);
      ghost var msg: Message := Last(msgs);
      ghost var m: map<Key, Message> := map_of_seqs(keys, msgs);
      ghost var m': map<Key, Message> := map_of_seqs(DropLast(keys), DropLast(msgs));
      assert key !in m' by {
        lemma_maxkey_not_in_map_of_seqs_drop_last(keys, msgs);
      }
      calc == {
        multiset(m.Keys);
      ==
        multiset(m'.Keys) + multiset{key};
      ==
        {
          reveal_IsStrictlySorted();
          lemma_multisets_eq(keys', msgs');
        }
        multiset(keys') + multiset{key};
      ==
        {
          assert keys == keys' + [key];
        }
        multiset(keys);
      }
      calc == {
        Multisets.ValueMultiset(m);
      ==
        {
          Multisets.ValueMultisetInduct(m', key, msg);
        }
        Multisets.ValueMultiset(m') + multiset{msg};
      ==
        {
          reveal_IsStrictlySorted();
          lemma_multisets_eq(keys', msgs');
        }
        multiset(msgs') + multiset{msg};
      ==
        {
          assert msgs == msgs' + [msg];
        }
        multiset(msgs);
      }
    }
  }
  lemma  lemma_multisets_le(keys: seq<Key>, msgs: seq<Message>)
    requires |keys| == |msgs|
    ensures ghost var m: map<Key, Message> := map_of_seqs(keys, msgs); multiset(m.Keys) <= multiset(keys) && Multisets.ValueMultiset(m) <= multiset(msgs)
    decreases keys, msgs
  {
    if |keys| == 0 {
    } else {
      ghost var keys': seq<Key> := DropLast(keys);
      ghost var msgs': seq<Message> := DropLast(msgs);
      ghost var key: Key := Last(keys);
      ghost var msg: Message := Last(msgs);
      ghost var m: map<Key, Message> := map_of_seqs(keys, msgs);
      ghost var m': map<Key, Message> := map_of_seqs(DropLast(keys), DropLast(msgs));
      ghost var m1: map<Key, Message> := MapRemove1(m, key);
      calc == {
        multiset(m.Keys);
      ==
        multiset(m1.Keys) + multiset{key};
      <=
        multiset(m'.Keys) + multiset{key};
      <=
        {
          reveal_IsStrictlySorted();
          lemma_multisets_le(keys', msgs');
        }
        multiset(keys') + multiset{key};
      ==
        {
          assert keys == keys' + [key];
        }
        multiset(keys);
      }
      calc == {
        Multisets.ValueMultiset(m);
      ==
        {
          assert m == m1[key := msg];
          Multisets.ValueMultisetInduct(m1, key, msg);
        }
        Multisets.ValueMultiset(m1) + multiset{msg};
      <=
        {
          if key in m' {
            Multisets.ValueMultisetInduct(m1, key, m'[key]);
            assert m' == m1[key := m'[key]];
            assert Multisets.ValueMultiset(m1) <= Multisets.ValueMultiset(m');
          } else {
            assert m1 == m';
            assert Multisets.ValueMultiset(m1) == Multisets.ValueMultiset(m');
          }
        }
        Multisets.ValueMultiset(m') + multiset{msg};
      <=
        {
          reveal_IsStrictlySorted();
          lemma_multisets_le(keys', msgs');
        }
        multiset(msgs') + multiset{msg};
      ==
        {
          assert msgs == msgs' + [msg];
        }
        multiset(msgs);
      }
    }
  }
  lemma empty_seqs_of_map()
    ensures |seqs_of_map(map[]).keys| == 0
  {
  }
  lemma  emptiness_map_of_seqs(keys: seq<Key>, msgs: seq<Message>)
    requires |keys| == |msgs|
    ensures |keys| == 0 <==> map_of_seqs(keys, msgs) == map[]
    decreases keys, msgs
  {
    if |keys| == 0 {
      assert map_of_seqs(keys, msgs) == map[];
    } else {
      assert Last(keys) in map_of_seqs(keys, msgs);
      assert map_of_seqs(keys, msgs) != map[];
    }
  }
  lemma  induct_map_of_seqs(keys: seq<Key>, msgs: seq<Message>)
    requires |keys| == |msgs| > 0
    ensures map_of_seqs(keys, msgs) == map_of_seqs(DropLast(keys), DropLast(msgs))[Last(keys) := Last(msgs)]
    decreases keys, msgs
  {
  }
}
Dafny program verifier did not attempt verification