// MainHandlers.i.dfy
module MainHandlers refines Main {
  type FullVariables = FullImpl.Full
  predicate Inv(fs: FullVariables)
    decreases fs
  {
    fs.Inv()
  }
  function I(fs: FullVariables): ADM.M.Variables
    requires Inv(fs)
    decreases fs
  {
    fs.I()
  }
  method PrintMetadata()
  {
    print "metadata NodeBlockSize ", Bounds.NodeBlockSizeUint64(), "\n";
    print "metadata MaxTotalBucketWeight ", Bounds.MaxTotalBucketWeightUint64(), "\n";
    print "metadata MaxCacheSize ", Bounds.MaxCacheSizeUint64(), "\n";
    print "metadata MaxNumChildren ", Bounds.MaxNumChildrenUint64(), "\n";
    print "metadata IndirectionTableBlockSize ", Bounds.IndirectionTableBlockSizeUint64(), "\n";
    print "metadata MinNodeBlockIndex ", Bounds.MinNodeBlockIndexUint64(), "\n";
    print "metadata DiskNumJournalBlocks ", Bounds.DiskNumJournalBlocksUint64(), "\n";
  }
  method handleEvictEverything(inout old_s: FullVariables, io: DiskIOHandler) returns (s: FullVariables)
    requires false
    decreases old_s, io
  {
    s := old_s;
    print "\nBefore\n";
    var count: uint64 := CacheImpl.CacheCount(s.bc.cache);
    while count > 0
      decreases count as int - 0 as int
    {
      var _inout_tmp_0: ImplVariables;
      _inout_tmp_0 := EvictOrDealloc(inout s.bc, io);
      s := s.(bc := _inout_tmp_0);
      count := CacheImpl.CacheCount(s.bc.cache);
    }
    print "\nAfter\n";
  }
  method handleCountAmassAllocations(inout old_fs: FullVariables, io: DiskIOHandler) returns (fs: FullVariables)
    requires false
    decreases old_fs, io
  {
    fs := old_fs;
  }
  predicate InitDiskContents(diskContents: map<uint64, seq<byte>>)
    decreases diskContents
  {
    MkfsModel.InitDiskContents(diskContents)
  }
  function SystemI(s: ADM.Variables): ThreeStateVersionedMap.Variables
    requires ADM.Inv(s)
    decreases s
  {
    System_Ref.I(s)
  }
}
Dafny program verifier did not attempt verification