// LinearUSeq.i.dfy
module USeq {
  export
  datatype  USeq = USeq(dlist: DList.DList<uint64>, ptr_map: LinearMutableMap.LinearHashMap<uint64>) {
    static method Alloc() returns (useq: USeq)
    {
      var size: uint64 := 128;
      var dlist: DList<uint64> := DList.DList<uint64>.Alloc(size + 1);
      var ptr_map: LinearHashMap<uint64> := LinearMutableMap.Constructor(size);
      useq := USeq(dlist, ptr_map);
    }
    method Free()
    {
      var USeq(dlist: DList.DList<uint64>, ptr_map: LinearMutableMap.LinearHashMap<uint64>) := this;
      dlist.Free();
      LinearMutableMap.Destructor(ptr_map);
    }
    method Add(inout old_self: USeq, x: uint64) returns (self: USeq)
    {
      self := old_self;
      var found: Option<uint64> := LinearMutableMap.Get(self.ptr_map, x);
      if !found.Some? {
        var p: uint64, _inout_tmp_0: DList<uint64> := self.dlist.InsertBefore(inout self.dlist, 0, x);
        self := self.(dlist := _inout_tmp_0);
        var _inout_tmp_1: LinearHashMap<uint64>;
        _inout_tmp_1 := LinearMutableMap.Insert(inout self.ptr_map, x, p);
        self := self.(ptr_map := _inout_tmp_1);
      }
    }
    method Remove(inout old_self: USeq, x: uint64) returns (self: USeq)
    {
      self := old_self;
      var removed: Option<uint64>, _inout_tmp_1: LinearHashMap<uint64> := LinearMutableMap.RemoveAndGet(inout self.ptr_map, x);
      self := self.(ptr_map := _inout_tmp_1);
      if removed.Some? {
        var Some(p: uint64) := removed;
        var _inout_tmp_0: DList<uint64>;
        _inout_tmp_0 := self.dlist.Remove(inout self.dlist, p);
        self := self.(dlist := _inout_tmp_0);
      }
    }
    function method First(): (x: uint64)
    {
      this.dlist.Get(this.dlist.Next(0))
    }
    function method FirstOpt(): (x: Option<uint64>)
    {
      var p: uint64 := this.dlist.Next(0);
      if p == 0 then
        None
      else
        Some(this.dlist.Get(p))
    }
    method Clone() returns (useq': USeq)
    {
      var USeq(dlist: DList.DList<uint64>, ptr_map: LinearMutableMap.LinearHashMap<uint64>) := this;
      var dlist': DList<uint64> := dlist.Clone();
      var ptr_map': LinearHashMap<uint64> := LinearMutableMap.Clone(ptr_map);
      useq' := USeq(dlist', ptr_map');
    }
  }
}
Dafny program verifier did not attempt verification