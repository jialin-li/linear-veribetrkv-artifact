// GrowModel.i.dfy
module GrowModel {
  function {:opaque} {:fuel 0, 0} grow(s: BBC.Variables, refUpperBound: uint64): BBC.Variables
    requires BBC.Inv(s)
    requires s.Ready?
    requires BT.G.Root() in s.cache
    requires forall r: uint64 {:trigger r in s.ephemeralIndirectionTable.graph} | r in s.ephemeralIndirectionTable.graph :: r <= refUpperBound
    decreases s, refUpperBound
  {
    lemmaChildrenConditionsOfNode(s, BT.G.Root());
    if s.frozenIndirectionTable.Some? && s.frozenIndirectionTable.value.hasEmptyLoc(BT.G.Root()) then
      s
    else
      ghost var oldroot: G.Node := s.cache[BT.G.Root()]; if !ContainsAllKeys(oldroot.pivotTable) then s else var (s1: BBC.Variables, newref: Option<BT.G.Reference>) := allocBookkeeping(s, oldroot.children, refUpperBound); lemmaChildrenConditionsSingleOfAllocBookkeeping(s, oldroot.children, refUpperBound); match newref { case None => s1 case Some(_mcc#0: NativeTypes.uint64) => ghost var newref: NativeTypes.uint64 := _mcc#0; ghost var newroot: Node := BT.G.Node(InitPivotTable(), Some([newref]), [EmptyBucket()]); ghost var s2: BC.Variables := writeBookkeeping(s1, BT.G.Root(), newroot.children); ghost var s': BC.Variables := s2.(cache := s2.cache[BT.G.Root() := newroot][newref := oldroot]); s' }
  }
  lemma {:timeLimitMultiplier 3}  growCorrect(s: BBC.Variables, refUpperBound: uint64)
    requires grow.requires(s, refUpperBound)
    requires s.totalCacheSize() <= MaxCacheSize() - 1
    ensures ghost var s': BC.Variables := grow(s, refUpperBound); s'.Ready? && s'.totalCacheSize() <= MaxCacheSize() && StateBCImpl.WFCache(s'.cache) && betree_next(s, s')
    decreases s, refUpperBound
  {
    reveal_grow();
    ghost var s': BBC.Variables := grow(s, refUpperBound);
    lemmaChildrenConditionsOfNode(s, BT.G.Root());
    if s.frozenIndirectionTable.Some? && ghost var table: IndirectionTable := s.frozenIndirectionTable.value; BT.G.Root() in table.graph && BT.G.Root() !in table.locs {
      assert noop(s, s);
      return;
    }
    ghost var oldroot: G.Node := s.cache[BT.G.Root()];
    if !ContainsAllKeys(oldroot.pivotTable) {
      assert noop(s, s);
      return;
    }
    var (s1: BBC.Variables, newref: Option<BT.G.Reference>) := allocWithNode(s, oldroot, refUpperBound);
    reveal_allocBookkeeping();
    reveal_writeBookkeeping();
    match newref {
      case None() =>
        {
          assert noop(s, s);
        }
      case Some(newref) =>
        {
          var newroot := BT.G.Node(InitPivotTable(), Some([newref]), [EmptyBucket()]);
          WeightBucketListOneEmpty();
          assert BT.G.Root() in s.cache;
          assert BT.G.Root() in s1.cache;
          var s2 := writeWithNode(s1, BT.G.Root(), newroot);
          assert s2 == s';
          allocCorrect(s, oldroot, refUpperBound);
          writeCorrect(s1, BT.G.Root(), newroot);
          var growth := BT.RootGrowth(oldroot, newref);
          assert newroot == BT.G.Node(InitPivotTable(), Some([growth.newchildref]), [EmptyBucket()]);
          var step := BT.BetreeGrow(growth);
          assert BT.ValidGrow(growth);
          BC.MakeTransaction2(s, s1, s', BT.BetreeStepOps(step));
          assert BBC.BetreeMove(s, s', BlockDisk.NoDiskOp, AdvanceOp(UI.NoOp, true), step);
          assert stepsBetree(s, s', AdvanceOp(UI.NoOp, true), step);
        }
    }
  }
}
Dafny program verifier did not attempt verification