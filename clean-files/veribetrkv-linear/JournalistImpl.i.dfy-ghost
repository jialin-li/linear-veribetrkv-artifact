// JournalistImpl.i.dfy
module JournalistImpl {
    reveals basic_mod, Journalist.ReplayJournal, Journalist.Iprivate, Journalist.mid, Journalist.InMemoryJournalFrozen, Journalist.end, MaxPossibleEntries, Journalist.InMemoryJournal, CorrectJournalBlockSizes, Journalist.WF, Journalist, Journalist.Inv, JournalInfo
    reveals basic_mod, Journalist.ReplayJournal, Journalist.Iprivate, Journalist.mid, Journalist.InMemoryJournalFrozen, Journalist.end, MaxPossibleEntries, Journalist.InMemoryJournal, CorrectJournalBlockSizes, Journalist.WF, Journalist, Journalist.Inv, JournalInfo
  datatype   JournalInfo = JournalInfo(inMemoryJournalFrozen: seq<JournalEntry>, inMemoryJournal: seq<JournalEntry>, replayJournal: seq<JournalEntry>, journalFront: Option<JournalRange>, journalBack: Option<JournalRange>, ghost writtenJournalLen: int)
  datatype   Journalist = Journalist(journalEntries: seq<JournalEntry>, start: uint64, len1: uint64, len2: uint64, replayJournal: seq<JournalEntry>, replayIdx: uint64, journalFront: Option<seq<JournalBlock>>, journalBack: Option<seq<JournalBlock>>, writtenJournalBlocks: uint64, frozenJournalBlocks: uint64, inMemoryWeight: uint64) {
    predicate WF()
      decreases this
    {
      1 <= |journalEntries| <= 2 * MaxPossibleEntries() as int &&
      0 <= start < |journalEntries| as uint64 &&
      0 <= len1 <= |journalEntries| as uint64 &&
      0 <= len2 <= |journalEntries| as uint64 &&
      0 <= len1 + len2 <= |journalEntries| as uint64 &&
      0 <= replayIdx as int <= |replayJournal| <= MaxPossibleEntries() as int &&
      (journalFront.Some? ==>
        CorrectJournalBlockSizes(journalFront.value)) &&
      (journalBack.Some? ==>
        CorrectJournalBlockSizes(journalBack.value)) &&
      0 <= writtenJournalBlocks <= NumJournalBlocks() &&
      0 <= frozenJournalBlocks <= NumJournalBlocks() &&
      0 <= inMemoryWeight <= NumJournalBlocks() * 4096
    }
    predicate Inv()
      decreases this
    {
      WF() &&
      (writtenJournalBlocks + frozenJournalBlocks) * 4064 + inMemoryWeight <= 4064 * NumJournalBlocks() &&
      WeightJournalEntries(InMemoryJournalFrozen()) <= frozenJournalBlocks as int * 4064 &&
      WeightJournalEntries(InMemoryJournal()) == inMemoryWeight as int
    }
    function mid(len: uint64): uint64
      requires len <= 2 * MaxPossibleEntries()
      requires start < len
      requires len1 <= len
      decreases this, len
    {
      basic_mod(start + len1, len)
    }
    function end(len: uint64): uint64
      requires len <= 2 * MaxPossibleEntries()
      requires start < len
      requires len1 <= len
      requires len2 <= len
      decreases this, len
    {
      basic_mod(start + len1 + len2, len)
    }
    function InMemoryJournalFrozen(): seq<JournalEntry>
      requires WF()
      decreases this
    {
      cyclicSlice(journalEntries, start, len1)
    }
    function InMemoryJournal(): seq<JournalEntry>
      requires WF()
      decreases this
    {
      cyclicSlice(journalEntries, mid(|journalEntries| as uint64), len2)
    }
    function ReplayJournal(): seq<JournalEntry>
      requires 0 <= replayIdx as int <= |replayJournal|
      decreases this
    {
      replayJournal[replayIdx..]
    }
    function Iprivate(): JournalInfo
      requires WF()
      decreases this
    {
      JournalInfo(InMemoryJournalFrozen(), InMemoryJournal(), ReplayJournal(), journalFront, journalBack, writtenJournalBlocks as int)
    }
    function I(): JournalInfo
      requires WF()
      decreases this
    {
      Iprivate()
    }
    static method Constructor() returns (j: Journalist)
      ensures j.Inv()
      ensures j.I().inMemoryJournalFrozen == []
      ensures j.I().inMemoryJournal == []
      ensures j.I().replayJournal == []
      ensures j.I().journalFront == None
      ensures j.I().journalBack == None
      ensures j.I().writtenJournalLen == 0
    {
      reveal_cyclicSlice();
      reveal_WeightJournalEntries();
      var jes: seq<JournalEntry> := seq_alloc_init(4096, JournalInsert([], []));
      j := Journalist(jes, 0, 0, 0, [], 0, None, None, 0, 0, 0);
    }
    method hasFrozenJournal() returns (b: bool)
      requires Inv()
      ensures b == (I().inMemoryJournalFrozen != [])
      decreases this
    {
      return len1 != 0;
    }
    method hasInMemoryJournal() returns (b: bool)
      requires Inv()
      ensures b == (I().inMemoryJournal != [])
      decreases this
    {
      return len2 != 0;
    }
    method packageFrozenJournal(inout old_self: Journalist) returns (s: seq<byte>, self: Journalist)
      requires old_self.Inv()
      requires old_self.I().inMemoryJournalFrozen != []
      ensures self.Inv() && JournalRangeOfByteSeq(s).Some? && parseJournalRange(JournalRangeOfByteSeq(s).value) == Some(old_self.I().inMemoryJournalFrozen) && self.I() == old_self.I().(inMemoryJournalFrozen := []).(writtenJournalLen := old_self.I().writtenJournalLen + |JournalRangeOfByteSeq(s).value|) && |JournalRangeOfByteSeq(s).value| + old_self.I().writtenJournalLen as int <= NumJournalBlocks() as int
      decreases this, old_self
    {
      self := old_self;
      reveal_WeightJournalEntries();
      s := MarshallJournalEntries(self.journalEntries, self.start, self.len1, self.frozenJournalBlocks);
      var _inout_tmp_0: uint64 := basic_mod(self.start + self.len1, seq_length(self.journalEntries));
      self := self.(start := _inout_tmp_0);
      var _inout_tmp_1: uint64 := 0;
      self := self.(len1 := _inout_tmp_1);
      var _inout_tmp_2: uint64 := self.writtenJournalBlocks + self.frozenJournalBlocks;
      self := self.(writtenJournalBlocks := _inout_tmp_2);
      var _inout_tmp_3: uint64 := 0;
      self := self.(frozenJournalBlocks := _inout_tmp_3);
    }
    method packageInMemoryJournal(inout old_self: Journalist) returns (s: seq<byte>, self: Journalist)
      requires old_self.Inv()
      requires old_self.I().inMemoryJournalFrozen == []
      requires old_self.I().inMemoryJournal != []
      ensures self.Inv() && JournalRangeOfByteSeq(s).Some? && parseJournalRange(JournalRangeOfByteSeq(s).value) == Some(old_self.I().inMemoryJournal) && self.I() == old_self.I().(inMemoryJournal := []).(writtenJournalLen := old_self.I().writtenJournalLen + |JournalRangeOfByteSeq(s).value|) && |JournalRangeOfByteSeq(s).value| + old_self.I().writtenJournalLen as int <= NumJournalBlocks() as int
      decreases this, old_self
    {
      self := old_self;
      reveal_WeightJournalEntries();
      var numBlocks: uint64 := (self.inMemoryWeight + 4064 - 1) / 4064;
      s := MarshallJournalEntries(self.journalEntries, self.start, self.len2, numBlocks);
      var _inout_tmp_0: uint64 := 0;
      self := self.(start := _inout_tmp_0);
      var _inout_tmp_1: uint64 := 0;
      self := self.(len2 := _inout_tmp_1);
      var _inout_tmp_2: uint64 := 0;
      self := self.(inMemoryWeight := _inout_tmp_2);
      var _inout_tmp_3: uint64 := self.writtenJournalBlocks + numBlocks;
      self := self.(writtenJournalBlocks := _inout_tmp_3);
    }
    method getWrittenJournalLen() returns (len: uint64)
      requires Inv()
      ensures len as int == I().writtenJournalLen
      decreases this
    {
      return writtenJournalBlocks;
    }
    method setWrittenJournalLen(inout old_self: Journalist, len: uint64) returns (self: Journalist)
      requires old_self.Inv()
      requires old_self.I().inMemoryJournal == []
      requires old_self.I().inMemoryJournalFrozen == []
      requires 0 <= len <= NumJournalBlocks()
      ensures self.Inv()
      ensures self.I() == old_self.I().(writtenJournalLen := len as int)
      decreases this, old_self, len
    {
      self := old_self;
      reveal_WeightJournalEntries();
      var _inout_tmp_0: uint64 := len;
      self := self.(writtenJournalBlocks := _inout_tmp_0);
      var _inout_tmp_1: uint64 := 0;
      self := self.(frozenJournalBlocks := _inout_tmp_1);
    }
    method updateWrittenJournalLen(inout old_self: Journalist, len: uint64) returns (self: Journalist)
      requires old_self.Inv()
      requires len as int <= old_self.I().writtenJournalLen
      ensures self.Inv()
      ensures self.I() == old_self.I().(writtenJournalLen := len as int)
      decreases this, old_self, len
    {
      self := old_self;
      var _inout_tmp_0: uint64 := len;
      self := self.(writtenJournalBlocks := _inout_tmp_0);
    }
    method freeze(inout old_self: Journalist) returns (self: Journalist)
      requires old_self.Inv()
      ensures self.Inv() && self.I() == old_self.I().(inMemoryJournal := []).(inMemoryJournalFrozen := old_self.I().inMemoryJournalFrozen + old_self.I().inMemoryJournal)
      decreases this, old_self
    {
      self := old_self;
      reveal_WeightJournalEntries();
      var _inout_tmp_0: uint64 := self.len1 + self.len2;
      self := self.(len1 := _inout_tmp_0);
      var _inout_tmp_1: uint64 := 0;
      self := self.(len2 := _inout_tmp_1);
      var _inout_tmp_2: uint64 := self.frozenJournalBlocks + (self.inMemoryWeight + 4064 - 1) / 4064;
      self := self.(frozenJournalBlocks := _inout_tmp_2);
      var _inout_tmp_3: uint64 := 0;
      self := self.(inMemoryWeight := _inout_tmp_3);
      assert self.I().inMemoryJournalFrozen == old_self.I().inMemoryJournalFrozen + old_self.I().inMemoryJournal by {
        reveal_cyclicSlice();
      }
      WeightJournalEntriesSum(old_self.I().inMemoryJournalFrozen, old_self.I().inMemoryJournal);
    }
    function method canAppend(je: JournalEntry): (b: bool)
      requires Inv()
      decreases this, je
    {
      4064 * (writtenJournalBlocks + frozenJournalBlocks) + inMemoryWeight + WeightJournalEntryUint64(je) + (if len2 == 0 then 8 else 0) <= 4064 * NumJournalBlocks()
    }
    method reallocJournalEntries(je: JournalEntry, newLen: uint64) returns (newjes: seq<JournalEntry>)
      requires Inv()
      requires newLen == |journalEntries| as uint64 * 2
      ensures newLen as nat == |newjes|
      ensures newjes == journalEntries[start..] + journalEntries[..start] + [je] + fill(newLen as int - |journalEntries| - 1, JournalInsert([], []))
      decreases this, je, newLen
    {
      newjes := seq_alloc_init(newLen, JournalInsert([], []));
      var oldLen: uint64 := seq_length(journalEntries);
      var _inout_tmp_0: seq<JournalEntry>;
      _inout_tmp_0 := SeqCopy(journalEntries, inout newjes, start, oldLen, 0);
      newjes := _inout_tmp_0;
      var _inout_tmp_1: seq<JournalEntry>;
      _inout_tmp_1 := SeqCopy(journalEntries, inout newjes, 0, start, oldLen - start);
      newjes := _inout_tmp_1;
      assert newjes[..oldLen] == journalEntries[start..] + journalEntries[..start];
      var _inout_tmp_2: seq<JournalEntry>;
      _inout_tmp_2 := mut_seq_set(inout newjes, oldLen, je);
      newjes := _inout_tmp_2;
    }
    method append(inout old_self: Journalist, je: JournalEntry) returns (self: Journalist)
      requires old_self.Inv()
      requires old_self.canAppend(je)
      ensures self.Inv()
      ensures self.I() == old_self.I().(inMemoryJournal := old_self.I().inMemoryJournal + [je])
      decreases this, old_self, je
    {
      self := old_self;
      lenTimes8LeWeight(self.InMemoryJournal());
      lenTimes8LeWeight(self.InMemoryJournalFrozen());
      var len: uint64 := seq_length(self.journalEntries);
      if self.len1 + self.len2 < len {
        var idx: uint64 := basic_mod(self.start + self.len1 + self.len2, seq_length(self.journalEntries));
        var _inout_tmp_0: seq<JournalEntry>;
        _inout_tmp_0 := mut_seq_set(inout self.journalEntries, idx, je);
        self := self.(journalEntries := _inout_tmp_0);
      } else {
        var newLen: uint64 := len * 2;
        var newjes: seq<JournalEntry> := self.reallocJournalEntries(je, newLen);
        var Journalist(oldjes: seq<JournalEntry>, start: uint64, len1: uint64, len2: uint64, replayJournal: seq<JournalEntry>, replayIdx: uint64, journalFront: Option<seq<JournalBlock>>, journalBack: Option<seq<JournalBlock>>, writtenJournalBlocks: uint64, frozenJournalBlocks: uint64, inMemoryWeight: uint64) := self;
        self := Journalist(newjes, 0, len1, len2, replayJournal, replayIdx, journalFront, journalBack, writtenJournalBlocks, frozenJournalBlocks, inMemoryWeight);
        var _: () := seq_free(oldjes);
      }
      var _inout_tmp_1: uint64 := self.inMemoryWeight + WeightJournalEntryUint64(je) + if self.len2 == 0 then 8 else 0;
      self := self.(inMemoryWeight := _inout_tmp_1);
      var _inout_tmp_2: uint64 := self.len2 + 1;
      self := self.(len2 := _inout_tmp_2);
      reveal_cyclicSlice();
      assert self.InMemoryJournal() == old_self.InMemoryJournal() + [je];
      assert self.InMemoryJournalFrozen() == old_self.InMemoryJournalFrozen();
      lemma_weight_append(old_self.InMemoryJournal(), je);
    }
    function method isReplayEmpty(): (b: bool)
      requires Inv()
      ensures b == (I().replayJournal == [])
      decreases this
    {
      replayIdx == |replayJournal| as uint64
    }
    function method replayJournalTop(): (je: JournalEntry)
      requires Inv()
      requires I().replayJournal != []
      ensures je == I().replayJournal[0]
      decreases this
    {
      replayJournal[replayIdx]
    }
    method replayJournalPop(inout old_self: Journalist) returns (self: Journalist)
      requires old_self.Inv()
      requires old_self.I().replayJournal != []
      ensures self.Inv()
      ensures self.I() == old_self.I().(replayJournal := self.I().replayJournal)
      ensures old_self.I().replayJournal == [old_self.replayJournalTop()] + self.I().replayJournal
      decreases this, old_self
    {
      self := old_self;
      var _inout_tmp_0: uint64 := self.replayIdx + 1;
      self := self.(replayIdx := _inout_tmp_0);
    }
    method setFront(inout old_self: Journalist, jr: JournalRange) returns (self: Journalist)
      requires old_self.Inv()
      requires forall i: int {:trigger jr[i]} | 0 <= i < |jr| :: |jr[i]| == 4064
      requires |jr| <= NumJournalBlocks() as int
      ensures self.Inv()
      ensures self.I() == old_self.I().(journalFront := Some(jr))
      decreases this, old_self, jr
    {
      self := old_self;
      var _inout_tmp_0: Option<JournalRange> := Some(jr);
      self := self.(journalFront := _inout_tmp_0);
    }
    method setBack(inout old_self: Journalist, jr: JournalRange) returns (self: Journalist)
      requires old_self.Inv()
      requires forall i: int {:trigger jr[i]} | 0 <= i < |jr| :: |jr[i]| == 4064
      requires |jr| <= NumJournalBlocks() as int
      ensures self.Inv()
      ensures self.I() == old_self.I().(journalBack := Some(jr))
      decreases this, old_self, jr
    {
      self := old_self;
      var _inout_tmp_0: Option<JournalRange> := Some(jr);
      self := self.(journalBack := _inout_tmp_0);
    }
    method parseJournals(inout old_self: Journalist) returns (success: bool, self: Journalist)
      requires old_self.Inv()
      ensures self.Inv()
      ensures var old_I: JournalInfo := old_self.I(); self.Inv() && (!success ==> self.I() == old_I) && (success ==> var fullRange: seq<JournalBlock> := (if old_I.journalFront.Some? then old_I.journalFront.value else []) + if old_I.journalBack.Some? then old_I.journalBack.value else []; parseJournalRange(fullRange).Some? && self.I() == old_I.(journalFront := None).(journalBack := None).(replayJournal := parseJournalRange(fullRange).value))
      decreases this, old_self
    {
      self := old_self;
      var fullRange: seq<JournalBlock> := (if self.journalFront.Some? then self.journalFront.value else []) + if self.journalBack.Some? then self.journalBack.value else [];
      var p: Option<seq<JournalEntry>> := JournalistParsingImpl.ParseJournalRange(fullRange);
      if p.Some? && |p.value| as uint64 <= MaxPossibleEntries() {
        var _inout_tmp_0: Option<seq<JournalBlock>> := None;
        self := self.(journalFront := _inout_tmp_0);
        var _inout_tmp_1: Option<seq<JournalBlock>> := None;
        self := self.(journalBack := _inout_tmp_1);
        var _inout_tmp_2: seq<JournalEntry> := p.value;
        self := self.(replayJournal := _inout_tmp_2);
        var _inout_tmp_3: uint64 := 0;
        self := self.(replayIdx := _inout_tmp_3);
        success := true;
      } else {
        success := false;
      }
    }
    function method hasFront(): (b: bool)
      requires Inv()
      ensures b == I().journalFront.Some?
      decreases this
    {
      journalFront.Some?
    }
    function method hasBack(): (b: bool)
      requires Inv()
      ensures b == I().journalBack.Some?
      decreases this
    {
      journalBack.Some?
    }
  }
  function method MaxPossibleEntries(): uint64
  {
    32 * 1048576
  }
  function method basic_mod(x: uint64, len: uint64): uint64
    requires len <= 2 * MaxPossibleEntries()
    decreases x, len
  {
    if x >= len then
      x - len
    else
      x
  }
  predicate CorrectJournalBlockSizes(jr: JournalRange)
    decreases jr
  {
    |jr| <= NumJournalBlocks() as int &&
    forall i: int {:trigger jr[i]} | 0 <= i < |jr| :: 
      |jr[i]| == 4064
  }
  lemma lemma_weight_append(a: seq<JournalEntry>, je: JournalEntry)
    ensures |a| == 0 ==> WeightJournalEntries(a + [je]) == WeightJournalEntries(a) + WeightJournalEntry(je) + 8
    ensures |a| > 0 ==> WeightJournalEntries(a + [je]) == WeightJournalEntries(a) + WeightJournalEntry(je)
    decreases a, je
  {
    assert DropLast(a + [je]) == a;
    assert Last(a + [je]) == je;
    reveal_WeightJournalEntries();
    if |a| == 0 {
      assert WeightJournalEntries(a + [je]) == 8 + SumJournalEntries(a) + WeightJournalEntry(je) == 8 + SumJournalEntries([]) + WeightJournalEntry(je) == 8 + WeightJournalEntry(je);
      assert WeightJournalEntries(a) == 0;
    }
  }
}
Dafny program verifier did not attempt verification