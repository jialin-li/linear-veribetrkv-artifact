// Seqs.i.dfy
module Collections__Seqs_i {
  function last<T>(s: seq<T>): T
    requires |s| > 0
    decreases s
  {
    s[|s| - 1]
  }
  function all_but_last<T>(s: seq<T>): seq<T>
    requires |s| > 0
    ensures |all_but_last(s)| == |s| - 1
    decreases s
  {
    s[..|s| - 1]
  }
  lemma SeqAdditionIsAssociative<T>(a: seq<T>, b: seq<T>, c: seq<T>)
    ensures a + (b + c) == a + b + c
    decreases a, b, c
  {
  }
  predicate ItemAtPositionInSeq<T>(s: seq<T>, v: T, idx: int)
    decreases s, idx
  {
    0 <= idx < |s| &&
    s[idx] == v
  }
  lemma Lemma_ItemInSeqAtASomePosition<T>(s: seq<T>, v: T)
    requires v in s
    ensures exists idx: int {:trigger ItemAtPositionInSeq(s, v, idx)} :: ItemAtPositionInSeq(s, v, idx)
    decreases s
  {
    ghost var idx: int :| 0 <= idx < |s| && s[idx] == v;
    assert ItemAtPositionInSeq(s, v, idx);
  }
  function FindIndexInSeq<T>(s: seq<T>, v: T): int
    ensures ghost var idx: int := FindIndexInSeq(s, v); if idx >= 0 then idx < |s| && s[idx] == v else v !in s
    decreases s
  {
    if v in s then
      Lemma_ItemInSeqAtASomePosition(s, v);
      ghost var idx: int :| ItemAtPositionInSeq(s, v, idx);
      idx
    else
      -1
  }
  function SeqCat<T>(seqs: seq<seq<T>>): seq<T>
    decreases seqs
  {
    if |seqs| == 0 then
      []
    else
      seqs[0] + SeqCat(seqs[1..])
  }
  function SeqCatRev<T>(seqs: seq<seq<T>>): seq<T>
    decreases seqs
  {
    if |seqs| == 0 then
      []
    else
      SeqCatRev(all_but_last(seqs)) + last(seqs)
  }
  lemma {:induction true}  lemma_SeqCat_adds<T>(A: seq<seq<T>>, B: seq<seq<T>>)
    ensures SeqCat(A + B) == SeqCat(A) + SeqCat(B)
    decreases A, B
  {
    if |A| == 0 {
      assert A + B == B;
    } else {
      calc == {
        SeqCat(A + B);
      ==
        {
          assert (A + B)[0] == A[0];
          assert (A + B)[1..] == A[1..] + B;
        }
        A[0] + SeqCat(A[1..] + B);
      ==
        A[0] + SeqCat(A[1..]) + SeqCat(B);
      ==
        SeqCat(A) + SeqCat(B);
      }
    }
  }
  lemma {:induction true}  lemma_SeqCatRev_adds<T>(A: seq<seq<T>>, B: seq<seq<T>>)
    ensures SeqCatRev(A + B) == SeqCatRev(A) + SeqCatRev(B)
    decreases A, B
  {
    if |B| == 0 {
      assert SeqCatRev(B) == [];
      assert A + B == A;
    } else {
      calc == {
        SeqCatRev(A + B);
      ==
        {
          assert last(A + B) == last(B);
          assert all_but_last(A + B) == A + all_but_last(B);
        }
        SeqCatRev(A + all_but_last(B)) + last(B);
      ==
        SeqCatRev(A) + SeqCatRev(all_but_last(B)) + last(B);
      ==
        {
          assert SeqCatRev(all_but_last(B)) + last(B) == SeqCatRev(B);
        }
        SeqCatRev(A) + SeqCatRev(B);
      }
    }
  }
  lemma  lemma_SeqCat_equivalent<T>(seqs: seq<seq<T>>)
    ensures SeqCat(seqs) == SeqCatRev(seqs)
    decreases seqs
  {
    if |seqs| == 0 {
    } else {
      calc == {
        SeqCatRev(seqs);
      ==
        SeqCatRev(all_but_last(seqs)) + last(seqs);
      ==
        {
          lemma_SeqCat_equivalent(all_but_last(seqs));
        }
        SeqCat(all_but_last(seqs)) + last(seqs);
      ==
        SeqCat(all_but_last(seqs)) + SeqCat([last(seqs)]);
      ==
        {
          lemma_SeqCat_adds(all_but_last(seqs), [last(seqs)]);
          assert seqs == all_but_last(seqs) + [last(seqs)];
        }
        SeqCat(seqs);
      }
    }
  }
}
Dafny program verifier did not attempt verification