// DeallocImpl.i.dfy
module DeallocImpl {
  method Dealloc(inout old_s: ImplVariables, io: DiskIOHandler, ref: BT.G.Reference)
      returns (s: ImplVariables)
    requires old_s.Inv()
    requires io.initialized()
    requires old_s.Ready?
    requires old_s.ephemeralIndirectionTable.deallocable(ref)
    modifies io
    ensures s.WFBCVars()
    ensures s.Ready?
    ensures var dop: D.DiskOp := diskOp(IIO(io)); ValidDiskOp(dop) && IDiskOp(dop).jdop.NoDiskOp? && (BBC.Next(old_s.I(), s.I(), IDiskOp(dop).bdop, AdvanceOp(UI.NoOp, true)) || BBC.Next(old_s.I(), s.I(), IDiskOp(dop).bdop, StatesInternalOp))
    decreases old_s, io, ref
  {
    s := old_s;
    var nop: bool := false;
    if s.frozenIndirectionTable.lSome? {
      var b: bool := s.frozenIndirectionTable.value.HasEmptyLoc(ref);
      if b {
        print "giving up; dealloc can't run because frozen isn't written";
        nop := true;
      }
    }
    if nop || BC.OutstandingRead(ref) in s.outstandingBlockReads.Values {
      print "giving up; dealloc can't dealloc because of outstanding read\n";
      assert IOModel.noop(s.I(), s.I());
    } else {
      lemmaIndirectionTableLocIndexValid(s, ref);
      assert BC.OutstandingBlockReadsDoesNotHaveRef(s.outstandingBlockReads, ref);
      var oldLoc: Option<Location>, _inout_tmp_1: IndirectionTable := s.ephemeralIndirectionTable.RemoveRef(inout s.ephemeralIndirectionTable, ref);
      s := s.(ephemeralIndirectionTable := _inout_tmp_1);
      LruModel.LruRemove(s.lru.Queue(), ref);
      var _inout_tmp_2: LinearLru;
      _inout_tmp_2 := s.lru.Remove(inout s.lru, ref);
      s := s.(lru := _inout_tmp_2);
      var _inout_tmp_3: LMutCache;
      _inout_tmp_3 := s.cache.Remove(inout s.cache, ref);
      s := s.(cache := _inout_tmp_3);
      if oldLoc.Some? {
        var _inout_tmp_0: BlockAllocator;
        _inout_tmp_0 := s.blockAllocator.MarkFreeEphemeral(inout s.blockAllocator, oldLoc.value.addr / NodeBlockSizeUint64());
        s := s.(blockAllocator := _inout_tmp_0);
      }
      freeIndirectionTableLocCorrect(old_s, s, ref, if oldLoc.Some? then Some(oldLoc.value.addr as int / NodeBlockSize()) else None);
      reveal ConsistentBitmapInteral();
      assert s.WFBCVars();
      ghost var iDiskOp: BlockDisk.DiskOp := IDiskOp(diskOp(IIO(io))).bdop;
      assert BC.Unalloc(old_s.I(), s.I(), iDiskOp, AdvanceOp(UI.NoOp, true), ref);
      assert BBC.BlockCacheMove(old_s.I(), s.I(), iDiskOp, AdvanceOp(UI.NoOp, true), BC.UnallocStep(ref));
      assert BBC.NextStep(old_s.I(), s.I(), iDiskOp, AdvanceOp(UI.NoOp, true), BBC.BlockCacheMoveStep(BC.UnallocStep(ref)));
    }
  }
  method FindDeallocable(s: ImplVariables) returns (ref: Option<Reference>)
    requires s.Inv()
    requires s.Ready?
    ensures (ref.Some? ==> ref.value in s.ephemeralIndirectionTable.graph) && (ref.Some? ==> s.ephemeralIndirectionTable.deallocable(ref.value)) && (ref.None? ==> forall r: NativeTypes.uint64 {:trigger s.ephemeralIndirectionTable.deallocable(r)} {:trigger r in s.ephemeralIndirectionTable.graph} | r in s.ephemeralIndirectionTable.graph :: !s.ephemeralIndirectionTable.deallocable(r))
    decreases s
  {
    ref := s.ephemeralIndirectionTable.FindDeallocable();
  }
}
Dafny program verifier did not attempt verification