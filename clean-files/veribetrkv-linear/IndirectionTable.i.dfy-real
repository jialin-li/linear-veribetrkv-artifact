// IndirectionTable.i.dfy
module IndirectionTable {
  datatype Entry = Entry(loc: Option<Location>, succs: seq<BT.G.Reference>, predCount: uint64)
  type HashMap = LinearMutableMap.LinearHashMap<Entry>
  type GarbageQueue = USeq.USeq
  datatype PredecessorEdge = PredecessorEdge(src: BT.G.Reference, ghost idx: int)
  datatype IndirectionTable = IndirectionTable(t: HashMap, garbageQueue: lOption<GarbageQueue>, refUpperBound: uint64, findLoclessIterator: Option<LinearMutableMap.SimpleIterator>, ghost locs: map<BT.G.Reference, Location>, ghost graph: map<BT.G.Reference, seq<BT.G.Reference>>, ghost predCounts: map<BT.G.Reference, int>) {
    static method Alloc(loc: Location) returns (r: IndirectionTable)
    {
      var hashMap: LinearHashMap<Entry> := LinearMutableMap.Constructor<Entry>(128);
      var _inout_tmp_0: LinearHashMap<Entry>;
      _inout_tmp_0 := LinearMutableMap.Insert(inout hashMap, BT.G.Root(), Entry(Some(loc), [], 1));
      hashMap := _inout_tmp_0;
      r := IndirectionTable(hashMap, lNone, BT.G.Root(), None, Locs(hashMap), Graph(hashMap), PredCounts(hashMap));
    }
    static method AllocEmpty() returns (r: IndirectionTable)
    {
      var hashMap: LinearHashMap<Entry> := LinearMutableMap.Constructor<Entry>(128);
      var _inout_tmp_0: LinearHashMap<Entry>;
      _inout_tmp_0 := LinearMutableMap.Insert(inout hashMap, BT.G.Root(), Entry(None, [], 1));
      hashMap := _inout_tmp_0;
      r := IndirectionTable(hashMap, lNone, 0, None, Locs(hashMap), Graph(hashMap), PredCounts(hashMap));
    }
    method Free()
    {
      var IndirectionTable(t: HashMap, garbageQueue: lOption<GarbageQueue>, refUpperBound: uint64, findLoclessIterator: Option<LinearMutableMap.SimpleIterator>, _: map<BT.G.Reference, Location>, _: map<BT.G.Reference, seq<BT.G.Reference>>, _: map<BT.G.Reference, int>) := this;
      LinearMutableMap.Destructor(t);
      match garbageQueue {
        case lNone() =>
          {
          }
        case lSome(gq) =>
          {
            gq.Free();
          }
      }
    }
    method Clone() returns (cloned: IndirectionTable)
    {
      var IndirectionTable(t: HashMap, garbageQueue: lOption<GarbageQueue>, refUpperBound: uint64, findLoclessIterator: Option<LinearMutableMap.SimpleIterator>, locs: map<BT.G.Reference, Location>, graph: map<BT.G.Reference, seq<BT.G.Reference>>, predCounts: map<BT.G.Reference, int>) := this;
      var t': LinearHashMap<Entry> := LinearMutableMap.Clone(t);
      cloned := IndirectionTable(t', lNone, refUpperBound, None, locs, graph, predCounts);
    }
    method GetEntry(ref: BT.G.Reference) returns (e: Option<Entry>)
    {
      e := LinearMutableMap.Get(this.t, ref);
    }
    method HasEmptyLoc(ref: BT.G.Reference) returns (b: bool)
    {
      var entry: Option<Entry> := LinearMutableMap.Get(this.t, ref);
      b := entry.Some? && entry.value.loc.None?;
    }
    method UpdateGhost(inout old_self: IndirectionTable) returns (self: IndirectionTable)
    {
      self := old_self;
    }
    method RemoveLoc(inout old_self: IndirectionTable, ref: BT.G.Reference)
        returns (oldLoc: Option<Location>, self: IndirectionTable)
    {
      self := old_self;
      var it: SimpleIterator := LinearMutableMap.FindSimpleIter(self.t, ref);
      var oldEntry: IteratorOutput<Entry> := LinearMutableMap.SimpleIterOutput(self.t, it);
      var predCount: uint64 := oldEntry.value.predCount;
      var succs: seq<BT.G.Reference> := oldEntry.value.succs;
      var _inout_tmp_0: LinearHashMap<Entry>;
      _inout_tmp_0 := LinearMutableMap.UpdateByIter(inout self.t, it, Entry(None, succs, predCount));
      self := self.(t := _inout_tmp_0);
      var _inout_tmp_1: Option<LinearMutableMap.SimpleIterator> := None;
      self := self.(findLoclessIterator := _inout_tmp_1);
      var _inout_tmp_2: IndirectionTable;
      _inout_tmp_2 := self.UpdateGhost(inout self);
      self := _inout_tmp_2;
      oldLoc := oldEntry.value.loc;
    }
    method AddLocIfPresent(inout old_self: IndirectionTable, ref: BT.G.Reference, loc: Location)
        returns (added: bool, self: IndirectionTable)
    {
      self := old_self;
      var it: SimpleIterator := LinearMutableMap.FindSimpleIter(self.t, ref);
      var oldEntry: IteratorOutput<Entry> := LinearMutableMap.SimpleIterOutput(self.t, it);
      added := oldEntry.Next? && oldEntry.value.loc.None?;
      if added {
        var _inout_tmp_0: LinearHashMap<Entry>;
        _inout_tmp_0 := LinearMutableMap.UpdateByIter(inout self.t, it, Entry(Some(loc), oldEntry.value.succs, oldEntry.value.predCount));
        self := self.(t := _inout_tmp_0);
        var _inout_tmp_1: IndirectionTable;
        _inout_tmp_1 := self.UpdateGhost(inout self);
        self := _inout_tmp_1;
      }
    }
    method RemoveRef(inout old_self: IndirectionTable, ref: BT.G.Reference)
        returns (oldLoc: Option<Location>, self: IndirectionTable)
    {
      self := old_self;
      var oldEntry: Option<Entry>, _inout_tmp_0: LinearHashMap<Entry> := LinearMutableMap.RemoveAndGet(inout self.t, ref);
      self := self.(t := _inout_tmp_0);
      var _inout_tmp_1: USeq;
      _inout_tmp_1 := self.garbageQueue.value.Remove(inout self.garbageQueue.value, ref);
      self := self.(garbageQueue := self.garbageQueue.(value := _inout_tmp_1));
      var _inout_tmp_2: IndirectionTable;
      _inout_tmp_2 := self.UpdatePredCounts(inout self, ref, [], oldEntry.value.succs);
      self := _inout_tmp_2;
      oldLoc := if oldEntry.Some? then oldEntry.value.loc else None;
      var _inout_tmp_3: Option<LinearMutableMap.SimpleIterator> := None;
      self := self.(findLoclessIterator := _inout_tmp_3);
      var _inout_tmp_4: IndirectionTable;
      _inout_tmp_4 := self.UpdateGhost(inout self);
      self := _inout_tmp_4;
    }
    method PredInc(inout old_self: IndirectionTable, ref: BT.G.Reference) returns (self: IndirectionTable)
    {
      self := old_self;
      var oldEntryOpt: Option<Entry> := LinearMutableMap.Get(self.t, ref);
      var oldEntry: Entry := oldEntryOpt.value;
      var newEntry: Entry := oldEntry.(predCount := oldEntry.predCount + 1);
      var _inout_tmp_1: LinearHashMap<Entry>;
      _inout_tmp_1 := LinearMutableMap.Insert(inout self.t, ref, newEntry);
      self := self.(t := _inout_tmp_1);
      if oldEntry.predCount == 0 {
        var _inout_tmp_0: USeq;
        _inout_tmp_0 := self.garbageQueue.value.Remove(inout self.garbageQueue.value, ref);
        self := self.(garbageQueue := self.garbageQueue.(value := _inout_tmp_0));
      }
    }
    method PredDec(inout old_self: IndirectionTable, ref: BT.G.Reference) returns (self: IndirectionTable)
    {
      self := old_self;
      var oldEntryOpt: Option<Entry> := LinearMutableMap.Get(self.t, ref);
      var oldEntry: Entry := oldEntryOpt.value;
      var newEntry: Entry := oldEntry.(predCount := oldEntry.predCount - 1);
      var _inout_tmp_1: LinearHashMap<Entry>;
      _inout_tmp_1 := LinearMutableMap.Insert(inout self.t, ref, newEntry);
      self := self.(t := _inout_tmp_1);
      if oldEntry.predCount == 1 {
        var _inout_tmp_0: USeq;
        _inout_tmp_0 := self.garbageQueue.value.Add(inout self.garbageQueue.value, ref);
        self := self.(garbageQueue := self.garbageQueue.(value := _inout_tmp_0));
      }
    }
    method UpdatePredCounts(inout old_self: IndirectionTable, ghost changingRef: BT.G.Reference, newSuccs: seq<BT.G.Reference>, oldSuccs: seq<BT.G.Reference>)
        returns (self: IndirectionTable)
    {
      self := old_self;
      var idx: uint64 := 0;
      while idx < |newSuccs| as uint64
      {
        var ref: NativeTypes.uint64 := newSuccs[idx];
        var _inout_tmp_0: IndirectionTable;
        _inout_tmp_0 := self.PredInc(inout self, ref);
        self := _inout_tmp_0;
        idx := idx + 1;
      }
      var idx2: uint64 := 0;
      while idx2 < |oldSuccs| as uint64
      {
        var _inout_tmp_1: IndirectionTable;
        _inout_tmp_1 := self.PredDec(inout self, oldSuccs[idx2]);
        self := _inout_tmp_1;
        idx2 := idx2 + 1;
      }
    }
    method {:timeLimitMultiplier 2}  UpdateAndRemoveLoc(inout old_self: IndirectionTable, ref: BT.G.Reference, succs: seq<BT.G.Reference>)
        returns (oldLoc: Option<Location>, self: IndirectionTable)
    {
      self := old_self;
      var oldEntry: Option<Entry> := LinearMutableMap.Get(self.t, ref);
      var predCount: uint64 := if oldEntry.Some? then oldEntry.value.predCount else 0;
      if oldEntry.None? {
        var _inout_tmp_0: USeq;
        _inout_tmp_0 := self.garbageQueue.value.Add(inout self.garbageQueue.value, ref);
        self := self.(garbageQueue := self.garbageQueue.(value := _inout_tmp_0));
      }
      var _inout_tmp_2: LinearHashMap<Entry>;
      _inout_tmp_2 := LinearMutableMap.Insert(inout self.t, ref, Entry(None, succs, predCount));
      self := self.(t := _inout_tmp_2);
      var _inout_tmp_3: IndirectionTable;
      _inout_tmp_3 := self.UpdatePredCounts(inout self, ref, succs, if oldEntry.Some? then oldEntry.value.succs else []);
      self := _inout_tmp_3;
      if ref > self.refUpperBound {
        var _inout_tmp_1: BT.G.Reference := ref;
        self := self.(refUpperBound := _inout_tmp_1);
      }
      oldLoc := if oldEntry.Some? && oldEntry.value.loc.Some? then oldEntry.value.loc else None;
      var _inout_tmp_4: Option<LinearMutableMap.SimpleIterator> := None;
      self := self.(findLoclessIterator := _inout_tmp_4);
      var _inout_tmp_5: IndirectionTable;
      _inout_tmp_5 := self.UpdateGhost(inout self);
      self := _inout_tmp_5;
    }
    static method {:fuel ValInGrammar, 3} ValToHashMap(a: seq<V>) returns (s: lOption<HashMap>)
    {
      var i: uint64 := 0;
      var success: bool := true;
      var mutMap: LinearHashMap<Entry> := LinearMutableMap.Constructor<Entry>(1024);
      while i < |a| as uint64
      {
        var tuple: V := a[i];
        var ref: uint64 := tuple.t[0 as uint64].u;
        var addr: uint64 := tuple.t[1 as uint64].u;
        var len: uint64 := tuple.t[2 as uint64].u;
        var succs: seq<uint64> := tuple.t[3 as uint64].ua;
        var graphRef: Option<Entry> := LinearMutableMap.Get(mutMap, ref);
        var loc: Location := Location(addr, len);
        if graphRef.Some? || !ValidNodeLocation(loc) || |succs| as uint64 > MaxNumChildrenUint64() {
          success := false;
          break;
        } else {
          var _inout_tmp_0: LinearHashMap<Entry>;
          _inout_tmp_0 := LinearMutableMap.Insert(inout mutMap, ref, Entry(Some(loc), succs, 0));
          mutMap := _inout_tmp_0;
          i := i + 1;
        }
      }
      if success {
        s := lSome(mutMap);
      } else {
        LinearMutableMap.Destructor(mutMap);
        s := lNone;
      }
    }
    static method {:timeLimitMultiplier 2}  ComputeRefCountsInnerLoop(inout old_tbl': HashMap, tbl: HashMap, it: LinearMutableMap.Iterator<Entry>)
        returns (success: bool, it': LinearMutableMap.Iterator<Entry>, tbl': HashMap)
    {
      tbl' := old_tbl';
      var succs: seq<BT.G.Reference> := it.next.value.succs;
      var i: uint64 := 0;
      success := true;
      while i < |succs| as uint64
      {
        var ref: NativeTypes.uint64 := succs[i];
        var oldEntry: Option<Entry> := LinearMutableMap.Get(tbl', ref);
        if oldEntry.Some? {
          var newEntry: Entry := oldEntry.value.(predCount := oldEntry.value.predCount + 1);
          var _inout_tmp_0: LinearHashMap<Entry>;
          _inout_tmp_0 := LinearMutableMap.Insert(inout tbl', ref, newEntry);
          tbl' := _inout_tmp_0;
          i := i + 1;
        } else {
          success := false;
          break;
        }
      }
      it' := LinearMutableMap.IterInc(tbl, it);
    }
    static method ComputeRefCounts(tbl: HashMap) returns (tbl': lOption<HashMap>)
    {
      var t1: LinearHashMap<Entry> := LinearMutableMap.Clone(tbl);
      var oldEntryOpt: Option<Entry> := LinearMutableMap.Get(t1, BT.G.Root());
      var oldEntry: Entry := oldEntryOpt.value;
      var _inout_tmp_1: LinearHashMap<Entry>;
      _inout_tmp_1 := LinearMutableMap.Insert(inout t1, BT.G.Root(), oldEntry.(predCount := 1));
      t1 := _inout_tmp_1;
      var it: Iterator<Entry> := LinearMutableMap.IterStart(tbl);
      var success: bool := true;
      while it.next.Next?
      {
        var _inout_tmp_0: HashMap;
        success, it, _inout_tmp_0 := ComputeRefCountsInnerLoop(inout t1, tbl, it);
        t1 := _inout_tmp_0;
        if !success {
          break;
        }
      }
      if success {
        tbl' := lSome(t1);
      } else {
        LinearMutableMap.Destructor(t1);
        tbl' := lNone;
      }
    }
    static method MakeGarbageQueue(t: HashMap) returns (q: USeq.USeq)
    {
      q := USeq.USeq.Alloc();
      var it: Iterator<Entry> := LinearMutableMap.IterStart(t);
      while it.next.Next?
      {
        if it.next.value.predCount == 0 {
          var _inout_tmp_0: USeq;
          _inout_tmp_0 := q.Add(inout q, it.next.key);
          q := _inout_tmp_0;
        }
        it := LinearMutableMap.IterInc(t, it);
      }
    }
    static method ComputeRefUpperBound(t: HashMap) returns (r: uint64)
    {
      var it: Iterator<Entry> := LinearMutableMap.IterStart(t);
      var refUpperBound: uint64 := 0;
      while it.next.Next?
      {
        if it.next.key > refUpperBound {
          refUpperBound := it.next.key;
        }
        it := LinearMutableMap.IterInc(t, it);
      }
      r := refUpperBound;
    }
    static method ValToIndirectionTable(v: V) returns (s: lOption<IndirectionTable>)
    {
      if |v.a| as uint64 <= MaxSizeUint64() {
        var res: lOption<HashMap> := ValToHashMap(v.a);
        match res {
          case lSome(t) =>
            {
              var rootRef := LinearMutableMap.Get(t, BT.G.Root());
              if rootRef.Some? {
                var t1opt := ComputeRefCounts(t);
                LinearMutableMap.Destructor(t);
                match t1opt {
                  case lSome(t1) =>
                    {
                      var q := MakeGarbageQueue(t1);
                      var refUpperBound := ComputeRefUpperBound(t1);
                      s := lSome(IndirectionTable(t1, lSome(q), refUpperBound, None, Locs(t1), Graph(t1), PredCounts(t1)));
                    }
                  case lNone =>
                    {
                      s := lNone;
                    }
                }
              } else {
                LinearMutableMap.Destructor(t);
                s := lNone;
              }
            }
          case lNone() =>
            {
              s := lNone;
            }
        }
      } else {
        s := lNone;
      }
    }
    static function method IndirectionTableGrammar(): G
    {
      GArray(GTuple([GUint64, GUint64, GUint64, GUint64Array]))
    }
    method {:timeLimitMultiplier 3}  IndirectionTableToVal() returns (v: V, size: uint64)
    {
      var count: uint64 := this.t.count as uint64;
      var a: array<V> := new V[count];
      var it: Iterator<Entry> := LinearMutableMap.IterStart(this.t);
      var i: uint64 := 0;
      size := 0;
      while it.next.Next?
      {
        var (ref: uint64, locOptGraph: Entry) := (it.next.key, it.next.value);
        var locOpt: Option<Location> := locOptGraph.loc;
        var succs: seq<BT.G.Reference> := locOptGraph.succs;
        var loc: Location := locOpt.value;
        var childrenVal: V := VUint64Array(succs);
        var vi: V := VTuple([VUint64(ref), VUint64(loc.addr), VUint64(loc.len), childrenVal]);
        a[i] := vi;
        i := i + 1;
        it := LinearMutableMap.IterInc(this.t, it);
        size := size + 32 + 8 * |succs| as uint64;
      }
      v := VArray(a[..]);
      size := size + 8;
    }
    static method BitmapInitUpTo(inout old_bm: BitmapImpl.Bitmap, upTo: uint64) returns (bm: BitmapImpl.Bitmap)
    {
      bm := old_bm;
      var i: uint64 := 0;
      while i < upTo
      {
        var _inout_tmp_0: Bitmap;
        _inout_tmp_0 := bm.Set(inout bm, i);
        bm := _inout_tmp_0;
        i := i + 1;
      }
    }
    method InitLocBitmap() returns (success: bool, bm: BitmapImpl.Bitmap)
    {
      bm := BitmapImpl.Bitmap.Constructor(NumBlocksUint64());
      var _inout_tmp_1: BitmapImpl.Bitmap;
      _inout_tmp_1 := BitmapInitUpTo(inout bm, MinNodeBlockIndexUint64());
      bm := _inout_tmp_1;
      var it: Iterator<Entry> := LinearMutableMap.IterStart(this.t);
      success := true;
      while it.next.Next?
      {
        var loc: uint64 := it.next.value.loc.value.addr;
        var locIndex: uint64 := loc / NodeBlockSizeUint64();
        if locIndex < NumBlocksUint64() {
          var isSet: bool := bm.GetIsSet(locIndex);
          if !isSet {
            it := LinearMutableMap.IterInc(this.t, it);
            var _inout_tmp_0: Bitmap;
            _inout_tmp_0 := bm.Set(inout bm, locIndex);
            bm := _inout_tmp_0;
          } else {
            success := false;
            break;
          }
        } else {
          success := false;
          break;
        }
      }
    }
    method FindDeallocable() returns (ref: Option<BT.G.Reference>)
    {
      ref := this.garbageQueue.value.FirstOpt();
    }
    function method GetSize(): (size: uint64)
    {
      this.t.count
    }
    method FindRefWithNoLoc(inout old_self: IndirectionTable) returns (ref: Option<BT.G.Reference>, self: IndirectionTable)
    {
      self := old_self;
      var findLoclessIterator: Option<LinearMutableMap.SimpleIterator> := self.findLoclessIterator;
      var it: LinearMutableMap.SimpleIterator;
      if findLoclessIterator.Some? {
        it := findLoclessIterator.value;
      } else {
        it := LinearMutableMap.SimpleIterStart(self.t);
      }
      while true
      {
        var next: IteratorOutput<Entry> := LinearMutableMap.SimpleIterOutput(self.t, it);
        if next.Next? {
          if next.value.loc.None? {
            var _inout_tmp_0: Option<LinearMutableMap.SimpleIterator> := Some(it);
            self := self.(findLoclessIterator := _inout_tmp_0);
            ref := Some(next.key);
            break;
          } else {
            it := LinearMutableMap.SimpleIterInc(self.t, it);
          }
        } else {
          var _inout_tmp_1: Option<LinearMutableMap.SimpleIterator> := Some(it);
          self := self.(findLoclessIterator := _inout_tmp_1);
          ref := None;
          break;
        }
      }
    }
    method GetRefUpperBound() returns (r: uint64)
    {
      r := this.refUpperBound;
    }
  }
  function method MaxSizeUint64(): uint64
  {
    IndirectionTableMaxSizeUint64()
  }
}
Dafny program verifier did not attempt verification