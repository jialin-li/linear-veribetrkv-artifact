// CoordinationImpl.i.dfy
module CoordinationImpl {
  method pushSync(inout old_s: Full) returns (id: uint64, s: Full)
  {
    s := old_s;
    var _inout_tmp_0: Committer;
    id, _inout_tmp_0 := s.jc.pushSync(inout s.jc);
    s := s.(jc := _inout_tmp_0);
  }
  method receiveLoc(inout old_s: Variables, loc: DiskLayout.Location) returns (s: Variables)
  {
    s := old_s;
    var Unready() := s;
    s := Variables.Loading(loc, None);
  }
  method initialization(inout old_s: Full, io: DiskIOHandler) returns (s: Full)
    modifies io
  {
    s := old_s;
    if s.jc.status.StatusLoadingSuperblock? {
      if s.jc.superblock1.SuperblockSuccess? && s.jc.superblock2.SuperblockSuccess? {
        var _inout_tmp_0: Committer;
        _inout_tmp_0 := s.jc.finishLoadingSuperblockPhase(inout s.jc);
        s := s.(jc := _inout_tmp_0);
        var loc: Location := s.jc.superblock.indirectionTableLoc;
        var _inout_tmp_1: Variables;
        _inout_tmp_1 := receiveLoc(inout s.bc, loc);
        s := s.(bc := _inout_tmp_1);
      } else if s.jc.superblock1Read.None? && s.jc.superblock1.SuperblockUnfinished? {
        var _inout_tmp_2: Committer;
        _inout_tmp_2 := s.jc.pageInSuperblockReq(inout s.jc, io, 0);
        s := s.(jc := _inout_tmp_2);
      } else if s.jc.superblock2Read.None? && s.jc.superblock2.SuperblockUnfinished? {
        var _inout_tmp_3: Committer;
        _inout_tmp_3 := s.jc.pageInSuperblockReq(inout s.jc, io, 1);
        s := s.(jc := _inout_tmp_3);
      } else {
        print "initialization: doing nothing, superblock reads out\n";
      }
    } else if s.jc.status.StatusLoadingOther? {
      var _inout_tmp_4: Committer;
      _inout_tmp_4 := s.jc.tryFinishLoadingOtherPhase(inout s.jc, io);
      s := s.(jc := _inout_tmp_4);
    } else if s.bc.Loading? && s.bc.indirectionTableRead.None? {
      var _inout_tmp_5: ImplVariables;
      _inout_tmp_5 := IOImpl.PageInIndirectionTableReq(inout s.bc, io);
      s := s.(bc := _inout_tmp_5);
    } else if s.bc.Ready? {
      var isEmpty: bool := s.jc.isReplayEmpty();
      if !isEmpty {
        var je: JournalEntry := s.jc.journalist.replayJournalTop();
        var success: bool, _inout_tmp_7: ImplVariables := InsertImpl.insert(inout s.bc, io, je.key, je.value, true);
        s := s.(bc := _inout_tmp_7);
        if success {
          var _inout_tmp_6: Committer;
          _inout_tmp_6 := s.jc.journalReplayOne(inout s.jc, je);
          s := s.(jc := _inout_tmp_6);
        }
      } else {
        print "initialization: doing nothing, no replay journal\n";
      }
    } else {
      print "initialization: doing nothing\n";
    }
  }
  method doSync(inout old_s: Full, io: DiskIOHandler, graphSync: bool)
      returns (wait: bool, s: Full)
    modifies io
  {
    s := old_s;
    wait := false;
    if s.jc.isFrozen {
      if s.jc.frozenLoc.Some? {
        var _inout_tmp_0: Committer;
        wait, _inout_tmp_0 := s.jc.tryAdvanceLocation(inout s.jc, io);
        s := s.(jc := _inout_tmp_0);
      } else {
        var froze: bool, wait0: bool, _inout_tmp_1: ImplVariables := SyncImpl.sync(inout s.bc, io);
        s := s.(bc := _inout_tmp_1);
        wait := wait0;
      }
    } else if s.jc.superblockWrite.Some? {
      wait := true;
    } else {
      if graphSync {
        var froze: bool, wait0: bool, _inout_tmp_3: ImplVariables := SyncImpl.sync(inout s.bc, io);
        s := s.(bc := _inout_tmp_3);
        wait := wait0;
        if froze {
          var _inout_tmp_2: Committer;
          _inout_tmp_2 := s.jc.freeze(inout s.jc);
          s := s.(jc := _inout_tmp_2);
        } else 
      } else {
        var _inout_tmp_4: Committer;
        wait, _inout_tmp_4 := s.jc.tryAdvanceLog(inout s.jc, io);
        s := s.(jc := _inout_tmp_4);
      }
    }
  }
  method getCommitterSyncState(s: Full, id: uint64) returns (res: Option<JC.SyncReqStatus>)
  {
    res := LinearMutableMap.Get(s.jc.syncReqs, id);
  }
  function method isCommitterStatusReady(s: Full): bool
  {
    s.jc.status.StatusReady?
  }
  function method isInitialized(s: Full): (b: bool)
  {
    if s.bc.Ready? && isCommitterStatusReady(s) then
      s.jc.isReplayEmpty()
    else
      false
  }
  method popSync(inout old_s: Full, io: DiskIOHandler, id: uint64, graphSync: bool)
      returns (success: bool, wait: bool, s: Full)
    modifies io
  {
    s := old_s;
    wait := false;
    var committerSyncState: Option<JC.SyncReqStatus> := getCommitterSyncState(s, id);
    if committerSyncState == Some(JC.State1) {
      var _inout_tmp_0: Committer;
      _inout_tmp_0 := s.jc.popSync(inout s.jc, id);
      s := s.(jc := _inout_tmp_0);
      success := true;
    } else {
      var isInit: bool := isInitialized(s);
      if !isInit {
        var _inout_tmp_1: Full;
        _inout_tmp_1 := initialization(inout s, io);
        s := _inout_tmp_1;
        success := false;
      } else {
        var _inout_tmp_2: Full;
        wait, _inout_tmp_2 := doSync(inout s, io, graphSync);
        s := _inout_tmp_2;
        success := false;
      }
    }
  }
  method query(inout old_s: Full, io: DiskIOHandler, key: Key)
      returns (result: Option<Value>, s: Full)
    modifies io
  {
    s := old_s;
    var is_init: bool := isInitialized(s);
    if !is_init {
      var _inout_tmp_0: Full;
      _inout_tmp_0 := initialization(inout s, io);
      s := _inout_tmp_0;
      result := None;
    } else {
      var _inout_tmp_1: ImplVariables;
      result, _inout_tmp_1 := QueryImpl.query(inout s.bc, io, key);
      s := s.(bc := _inout_tmp_1);
    }
  }
  method succ(inout old_s: Full, io: DiskIOHandler, start: UI.RangeStart, maxToFind: uint64)
      returns (result: Option<UI.SuccResultList>, s: Full)
    modifies io
  {
    s := old_s;
    var is_init: bool := isInitialized(s);
    if !is_init {
      var _inout_tmp_0: Full;
      _inout_tmp_0 := initialization(inout s, io);
      s := _inout_tmp_0;
      result := None;
    } else {
      var _inout_tmp_1: ImplVariables;
      result, _inout_tmp_1 := SuccImpl.doSucc(inout s.bc, io, start, maxToFind);
      s := s.(bc := _inout_tmp_1);
    }
  }
  function method canJournalistAppend(s: Full, key: Key, value: Value): (b: bool)
  {
    s.jc.journalist.canAppend(Journal.JournalInsert(key, value))
  }
  method insert(inout old_s: Full, io: DiskIOHandler, key: Key, value: Value)
      returns (success: bool, s: Full)
    modifies io
  {
    s := old_s;
    var is_init: bool := isInitialized(s);
    if !is_init {
      var _inout_tmp_0: Full;
      _inout_tmp_0 := initialization(inout s, io);
      s := _inout_tmp_0;
      success := false;
    } else {
      var can_append: bool := canJournalistAppend(s, key, value);
      if can_append {
        var _inout_tmp_2: ImplVariables;
        success, _inout_tmp_2 := InsertImpl.insert(inout s.bc, io, key, value, false);
        s := s.(bc := _inout_tmp_2);
        if success {
          var _inout_tmp_1: Committer;
          _inout_tmp_1 := s.jc.journalAppend(inout s.jc, key, value);
          s := s.(jc := _inout_tmp_1);
        } else 
      } else {
        var wait: bool, _inout_tmp_3: Full := doSync(inout s, io, true);
        s := _inout_tmp_3;
        success := false;
      }
    }
  }
}
Dafny program verifier did not attempt verification