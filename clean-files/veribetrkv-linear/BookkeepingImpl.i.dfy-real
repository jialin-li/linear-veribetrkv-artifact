// BookkeepingImpl.i.dfy
module BookkeepingImpl {
  method getFreeRef(s: ImplVariables) returns (ref: Option<BT.G.Reference>)
  {
    var upperBound: uint64 := s.ephemeralIndirectionTable.refUpperBound;
    var i: uint64 := upperBound;
    if i == 18446744073709551615 {
      return None;
    }
    i := i + 1;
    while true
    {
      var cacheLookup: bool := s.cache.InCache(i);
      if !cacheLookup {
        return Some(i);
      }
      if i == 18446744073709551615 {
        return None;
      } else {
        i := i + 1;
      }
    }
  }
  method getFreeRef2(s: ImplVariables, avoid: BT.G.Reference) returns (ref: Option<BT.G.Reference>)
  {
    var upperBound: uint64 := s.ephemeralIndirectionTable.refUpperBound;
    var i: uint64 := upperBound;
    if i == 18446744073709551615 {
      return None;
    }
    i := i + 1;
    while true
    {
      if i != avoid {
        var cacheLookup: bool := s.cache.InCache(i);
        if !cacheLookup {
          return Some(i);
        }
      }
      if i == 18446744073709551615 {
        return None;
      } else {
        i := i + 1;
      }
    }
  }
  method writeBookkeeping(inout old_s: ImplVariables, ref: BT.G.Reference, children: Option<seq<BT.G.Reference>>)
      returns (s: ImplVariables)
  {
    s := old_s;
    var oldLoc: Option<Location>, _inout_tmp_1: IndirectionTable := s.ephemeralIndirectionTable.UpdateAndRemoveLoc(inout s.ephemeralIndirectionTable, ref, if children.Some? then children.value else []);
    s := s.(ephemeralIndirectionTable := _inout_tmp_1);
    var _inout_tmp_2: LinearLru;
    _inout_tmp_2 := s.lru.Use(inout s.lru, ref);
    s := s.(lru := _inout_tmp_2);
    if oldLoc.Some? {
      var _inout_tmp_0: BlockAllocator;
      _inout_tmp_0 := s.blockAllocator.MarkFreeEphemeral(inout s.blockAllocator, oldLoc.value.addr / NodeBlockSizeUint64());
      s := s.(blockAllocator := _inout_tmp_0);
    }
  }
  method allocBookkeeping(inout old_s: ImplVariables, children: Option<seq<BT.G.Reference>>)
      returns (ref: Option<BT.G.Reference>, s: ImplVariables)
  {
    s := old_s;
    ref := getFreeRef(s);
    if ref.Some? {
      var _inout_tmp_0: ImplVariables;
      _inout_tmp_0 := writeBookkeeping(inout s, ref.value, children);
      s := _inout_tmp_0;
    }
  }
  method writeBookkeepingNoSuccsUpdate(inout old_s: ImplVariables, ref: BT.G.Reference) returns (s: ImplVariables)
  {
    s := old_s;
    var oldLoc: Option<Location>, _inout_tmp_1: IndirectionTable := s.ephemeralIndirectionTable.RemoveLoc(inout s.ephemeralIndirectionTable, ref);
    s := s.(ephemeralIndirectionTable := _inout_tmp_1);
    var _inout_tmp_2: LinearLru;
    _inout_tmp_2 := s.lru.Use(inout s.lru, ref);
    s := s.(lru := _inout_tmp_2);
    if oldLoc.Some? {
      var _inout_tmp_0: BlockAllocator;
      _inout_tmp_0 := s.blockAllocator.MarkFreeEphemeral(inout s.blockAllocator, oldLoc.value.addr / NodeBlockSizeUint64());
      s := s.(blockAllocator := _inout_tmp_0);
    }
  }
}
Dafny program verifier did not attempt verification