// MutableBtree.i.dfy
abstract module LMutableBtree {
    reveals Node, Key, Value
    reveals *
    reveals Key, Value, Node, MaxKeysPerLeaf, MaxChildren, DefaultValue, DefaultKey, WF, Interpretation
    reveals Full
    reveals IndexHeights, Height
    reveals FreeChildren, FreeNode
  type Key = Model.Keys.Element
  type Value = Model.Value
  type Node = Model.Node
  function method MaxKeysPerLeaf(): uint64
  function method MaxChildren(): uint64
  function method DefaultValue(): Value
  function method DefaultKey(): Key
  method Route(keys: seq<Key>, needle: Key) returns (posplus1: uint64)
  {
    var pos: int64 := Model.KeysImpl.ComputeLargestLteShared(keys, needle);
    posplus1 := (pos + 1) as uint64;
  }
  method QueryLeaf(node: Node, needle: Key) returns (result: Option<Value>)
  {
    var posplus1: uint64 := Route(node.keys, needle);
    if 1 <= posplus1 && seq_get(node.keys, posplus1 - 1) == needle {
      result := Some(seq_get(node.values, posplus1 - 1));
    } else {
      result := None;
    }
  }
  method QueryIndex(node: Node, needle: Key) returns (result: Option<Value>)
  {
    var posplus1: uint64 := Route(node.pivots, needle);
    result := Query(lseq_peek(node.children, posplus1), needle);
  }
  method Query(node: Node, needle: Key) returns (result: Option<Value>)
  {
    match node {
      case Leaf(_v0, _v1) =>
        result := QueryLeaf(node, needle);
      case Index(_v2, _v3) =>
        result := QueryIndex(node, needle);
    }
  }
  method Empty(node: Node) returns (result: bool)
  {
    if node.Leaf? {
      result := 0 == seq_length(node.keys);
    } else {
      result := false;
    }
  }
  method MinKeyInternal(node: Node) returns (result: Key)
  {
    if node.Leaf? {
      result := seq_get(node.keys, 0);
    } else {
      result := MinKeyInternal(lseq_peek(node.children, 0));
    }
  }
  method MinKey(node: Node) returns (result: Key)
  {
    result := MinKeyInternal(node);
  }
  method MaxKeyInternal(node: Node) returns (result: Key)
  {
    if node.Leaf? {
      var nkeys: uint64 := seq_length(node.keys) as uint64;
      result := seq_get(node.keys, nkeys - 1);
    } else {
      var nchildren: uint64 := lseq_length_uint64(node.children);
      result := MaxKeyInternal(lseq_peek(node.children, nchildren - 1));
    }
  }
  method MaxKey(node: Node) returns (result: Key)
  {
    result := MaxKeyInternal(node);
  }
  method EmptyTree() returns (root: Node)
  {
    var rootkeys: seq<seq<NativeTypes.byte>> := seq_empty();
    var rootvalues: seq<Value> := seq_empty();
    root := Model.Leaf(rootkeys, rootvalues);
  }
  predicate method Full(node: Node)
  {
    match node {
      case Leaf(keys, _v4) =>
        seq_length(keys) == MaxKeysPerLeaf()
      case Index(_v5, children) =>
        lseq_length_as_uint64(children) == MaxChildren()
    }
  }
  method SplitLeaf(node: Node, nleft: uint64, ghost pivot: Key)
      returns (left: Node, right: Node)
  {
    var nright: uint64 := seq_length(node.keys) as uint64 - nleft;
    var Leaf(keys: seq<Key>, values: seq<Value>) := node;
    var leftKeys: seq<Key> := AllocAndCopy(keys, 0, nleft);
    var rightKeys: seq<Key> := AllocAndCopy(keys, nleft, nleft + nright);
    var leftValues: seq<Value> := AllocAndCopy(values, 0, nleft);
    var rightValues: seq<Value> := AllocAndCopy(values, nleft, nleft + nright);
    left := Model.Leaf(leftKeys, leftValues);
    right := Model.Leaf(rightKeys, rightValues);
    var _: () := seq_free(keys);
    var _: () := seq_free(values);
  }
  method SplitIndex(node: Node, nleft: uint64)
      returns (left: Node, right: Node, pivot: Key)
  {
    var len: uint64 := lseq_length_uint64(node.children);
    var nright: uint64 := len - nleft;
    var Index(pivots: seq<Key>, children: lseq<Node>) := node;
    pivot := seq_get(pivots, nleft - 1);
    var leftPivots: seq<Key> := AllocAndCopy(pivots, 0, nleft - 1);
    var rightPivots: seq<Key> := AllocAndCopy(pivots, nleft, nleft + nright - 1);
    var leftChildren: lseq<Node>, rightChildren: lseq<Node>;
    children, leftChildren := AllocAndMoveLseq(children, 0, nleft);
    children, rightChildren := AllocAndMoveLseq(children, nleft, nleft + nright);
    left := Model.Index(leftPivots, leftChildren);
    right := Model.Index(rightPivots, rightChildren);
    var _: () := seq_free(pivots);
    lseq_free(children);
  }
  method SplitNode(node: Node)
      returns (left: Node, right: Node, pivot: Key)
  {
    if node.Leaf? {
      var boundary: uint64 := seq_length(node.keys) / 2;
      pivot := seq_get(node.keys, boundary);
      left, right := SplitLeaf(node, boundary, pivot);
    } else {
      var len: uint64 := lseq_length_uint64(node.children);
      var boundary: uint64 := len / 2;
      left, right, pivot := SplitIndex(node, boundary);
    }
  }
  method SplitChildOfIndex(node: Node, childidx: uint64) returns (splitNode: Node)
  {
    var Index(pivots: seq<Key>, children: lseq<Node>) := node;
    var origChild: Node;
    children, origChild := lseq_take(children, childidx);
    var left: Node, right: Node;
    var pivot: Key;
    left, right, pivot := SplitNode(origChild);
    pivots := InsertSeq(pivots, pivot, childidx);
    children := lseq_give(children, childidx, left);
    children := InsertLSeq(children, right, childidx + 1);
    splitNode := Model.Index(pivots, children);
  }
  method InsertLeaf(node: Node, key: Key, value: Value)
      returns (n2: Node, oldvalue: Option<Value>)
  {
    var Leaf(keys: seq<Key>, values: seq<Value>) := node;
    var pos: int64 := Model.KeysImpl.ComputeLargestLteShared(keys, key);
    if 0 <= pos && seq_get(keys, pos as uint64) == key {
      oldvalue := Some(seq_get(values, pos as uint64));
      values := seq_set(values, pos as uint64, value);
    } else {
      oldvalue := None;
      keys := InsertSeq(keys, key, (pos + 1) as uint64);
      values := InsertSeq(values, value, (pos + 1) as uint64);
    }
    n2 := Model.Leaf(keys, values);
  }
  method InsertIndex(node: Node, key: Key, value: Value)
      returns (n2: Node, oldvalue: Option<Value>)
  {
    n2 := node;
    var childidx: uint64 := Route(n2.pivots, key);
    if Full(lseq_peek(n2.children, childidx)) {
      n2 := SplitChildOfIndex(n2, childidx);
      var t: int32 := Model.KeysImpl.cmp(seq_get(n2.pivots, childidx), key);
      if t <= 0 {
        childidx := childidx + 1;
      }
    }
    var Index(pivots: seq<Key>, children: lseq<Node>) := n2;
    var childNode: Node;
    children, childNode := lseq_take(children, childidx);
    childNode, oldvalue := InsertNode(childNode, key, value);
    children := lseq_give(children, childidx, childNode);
    n2 := Model.Index(pivots, children);
  }
  method InsertNode(node: Node, key: Key, value: Value)
      returns (n2: Node, oldvalue: Option<Value>)
  {
    if node.Leaf? {
      n2, oldvalue := InsertLeaf(node, key, value);
    } else {
      n2, oldvalue := InsertIndex(node, key, value);
    }
  }
  method Grow(root: Node) returns (newroot: Node)
  {
    var pivots: seq<Key> := seq_alloc_init(0, DefaultKey());
    var children: lseq<Node> := lseq_alloc(1);
    children := lseq_give(children, 0, root);
    newroot := Model.Index(pivots, children);
  }
  method Insert(root: Node, key: Key, value: Value)
      returns (newroot: Node, oldvalue: Option<Value>)
  {
    if Full(root) {
      newroot := Grow(root);
    } else {
      newroot := root;
    }
    newroot, oldvalue := InsertNode(newroot, key, value);
  }
  function method FreeChildren(ghost a: seq<Node>, arr: lseq<Node>, i: uint64, len: uint64): ()
  {
    if i == len then
      lseq_free_fun(arr)
    else
      var arr'': lseq<Model.Node> := var (arr': lseq<Model.Node>, child: Model.Node) := lseq_take_fun(arr, i); var _: () := FreeNode(child); arr'; FreeChildren(a, arr'', i + 1, len)
  }
  function method FreeNode(node: Node): ()
  {
    match node {
      case Leaf(keys, values) =>
        var _ := seq_free(keys);
        seq_free(values)
      case Index(pivots, children) =>
        var _ := seq_free(pivots);
        var len := lseq_length_as_uint64(children);
        FreeChildren(lseqs(children), children, 0, len)
    }
  }
  method CountElements(node: Node) returns (count: uint64)
  {
    if node.Leaf? {
      count := seq_length(node.keys);
    } else {
      count := 0;
      var i: uint64 := 0;
      var len: uint64 := lseq_length_uint64(node.children);
      while i < len
      {
        var childcount: uint64 := CountElements(lseq_peek(node.children, i));
        count := count + childcount;
        i := i + 1;
      }
    }
  }
}
Dafny program verifier did not attempt verification