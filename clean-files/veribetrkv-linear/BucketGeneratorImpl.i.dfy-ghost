// BucketGeneratorImpl.i.dfy
module BucketGeneratorImpl {
    reveals Generator.Inv1, Generator
    reveals Generator.Inv1, Generator
  datatype   Generator = Basic(biter: BucketIter, ghost height: nat) | Compose(top: Generator, bot: Generator, next: BucketIteratorModel.IteratorOutput, ghost height: nat) {
    predicate {:opaque} {:fuel 0, 0} Inv()
      decreases height, 1
    {
      Inv1()
    }
    predicate Inv1()
      decreases height, 0
    {
      (this.Basic? ==>
        true &&
        biter.WFIter()) &&
      (this.Compose? ==>
        top.height < this.height &&
        bot.height < this.height &&
        top.Inv() &&
        bot.Inv())
    }
    method Free()
      requires Inv()
      decreases this
    {
      reveal_Inv_for(this);
      match this {
        case Basic(biter, height) =>
          biter.Free();
        case Compose(top, bot, next, height) =>
          top.Free();
          bot.Free();
      }
    }
    function I(): BucketGeneratorModel.Generator
      requires Inv()
      ensures BucketGeneratorModel.WF(I())
      decreases height
    {
      reveal_Inv_for(this);
      if this.Basic? then
        BucketGeneratorModel.BasicGenerator(biter.bucket, IIterator(biter.it))
      else
        BucketGeneratorModel.ComposeGenerator(top.I(), bot.I(), next)
    }
    method GenLeft() returns (res: BucketIteratorModel.IteratorOutput)
      requires Inv()
      ensures res == BucketGeneratorModel.GenLeft(I())
      decreases this
    {
      reveal_Inv_for(this);
      if this.Basic? {
        res := biter.GetNext();
      } else {
        res := next;
      }
    }
    method GenPop(inout old_self: Generator) returns (self: Generator)
      requires old_self.Inv()
      requires BucketGeneratorModel.GenLeft(old_self.I()).Next?
      ensures self.Inv()
      ensures self.I() == BucketGeneratorModel.GenPop(old_self.I())
      decreases old_self.height
    {
      self := old_self;
      reveal_Inv_for(self);
      BucketGeneratorModel.reveal_BasicGenPop();
      BucketGeneratorModel.reveal_MergeGenPop();
      BucketGeneratorModel.reveal_GenPop();
      if self.Basic? {
        var _inout_tmp_0: BucketIter;
        _inout_tmp_0 := self.biter.IterInc(inout self.biter);
        self := self.(biter := _inout_tmp_0);
      } else {
        var top_next: BucketIteratorModel.IteratorOutput := self.top.GenLeft();
        var bot_next: BucketIteratorModel.IteratorOutput := self.bot.GenLeft();
        var c: int32;
        if top_next.Next? && bot_next.Next? {
          c := cmp(top_next.key, bot_next.key);
        }
        if top_next.Next? && bot_next.Next? && c == 0 {
          var _inout_tmp_1: Generator;
          _inout_tmp_1 := self.top.GenPop(inout self.top);
          self := self.(top := _inout_tmp_1);
          var _inout_tmp_2: Generator;
          _inout_tmp_2 := self.bot.GenPop(inout self.bot);
          self := self.(bot := _inout_tmp_2);
          var _inout_tmp_3: IteratorOutput := BucketIteratorModel.Next(top_next.key, Merge(top_next.msg, bot_next.msg));
          self := self.(next := _inout_tmp_3);
        } else if top_next.Next? && (bot_next.Next? ==> c < 0) {
          var _inout_tmp_4: Generator;
          _inout_tmp_4 := self.top.GenPop(inout self.top);
          self := self.(top := _inout_tmp_4);
          var _inout_tmp_5: BucketIteratorModel.IteratorOutput := top_next;
          self := self.(next := _inout_tmp_5);
        } else if bot_next.Next? {
          var _inout_tmp_6: Generator;
          _inout_tmp_6 := self.bot.GenPop(inout self.bot);
          self := self.(bot := _inout_tmp_6);
          var _inout_tmp_7: BucketIteratorModel.IteratorOutput := bot_next;
          self := self.(next := _inout_tmp_7);
        } else {
          var _inout_tmp_8: IteratorOutput := BucketIteratorModel.Done;
          self := self.(next := _inout_tmp_8);
        }
        ghost var _inout_tmp_9: int := self.top.height + self.bot.height + 1;
        self := self.(height := _inout_tmp_9);
      }
      assert self.Inv1();
      reveal_Inv_for(self);
    }
    static method GenCompose(top: Generator, bot: Generator) returns (g: Generator)
      requires top.Inv()
      requires bot.Inv()
      ensures g.Inv()
      ensures g.I() == BucketGeneratorModel.GenCompose(top.I(), bot.I())
      decreases top, bot
    {
      var top_next: BucketIteratorModel.IteratorOutput := top.GenLeft();
      var bot_next: BucketIteratorModel.IteratorOutput := bot.GenLeft();
      var c: int32;
      if top_next.Next? && bot_next.Next? {
        c := cmp(top_next.key, bot_next.key);
      }
      g := Compose(top, bot, top_next, 0);
      if top_next.Next? && bot_next.Next? && c == 0 {
        var _inout_tmp_0: Generator;
        _inout_tmp_0 := g.top.GenPop(inout g.top);
        g := g.(top := _inout_tmp_0);
        var _inout_tmp_1: Generator;
        _inout_tmp_1 := g.bot.GenPop(inout g.bot);
        g := g.(bot := _inout_tmp_1);
        var _inout_tmp_2: IteratorOutput := BucketIteratorModel.Next(top_next.key, Merge(top_next.msg, bot_next.msg));
        g := g.(next := _inout_tmp_2);
      } else if top_next.Next? && (bot_next.Next? ==> c < 0) {
        var _inout_tmp_3: Generator;
        _inout_tmp_3 := g.top.GenPop(inout g.top);
        g := g.(top := _inout_tmp_3);
        var _inout_tmp_4: BucketIteratorModel.IteratorOutput := top_next;
        g := g.(next := _inout_tmp_4);
      } else if bot_next.Next? {
        var _inout_tmp_5: Generator;
        _inout_tmp_5 := g.bot.GenPop(inout g.bot);
        g := g.(bot := _inout_tmp_5);
        var _inout_tmp_6: BucketIteratorModel.IteratorOutput := bot_next;
        g := g.(next := _inout_tmp_6);
      } else {
        var _inout_tmp_7: IteratorOutput := BucketIteratorModel.Done;
        g := g.(next := _inout_tmp_7);
      }
      ghost var _inout_tmp_8: int := g.top.height + g.bot.height + 1;
      g := g.(height := _inout_tmp_8);
      assert g.Inv1();
      reveal_Inv_for(g);
      BucketGeneratorModel.reveal_GenCompose();
    }
    static method GenFromBucketWithLowerBound(bucket: MutBucket, start: UI.RangeStart) returns (g: Generator)
      requires bucket.Inv()
      ensures g.Basic?
      ensures g.biter.bucket == bucket.I()
      ensures g.Inv()
      ensures g.I() == BucketGeneratorModel.GenFromBucketWithLowerBound(bucket.I(), start)
      decreases bucket, start
    {
      var biter: BucketIter;
      match start {
        case SExclusive(key) =>
          {
            biter := BucketIter.IterFindFirstGt(bucket, key);
          }
        case SInclusive(key) =>
          {
            biter := BucketIter.IterFindFirstGte(bucket, key);
          }
        case NegativeInf() =>
          {
            biter := BucketIter.IterStart(bucket);
          }
      }
      g := Basic(biter, 1);
      assert g.Inv1();
      reveal_Inv_for(g);
      BucketGeneratorModel.reveal_GenFromBucketWithLowerBound();
    }
  }
}
Dafny program verifier did not attempt verification