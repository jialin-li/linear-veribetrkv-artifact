// LruModel.i.dfy
module LruModel {
    reveals *
    reveals LruQueue, distinct, WF, I, Empty, Remove, Remove', Use, Next, NextOpt, Pop
  type   LruQueue = seq<uint64>
  predicate {:opaque} {:fuel 0, 0} distinct(q: seq<uint64>)
    decreases q
  {
    forall i: int, j: int {:trigger q[j], q[i]} | 0 <= i < |q| && 0 <= j < |q| && i != j :: 
      q[i] != q[j]
  }
  predicate WF(q: LruQueue)
    decreases q
  {
    distinct(q)
  }
  function I(q: LruQueue): set<uint64>
    decreases q
  {
    set x: uint64 {:trigger x in q} | x in q
  }
  function Empty(): (q: LruQueue)
    ensures I(q) == {}
    ensures WF(q)
  {
    reveal_distinct();
    []
  }
  function Remove(q: LruQueue, x: uint64): LruQueue
    decreases q, x
  {
    if |q| == 0 then
      []
    else
      if Last(q) == x then Remove(DropLast(q), x) else Remove(DropLast(q), x) + [Last(q)]
  }
  function Remove'(q: LruQueue, x: uint64): LruQueue
    decreases q, x
  {
    if x !in q then
      q
    else
      ghost var i: int :| 0 <= i < |q| && x == q[i]; q[..i] + q[i + 1..]
  }
  function Use(q: LruQueue, x: uint64): LruQueue
    decreases q, x
  {
    Remove(q, x) + [x]
  }
  function Next(q: LruQueue): (x: uint64)
    requires |I(q)| > 0
    ensures x in I(q)
    decreases q
  {
    q[0]
  }
  function {:opaque} {:fuel 0, 0} NextOpt(q: LruQueue): (x: Option<uint64>)
    ensures x.Some? ==> x.value in I(q)
    ensures x.None? ==> I(q) == {}
    decreases q
  {
    if q == [] then
      None
    else
      Some(q[0])
  }
  function Pop(q: LruQueue): (LruQueue, uint64)
    requires |I(q)| > 0
    decreases q
  {
    (q[1..], q[0])
  }
  lemma  LruRemove'(q: LruQueue, x: uint64)
    requires WF(q)
    ensures Remove(q, x) == Remove'(q, x)
    decreases q, x
  {
    reveal_distinct();
    if |q| > 0 {
      LruRemove'(DropLast(q), x);
    }
  }
  lemma LruRemoveGetIndex(q: LruQueue, x: uint64, j: int)
      returns (i: int)
    requires WF(q)
    requires 0 <= j < |Remove(q, x)|
    ensures 0 <= i < |q|
    ensures q[i] == Remove(q, x)[j]
    decreases q, x, j
  {
    if j + 1 == |Remove(q, x)| && q[|q| - 1] != x {
      i := |q| - 1;
    } else {
      i := LruRemoveGetIndex(DropLast(q), x, j);
    }
  }
  lemma LruRemoveGetIndex2(q: LruQueue, x: uint64, j1: int, j2: int)
      returns (i1: int, i2: int)
    requires WF(q)
    requires 0 <= j1 < |Remove(q, x)|
    requires 0 <= j2 < |Remove(q, x)|
    requires j1 != j2
    ensures 0 <= i1 < |q|
    ensures 0 <= i2 < |q|
    ensures i1 != i2
    ensures q[i1] == Remove(q, x)[j1]
    ensures q[i2] == Remove(q, x)[j2]
    decreases q, x, j1, j2
  {
    if j2 + 1 == |Remove(q, x)| && q[|q| - 1] != x {
      i1 := LruRemoveGetIndex(DropLast(q), x, j1);
      i2 := |q| - 1;
    } else if j1 + 1 == |Remove(q, x)| && q[|q| - 1] != x {
      i2 := LruRemoveGetIndex(DropLast(q), x, j2);
      i1 := |q| - 1;
    } else {
      i1, i2 := LruRemoveGetIndex2(DropLast(q), x, j1, j2);
    }
  }
  lemma LruRemoveGetIndexRev(q: LruQueue, x: uint64, i: int)
      returns (j: int)
    requires WF(q)
    requires 0 <= i < |q|
    requires q[i] != x
    ensures 0 <= j < |Remove(q, x)|
    ensures q[i] == Remove(q, x)[j]
    decreases q, x, i
  {
    if i + 1 == |q| {
      j := |Remove(q, x)| - 1;
    } else {
      j := LruRemoveGetIndexRev(DropLast(q), x, i);
    }
  }
  lemma  LruRemove(q: LruQueue, x: uint64)
    requires WF(q)
    ensures WF(Remove(q, x))
    ensures I(Remove(q, x)) == I(q) - {x}
    decreases q, x
  {
    if |q| == 0 {
    } else {
      LruRemove(DropLast(q), x);
      if q[|q| - 1] != x {
        reveal_distinct();
        forall i: int, j: int {:trigger Remove(q, x)[j], Remove(q, x)[i]} | 0 <= i < |Remove(q, x)| && 0 <= j < |Remove(q, x)| && i != j
          ensures Remove(q, x)[i] != Remove(q, x)[j]
        {
          ghost var i1: int, j1: int := LruRemoveGetIndex2(q, x, i, j);
        }
      }
    }
    ghost var a: set<uint64> := I(Remove(q, x));
    ghost var b: set<uint64> := I(q) - {x};
    forall r: uint64 {:trigger r in b} {:trigger r in a} | r in a
      ensures r in b
    {
      ghost var j: int :| 0 <= j < |Remove(q, x)| && Remove(q, x)[j] == r;
      ghost var j1: int := LruRemoveGetIndex(q, x, j);
    }
    forall r: uint64 {:trigger r in a} {:trigger r in b} | r in b
      ensures r in a
    {
      ghost var i: int :| 0 <= i < |q| && q[i] == r;
      ghost var j: int := LruRemoveGetIndexRev(q, x, i);
    }
  }
  lemma  notInRemove(q: LruQueue, x: uint64, i: int)
    requires 0 <= i < |Remove(q, x)|
    ensures Remove(q, x)[i] != x
    decreases q, x, i
  {
    if i + 1 == |Remove(q, x)| && q[|q| - 1] != x {
    } else {
      notInRemove(DropLast(q), x, i);
    }
  }
  lemma LruUse(q: LruQueue, x: uint64)
    requires WF(q)
    ensures WF(Use(q, x))
    ensures I(Use(q, x)) == I(q) + {x}
    decreases q, x
  {
    LruRemove(q, x);
    reveal_distinct();
    forall i: int, j: int {:trigger Use(q, x)[j], Use(q, x)[i]} | 0 <= i < |Use(q, x)| && 0 <= j < |Use(q, x)| && i != j
      ensures Use(q, x)[i] != Use(q, x)[j]
    {
      if i == |Use(q, x)| - 1 {
        notInRemove(q, x, j);
      } else if j == |Use(q, x)| - 1 {
        notInRemove(q, x, i);
      } else {
      }
    }
    assert I(Use(q, x)) == I(Remove(q, x) + [x]) == I(Remove(q, x)) + {x} == I(q) - {x} + {x} == I(q) + {x};
  }
  lemma QueueCount(q: LruQueue)
    requires WF(q)
    ensures |I(q)| == |q|
    decreases q
  {
    if |q| > 0 {
      assert I(q) == I(q[1..]) + {q[0]};
      QueueCount(q[1..]);
    }
  }
}
Dafny program verifier did not attempt verification