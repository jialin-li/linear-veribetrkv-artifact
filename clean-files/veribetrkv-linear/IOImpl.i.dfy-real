// IOImpl.i.dfy
module IOImpl {
  method getFreeLoc(s: ImplVariables, len: uint64) returns (loc: Option<Location>)
  {
    var i: Option<uint64> := s.blockAllocator.Alloc();
    if i.Some? {
      loc := Some(Location(i.value * NodeBlockSizeUint64(), len));
    } else {
      loc := None;
    }
  }
  method FreeSectorOpt(sector: lOption<SSI.Sector>)
  {
    match sector {
      case lSome(value) =>
        {
          value.Free();
        }
      case lNone() =>
        {
        }
    }
  }
  method RequestWrite(io: DiskIOHandler, loc: Location, sector: SSI.Sector)
      returns (id: D.ReqId)
    modifies io
  {
    var bytes: array?<byte> := MarshallingImpl.MarshallCheckedSector(sector);
    id := io.write(loc.addr, bytes[..]);
    sector.Free();
  }
  method FindLocationAndRequestWrite(io: DiskIOHandler, s: ImplVariables, sector: SSI.Sector)
      returns (id: Option<D.ReqId>, loc: Option<Location>)
    modifies io
  {
    var bytes: array?<byte> := MarshallingImpl.MarshallCheckedSector(sector);
    if bytes == null {
      id := None;
      loc := None;
    } else {
      var len: uint64 := bytes.Length as uint64;
      loc := getFreeLoc(s, len);
      if loc.Some? {
        var i: D.ReqId := io.write(loc.value.addr, bytes[..]);
        id := Some(i);
      } else {
        id := None;
      }
    }
  }
  method FindIndirectionTableLocationAndRequestWrite(io: DiskIOHandler, s: ImplVariables, ghost sector: SSI.Sector)
      returns (id: Option<D.ReqId>, loc: Option<Location>)
    modifies io
  {
    var bytes: array?<byte> := MarshallingImpl.MarshallCheckedSectorIndirectionTable(s.frozenIndirectionTable.value, sector);
    if bytes == null {
      id := None;
      loc := None;
    } else {
      var len: uint64 := bytes.Length as uint64;
      loc := Some(DiskLayout.Location(otherIndirectionTableAddr(s.persistentIndirectionTableLoc.addr), len));
      var i: D.ReqId := io.write(loc.value.addr, bytes[..]);
      id := Some(i);
    }
  }
  method RequestRead(io: DiskIOHandler, loc: Location) returns (id: D.ReqId)
    modifies io
  {
    id := io.read(loc.addr, loc.len);
  }
  method PageInIndirectionTableReq(inout old_s: ImplVariables, io: DiskIOHandler) returns (s: ImplVariables)
    modifies io
  {
    s := old_s;
    if s.indirectionTableRead.None? {
      var id: D.ReqId := RequestRead(io, s.indirectionTableLoc);
      var _inout_tmp_0: Option<uint64> := Some(id);
      s := s.(indirectionTableRead := _inout_tmp_0);
    } else {
      print "PageInIndirectionTableReq: request already out\n";
    }
  }
  method PageInNodeReq(inout old_s: ImplVariables, io: DiskIOHandler, ref: BC.Reference)
      returns (s: ImplVariables)
    modifies io
  {
    s := old_s;
    if BC.OutstandingRead(ref) in s.outstandingBlockReads.Values {
      print "giving up; already an outstanding read for this ref\n";
    } else {
      var locGraph: Option<Entry> := s.ephemeralIndirectionTable.GetEntry(ref);
      var loc: Option<Location> := locGraph.value.loc;
      var id: D.ReqId := RequestRead(io, loc.value);
      var _inout_tmp_0: map<BC.ReqId, BC.OutstandingRead> := s.outstandingBlockReads[id := BC.OutstandingRead(ref)];
      s := s.(outstandingBlockReads := _inout_tmp_0);
    }
  }
  method ReadSector(io: DiskIOHandler) returns (id: D.ReqId, sector: lOption<SSI.Sector>)
  {
    var id1: D.ReqId, addr: uint64, bytes: seq<byte> := io.getReadResult();
    id := id1;
    if |bytes| as uint64 <= LargestBlockSizeOfAnyTypeUint64() {
      var loc: Location := DiskLayout.Location(addr, |bytes| as uint64);
      var sectorOpt: lOption<Sector> := MarshallingImpl.ParseCheckedSector(bytes);
      if sectorOpt.lSome? && ((ValidNodeLocation(loc) && sectorOpt.value.SectorNode?) || (ValidSuperblockLocation(loc) && sectorOpt.value.SectorSuperblock?) || (ValidIndirectionTableLocation(loc) && sectorOpt.value.SectorIndirectionTable?)) {
        sector := sectorOpt;
      } else {
        FreeSectorOpt(sectorOpt);
        sector := lNone;
      }
    } else {
      sector := lNone;
    }
  }
  method PageInIndirectionTableResp(inout old_s: ImplVariables, io: DiskIOHandler) returns (s: ImplVariables)
  {
    s := old_s;
    var sectorOpt: lOption<SSI.Sector>;
    var id: D.ReqId;
    id, sectorOpt := ReadSector(io);
    if Some(id) == s.indirectionTableRead && sectorOpt.lSome? && sectorOpt.value.SectorIndirectionTable? {
      var lSome(sector: SSI.Sector) := sectorOpt;
      var SectorIndirectionTable(ephemeralIndirectionTable: IT.IndirectionTable) := sector;
      var bm: BitmapImpl.Bitmap;
      var succ: bool;
      succ, bm := ephemeralIndirectionTable.InitLocBitmap();
      if succ {
        var Loading(indirectionTableLoc: DiskLayout.Location, indirectionTableRead: Option<BC.ReqId>) := s;
        var blockAllocator: BlockAllocator := BlockAllocatorImpl.BlockAllocator.Constructor(bm);
        var persistentIndirectionTable: IndirectionTable := ephemeralIndirectionTable.Clone();
        var lru: LinearLru := LinearLru.LinearLru.Alloc();
        var cache: LMutCache := CacheImpl.LMutCache.NewCache();
        s := Variables.Ready(persistentIndirectionTable, lNone, ephemeralIndirectionTable, indirectionTableLoc, None, None, map[], map[], cache, lru, blockAllocator);
      } else {
        bm.Free();
        ephemeralIndirectionTable.Free();
        print "InitLocBitmap failed\n";
      }
    } else {
      FreeSectorOpt(sectorOpt);
      print "giving up; did not get indirectionTable when reading\n";
    }
  }
  method {:timeLimitMultiplier 2}  PageInNodeResp(inout old_s: ImplVariables, io: DiskIOHandler) returns (s: ImplVariables)
  {
    s := old_s;
    var id: D.ReqId;
    var sector: lOption<SSI.Sector>;
    id, sector := ReadSector(io);
    if id in s.outstandingBlockReads {
      var ref: Reference := s.outstandingBlockReads[id].ref;
      var lbaGraph: Option<Entry> := s.ephemeralIndirectionTable.GetEntry(ref);
      if lbaGraph.Some? && lbaGraph.value.loc.Some? {
        var cacheLookup: bool := s.cache.InCache(ref);
        if cacheLookup {
          FreeSectorOpt(sector);
          print "PageInNodeResp: ref in s.cache\n";
        } else {
          var lba: Location := lbaGraph.value.loc.value;
          var graph: seq<BT.G.Reference> := lbaGraph.value.succs;
          if sector.lSome? && sector.value.SectorNode? {
            var lSome(value: SSI.Sector) := sector;
            var SectorNode(node: Node) := value;
            var children: Option<seq<BT.G.Reference>> := node.children;
            if graph == if children.Some? then children.value else [] {
              var _inout_tmp_0: LinearLru;
              _inout_tmp_0 := s.lru.Use(inout s.lru, ref);
              s := s.(lru := _inout_tmp_0);
              var _inout_tmp_1: LMutCache;
              _inout_tmp_1 := s.cache.Insert(inout s.cache, ref, node);
              s := s.(cache := _inout_tmp_1);
              var _inout_tmp_2: map<uint64, BC.OutstandingRead> := ComputeMapRemove1(s.outstandingBlockReads, id);
              s := s.(outstandingBlockReads := _inout_tmp_2);
            } else {
              var _: () := FreeNode(node);
              print "giving up; block does not match graph\n";
            }
          } else {
            FreeSectorOpt(sector);
            print "giving up; block read in was not block\n";
          }
        }
      } else {
        FreeSectorOpt(sector);
        print "PageInNodeResp: ref !in lbas\n";
      }
    } else {
      FreeSectorOpt(sector);
      print "PageInNodeResp: unrecognized id from Read\n";
    }
  }
  method writeNodeResponse(inout old_s: ImplVariables, io: DiskIOHandler) returns (s: ImplVariables)
  {
    s := old_s;
    var id: D.ReqId, addr: uint64, len: uint64 := io.getWriteResult();
    var locIdx: uint64 := s.outstandingBlockWrites[id].loc.addr / NodeBlockSizeUint64();
    var _inout_tmp_0: BlockAllocator;
    _inout_tmp_0 := s.blockAllocator.MarkFreeOutstanding(inout s.blockAllocator, locIdx);
    s := s.(blockAllocator := _inout_tmp_0);
    var _inout_tmp_1: map<uint64, BC.OutstandingWrite> := ComputeMapRemove1(s.outstandingBlockWrites, id);
    s := s.(outstandingBlockWrites := _inout_tmp_1);
  }
  method writeIndirectionTableResponse(inout old_s: ImplVariables, io: DiskIOHandler)
      returns (loc: Location, s: ImplVariables)
  {
    s := old_s;
    var _inout_tmp_0: Option<uint64> := None;
    s := s.(outstandingIndirectionTableWrite := _inout_tmp_0);
    loc := s.frozenIndirectionTableLoc.value;
  }
  method cleanUp(inout old_s: ImplVariables) returns (s: ImplVariables)
  {
    s := old_s;
    var Ready(persistentIndirectionTable: IT.IndirectionTable, frozenIndirectionTable: lOption<IT.IndirectionTable>, ephemeralIndirectionTable: IT.IndirectionTable, persistentIndirectionTableLoc: DiskLayout.Location, frozenIndirectionTableLoc: Option<DiskLayout.Location>, outstandingIndirectionTableWrite: Option<BC.ReqId>, outstandingBlockWrites: map<BC.ReqId, BC.OutstandingWrite>, outstandingBlockReads: map<BC.ReqId, BC.OutstandingRead>, cache: LMutCache, lru: LinearLru.LinearLru, blockAllocator: BlockAllocatorImpl.BlockAllocator) := s;
    persistentIndirectionTable.Free();
    var value: IT.IndirectionTable := unwrap_value(frozenIndirectionTable);
    s := Ready(value, lNone, ephemeralIndirectionTable, frozenIndirectionTableLoc.value, None, outstandingIndirectionTableWrite, outstandingBlockWrites, outstandingBlockReads, cache, lru, blockAllocator);
    var _inout_tmp_0: BlockAllocator;
    _inout_tmp_0 := s.blockAllocator.MoveFrozenToPersistent(inout s.blockAllocator);
    s := s.(blockAllocator := _inout_tmp_0);
  }
}
Dafny program verifier did not attempt verification