// HandleReadResponseImpl.i.dfy
module HandleReadResponseImpl {
  method readResponse(inout old_s: Full, io: DiskIOHandler) returns (s: Full)
    requires old_s.Inv()
    requires io.diskOp().RespReadOp?
    ensures s.WF()
    ensures |old(io.diskOp()).respRead.bytes| < 18446744073709551616
    ensures M.Next(old_s.I(), s.I(), UI.NoOp, diskOp(IIO(io)))
    decreases old_s, io
  {
    s := old_s;
    var id: D.ReqId, addr: uint64, bytes: seq<byte> := io.getReadResult();
    var loc: Location := DiskLayout.Location(addr, |bytes| as uint64);
    if ValidNodeLocation(loc) {
      if s.bc.Ready? {
        var _inout_tmp_0: ImplVariables;
        _inout_tmp_0 := IOImpl.PageInNodeResp(inout s.bc, io);
        s := s.(bc := _inout_tmp_0);
        jcNoOp_respread(old_s, s, StatesInternalOp, IIO(io));
        assert BJC.NextStep(old_s.I(), s.I(), UI.NoOp, IDiskOp(diskOp(IIO(io))), StatesInternalOp);
        assert BJC.Next(old_s.I(), s.I(), UI.NoOp, IDiskOp(diskOp(IIO(io))));
        assert M.Next(old_s.I(), s.I(), UI.NoOp, diskOp(IIO(io)));
      } else {
        noop_respread(s, IIO(io));
        print "readResponse: doing nothing\n";
      }
    } else if ValidIndirectionTableLocation(loc) {
      if s.bc.Loading? {
        var _inout_tmp_1: ImplVariables;
        _inout_tmp_1 := IOImpl.PageInIndirectionTableResp(inout s.bc, io);
        s := s.(bc := _inout_tmp_1);
        jcNoOp_respread(old_s, s, StatesInternalOp, IIO(io));
        assert BJC.NextStep(old_s.I(), s.I(), UI.NoOp, IDiskOp(diskOp(IIO(io))), StatesInternalOp);
        assert BJC.Next(old_s.I(), s.I(), UI.NoOp, IDiskOp(diskOp(IIO(io))));
        assert M.Next(old_s.I(), s.I(), UI.NoOp, diskOp(IIO(io)));
      } else {
        print "readResponse: doing nothing\n";
        noop_respread(s, IIO(io));
      }
    } else if ValidJournalLocation(loc) {
      if s.jc.status.StatusLoadingOther? {
        var _inout_tmp_2: Committer;
        _inout_tmp_2 := s.jc.pageInJournalResp(inout s.jc, io);
        s := s.(jc := _inout_tmp_2);
        bcNoOp_respread(old_s, s, JournalInternalOp, IIO(io));
        assert BJC.NextStep(old_s.I(), s.I(), UI.NoOp, IDiskOp(diskOp(IIO(io))), JournalInternalOp);
        assert BJC.Next(old_s.I(), s.I(), UI.NoOp, IDiskOp(diskOp(IIO(io))));
        assert M.Next(old_s.I(), s.I(), UI.NoOp, diskOp(IIO(io)));
      } else {
        noop_respread(s, IIO(io));
      }
    } else if loc == Superblock1Location() {
      var _inout_tmp_3: Committer;
      _inout_tmp_3 := s.jc.readSuperblockResp(inout s.jc, io, 0);
      s := s.(jc := _inout_tmp_3);
      bcNoOp_respread(old_s, s, JournalInternalOp, IIO(io));
      assert BJC.NextStep(old_s.I(), s.I(), UI.NoOp, IDiskOp(diskOp(IIO(io))), JournalInternalOp);
      assert BJC.Next(old_s.I(), s.I(), UI.NoOp, IDiskOp(diskOp(IIO(io))));
      assert M.Next(old_s.I(), s.I(), UI.NoOp, diskOp(IIO(io)));
    } else if loc == Superblock2Location() {
      var _inout_tmp_4: Committer;
      _inout_tmp_4 := s.jc.readSuperblockResp(inout s.jc, io, 1);
      s := s.(jc := _inout_tmp_4);
      bcNoOp_respread(old_s, s, JournalInternalOp, IIO(io));
      assert BJC.NextStep(old_s.I(), s.I(), UI.NoOp, IDiskOp(diskOp(IIO(io))), JournalInternalOp);
      assert BJC.Next(old_s.I(), s.I(), UI.NoOp, IDiskOp(diskOp(IIO(io))));
      assert M.Next(old_s.I(), s.I(), UI.NoOp, diskOp(IIO(io)));
    } else {
      print "readResponse: doing nothing\n";
      noop_respread(s, IIO(io));
    }
  }
}
Dafny program verifier did not attempt verification