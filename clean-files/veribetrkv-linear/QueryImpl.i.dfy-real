// QueryImpl.i.dfy
module QueryImpl {
  method {:timeLimitMultiplier 3}  queryIterate(inout old_s: ImplVariables, key: Key, msg: Message, ref: BT.G.Reference, io: DiskIOHandler, counter: uint64, ghost lookup: seq<BT.G.ReadOp>)
      returns (res: Option<Value>, s: ImplVariables)
    modifies io
  {
    s := old_s;
    if counter == 0 {
      res := None;
    } else {
      var incache: bool := s.cache.InCache(ref);
      if !incache {
        var _inout_tmp_0: ImplVariables;
        _inout_tmp_0 := PageInNodeReqOrMakeRoom(inout s, io, ref);
        s := _inout_tmp_0;
        res := None;
      } else {
        var pivots: Pivots.PivotTable, children: Option<seq<BT.G.Reference>> := s.cache.GetNodeInfo(ref);
        var boundedkey: bool := ComputeBoundedKey(pivots, key);
        if !boundedkey {
          res := None;
        } else {
          var _inout_tmp_2: LinearLru;
          _inout_tmp_2 := s.lru.Use(inout s.lru, ref);
          s := s.(lru := _inout_tmp_2);
          var r: uint64 := Pivots.ComputeRoute(pivots, key);
          var kmtMsg: Option<Message> := s.cache.GetMessage(ref, r, key);
          var newmsg: Message := if kmtMsg.Some? then ValueMessage.Merge(msg, kmtMsg.value) else msg;
          if newmsg.Define? {
            res := Some(newmsg.value);
          } else {
            if children.Some? {
              var _inout_tmp_1: ImplVariables;
              res, _inout_tmp_1 := queryIterate(inout s, key, newmsg, children.value[r], io, counter - 1, newlookup);
              s := _inout_tmp_1;
            } else {
              res := Some(ValueType.DefaultValue());
            }
          }
        }
      }
    }
  }
  method query(inout old_s: ImplVariables, io: DiskIOHandler, key: Key)
      returns (res: Option<Value>, s: ImplVariables)
    modifies io
  {
    s := old_s;
    var ref: Reference := BT.G.Root();
    var msg: Message := ValueMessage.IdentityMessage();
    var counter: uint64 := 40;
    var _inout_tmp_0: ImplVariables;
    res, _inout_tmp_0 := queryIterate(inout s, key, msg, ref, io, counter, []);
    s := _inout_tmp_0;
  }
}
Dafny program verifier did not attempt verification