// BlockAllocatorImpl.i.dfy
module BlockAllocatorImpl {
  datatype BlockAllocator = BlockAllocator(ephemeral: BitmapImpl.Bitmap, frozen: lOption<BitmapImpl.Bitmap>, persistent: BitmapImpl.Bitmap, outstanding: BitmapImpl.Bitmap, full: BitmapImpl.Bitmap) {
    method DebugAccumulate() returns (acc: DebugAccumulator.DebugAccumulator)
      requires false
      decreases this
    {
      acc := DebugAccumulator.EmptyAccumulator();
      var r: DebugAccumulator.DebugAccumulator := ephemeral.DebugAccumulate();
      var a: AccRec := new DebugAccumulator.AccRec.Index(r);
      acc := DebugAccumulator.AccPut(acc, "ephemeral", a);
      if frozen.lSome? {
        r := frozen.value.DebugAccumulate();
      } else {
        r := DebugAccumulator.EmptyAccumulator();
      }
      a := new DebugAccumulator.AccRec.Index(r);
      acc := DebugAccumulator.AccPut(acc, "frozen", a);
      r := persistent.DebugAccumulate();
      a := new DebugAccumulator.AccRec.Index(r);
      acc := DebugAccumulator.AccPut(acc, "persistent", a);
      r := outstanding.DebugAccumulate();
      a := new DebugAccumulator.AccRec.Index(r);
      acc := DebugAccumulator.AccPut(acc, "outstanding", a);
      r := full.DebugAccumulate();
      a := new DebugAccumulator.AccRec.Index(r);
      acc := DebugAccumulator.AccPut(acc, "full", a);
    }
    predicate {:opaque} {:fuel 0, 0} Inv()
      decreases this
    {
      ephemeral.Inv() &&
      (frozen.lSome? ==>
        frozen.value.Inv()) &&
      persistent.Inv() &&
      outstanding.Inv() &&
      full.Inv() &&
      BitmapModel.Len(ephemeral.I()) == NumBlocks() &&
      (frozen.lSome? ==>
        BitmapModel.Len(frozen.value.I()) == NumBlocks()) &&
      BitmapModel.Len(persistent.I()) == NumBlocks() &&
      BitmapModel.Len(outstanding.I()) == NumBlocks() &&
      BitmapModel.Len(full.I()) == NumBlocks()
    }
    function {:opaque} {:fuel 0, 0} I(): BlockAllocatorModel.BlockAllocatorModel
      requires Inv()
      decreases this
    {
      reveal Inv();
      BlockAllocatorModel.BlockAllocatorModel(ephemeral.I(), if frozen.lNone? then None else Some(frozen.value.I()), persistent.I(), outstanding.I(), full.I())
    }
    static method Constructor(bm: BitmapImpl.Bitmap) returns (ba: BlockAllocator)
      requires bm.Inv()
      requires BitmapModel.Len(bm.I()) == NumBlocks()
      ensures ba.Inv()
      ensures ba.I() == BlockAllocatorModel.InitBlockAllocator(bm.I())
      decreases bm
    {
      var per: Bitmap := BitmapImpl.Bitmap.CloneConstructor(bm);
      var out: Bitmap := BitmapImpl.Bitmap.Constructor(NumBlocksUint64());
      var ful: Bitmap := BitmapImpl.Bitmap.CloneConstructor(bm);
      ba := BlockAllocator(bm, lNone, per, out, ful);
      reveal ba.Inv(), ba.I();
    }
    method Alloc() returns (res: Option<uint64>)
      requires Inv()
      ensures res.Some? <==> BlockAllocatorModel.Alloc(I()).Some?
      ensures res.Some? ==> res.value as int == BlockAllocatorModel.Alloc(I()).value
      decreases this
    {
      reveal Inv();
      reveal I();
      res := full.Alloc();
    }
    method MarkUsedEphemeral(inout old_self: BlockAllocator, i: uint64) returns (self: BlockAllocator)
      requires old_self.Inv()
      requires BlockAllocatorModel.Inv(old_self.I())
      requires i as int < NumBlocks()
      ensures self.Inv()
      ensures self.I() == BlockAllocatorModel.MarkUsedEphemeral(old_self.I(), i as int)
      decreases this, old_self, i
    {
      self := old_self;
      reveal old_self.Inv(), old_self.I();
      var _inout_tmp_0: Bitmap;
      _inout_tmp_0 := self.ephemeral.Set(inout self.ephemeral, i);
      self := self.(ephemeral := _inout_tmp_0);
      var _inout_tmp_1: Bitmap;
      _inout_tmp_1 := self.full.Set(inout self.full, i);
      self := self.(full := _inout_tmp_1);
      reveal self.Inv(), self.I();
    }
    method MarkUsedFrozen(inout old_self: BlockAllocator, i: uint64) returns (self: BlockAllocator)
      requires old_self.Inv()
      requires BlockAllocatorModel.Inv(old_self.I())
      requires i as int < NumBlocks()
      requires old_self.I().frozen.Some?
      ensures self.Inv()
      ensures self.I() == BlockAllocatorModel.MarkUsedFrozen(old_self.I(), i as int)
      decreases this, old_self, i
    {
      self := old_self;
      reveal old_self.Inv(), old_self.I();
      var _inout_tmp_0: Bitmap;
      _inout_tmp_0 := self.frozen.value.Set(inout self.frozen.value, i);
      self := self.(frozen := self.frozen.(value := _inout_tmp_0));
      var _inout_tmp_1: Bitmap;
      _inout_tmp_1 := self.full.Set(inout self.full, i);
      self := self.(full := _inout_tmp_1);
      reveal self.Inv(), self.I();
    }
    method MarkUsedOutstanding(inout old_self: BlockAllocator, i: uint64) returns (self: BlockAllocator)
      requires old_self.Inv()
      requires BlockAllocatorModel.Inv(old_self.I())
      requires i as int < NumBlocks()
      ensures self.Inv()
      ensures self.I() == BlockAllocatorModel.MarkUsedOutstanding(old_self.I(), i as int)
      decreases this, old_self, i
    {
      self := old_self;
      reveal old_self.Inv(), old_self.I();
      var _inout_tmp_0: Bitmap;
      _inout_tmp_0 := self.outstanding.Set(inout self.outstanding, i);
      self := self.(outstanding := _inout_tmp_0);
      var _inout_tmp_1: Bitmap;
      _inout_tmp_1 := self.full.Set(inout self.full, i);
      self := self.(full := _inout_tmp_1);
      reveal self.Inv(), self.I();
    }
    method MarkFreeOutstanding(inout old_self: BlockAllocator, i: uint64) returns (self: BlockAllocator)
      requires old_self.Inv()
      requires BlockAllocatorModel.Inv(old_self.I())
      requires i as int < NumBlocks()
      ensures self.Inv()
      ensures self.I() == BlockAllocatorModel.MarkFreeOutstanding(old_self.I(), i as int)
      decreases this, old_self, i
    {
      self := old_self;
      reveal old_self.Inv(), old_self.I();
      var _inout_tmp_1: Bitmap;
      _inout_tmp_1 := self.outstanding.Unset(inout self.outstanding, i);
      self := self.(outstanding := _inout_tmp_1);
      var b0: bool := false;
      if self.frozen.lSome? {
        b0 := self.frozen.value.GetIsSet(i);
      }
      if !b0 {
        var b1: bool := self.ephemeral.GetIsSet(i);
        if !b1 {
          var b2: bool := self.persistent.GetIsSet(i);
          if !b2 {
            var _inout_tmp_0: Bitmap;
            _inout_tmp_0 := self.full.Unset(inout self.full, i);
            self := self.(full := _inout_tmp_0);
          }
        }
      }
      BitmapModel.reveal_BitUnset();
      BitmapModel.reveal_IsSet();
      reveal self.Inv(), self.I();
      assert self.Inv();
    }
    method MarkFreeEphemeral(inout old_self: BlockAllocator, i: uint64) returns (self: BlockAllocator)
      requires old_self.Inv()
      requires BlockAllocatorModel.Inv(old_self.I())
      requires i as int < NumBlocks()
      ensures self.Inv()
      ensures self.I() == BlockAllocatorModel.MarkFreeEphemeral(old_self.I(), i as int)
      decreases this, old_self, i
    {
      self := old_self;
      reveal old_self.Inv(), old_self.I();
      var _inout_tmp_1: Bitmap;
      _inout_tmp_1 := self.ephemeral.Unset(inout self.ephemeral, i);
      self := self.(ephemeral := _inout_tmp_1);
      var b0: bool := false;
      if self.frozen.lSome? {
        b0 := self.frozen.value.GetIsSet(i);
      }
      if !b0 {
        var b1: bool := self.outstanding.GetIsSet(i);
        if !b1 {
          var b2: bool := self.persistent.GetIsSet(i);
          if !b2 {
            var _inout_tmp_0: Bitmap;
            _inout_tmp_0 := self.full.Unset(inout self.full, i);
            self := self.(full := _inout_tmp_0);
          }
        }
      }
      BitmapModel.reveal_BitUnset();
      BitmapModel.reveal_IsSet();
      assert forall j: int {:trigger BitmapModel.IsSet(old_self.ephemeral.I(), j)} {:trigger BitmapModel.IsSet(self.ephemeral.I(), j)} | 0 <= j < |self.ephemeral.I()| :: j != i as int ==> BitmapModel.IsSet(self.ephemeral.I(), j) == BitmapModel.IsSet(old_self.ephemeral.I(), j);
      reveal self.Inv(), self.I();
      assert self.Inv();
    }
    method MoveFrozenToPersistent(inout old_self: BlockAllocator) returns (self: BlockAllocator)
      requires old_self.Inv()
      requires BlockAllocatorModel.Inv(old_self.I())
      requires old_self.frozen.lSome?
      ensures self.Inv()
      ensures old_self.I().frozen.Some?
      ensures self.I() == BlockAllocatorModel.MoveFrozenToPersistent(old_self.I())
      decreases this, old_self
    {
      self := old_self;
      reveal old_self.Inv(), old_self.I();
      var BlockAllocator(eph: BitmapImpl.Bitmap, fro: lOption<BitmapImpl.Bitmap>, pre: BitmapImpl.Bitmap, out: BitmapImpl.Bitmap, full: BitmapImpl.Bitmap) := self;
      var frozen_val: BitmapImpl.Bitmap := unwrap_value(fro);
      var fo: Bitmap := BitmapImpl.Bitmap.UnionConstructor(frozen_val, out);
      var fu: Bitmap := BitmapImpl.Bitmap.UnionConstructor(eph, fo);
      self := BlockAllocator(eph, lNone, frozen_val, out, fu);
      pre.Free();
      full.Free();
      fo.Free();
      reveal self.Inv(), self.I();
    }
    method CopyEphemeralToFrozen(inout old_self: BlockAllocator) returns (self: BlockAllocator)
      requires old_self.Inv()
      requires BlockAllocatorModel.Inv(old_self.I())
      ensures self.Inv()
      ensures self.I() == BlockAllocatorModel.CopyEphemeralToFrozen(old_self.I())
      decreases this, old_self
    {
      self := old_self;
      reveal old_self.Inv(), old_self.I();
      var BlockAllocator(eph: BitmapImpl.Bitmap, fro: lOption<BitmapImpl.Bitmap>, pre: BitmapImpl.Bitmap, out: BitmapImpl.Bitmap, full: BitmapImpl.Bitmap) := self;
      if fro.lSome? {
        var frozen_val: BitmapImpl.Bitmap := unwrap_value(fro);
        frozen_val.Free();
      } else {
        dispose_lnone(fro);
      }
      var fo: Bitmap := BitmapImpl.Bitmap.CloneConstructor(eph);
      self := BlockAllocator(eph, lSome(fo), pre, out, full);
      reveal self.Inv(), self.I();
    }
    method Free()
      decreases this
    {
      var BlockAllocator(ephemeral: BitmapImpl.Bitmap, frozen: lOption<BitmapImpl.Bitmap>, persistent: BitmapImpl.Bitmap, outstanding: BitmapImpl.Bitmap, full: BitmapImpl.Bitmap) := this;
      ephemeral.Free();
      if frozen.lSome? {
        var value: BitmapImpl.Bitmap := unwrap_value(frozen);
        value.Free();
      } else {
        dispose_lnone(frozen);
      }
      persistent.Free();
      outstanding.Free();
      full.Free();
    }
  }
}
Dafny program verifier did not attempt verification