// IOModel.i.dfy
module IOModel {
  type Sector = SSI.Sector
  predicate stepsBetree(s: BBC.Variables, s': BBC.Variables, vop: VOp, step: BT.BetreeStep)
    decreases s, s', vop, step
  {
    BBC.NextStep(s, s', BlockDisk.NoDiskOp, vop, BBC.BetreeMoveStep(step))
  }
  predicate stepsBC(s: BBC.Variables, s': BBC.Variables, vop: VOp, io: IO, step: BC.Step)
    decreases s, s', vop, io, step
  {
    ValidDiskOp(diskOp(io)) &&
    BBC.NextStep(s, s', IDiskOp(diskOp(io)).bdop, vop, BBC.BlockCacheMoveStep(step))
  }
  predicate noop(s: BBC.Variables, s': BBC.Variables)
    decreases s, s'
  {
    BBC.NextStep(s, s', BlockDisk.NoDiskOp, StatesInternalOp, BBC.BlockCacheMoveStep(BC.NoOpStep))
  }
  predicate betree_next(s: BBC.Variables, s': BBC.Variables)
    decreases s, s'
  {
    BBC.Next(s, s', BlockDisk.NoDiskOp, StatesInternalOp) || BBC.Next(s, s', BlockDisk.NoDiskOp, AdvanceOp(UI.NoOp, true))
  }
  predicate betree_next_dop(s: BBC.Variables, s': BBC.Variables, dop: BlockDisk.DiskOp)
    decreases s, s', dop
  {
    BBC.Next(s, s', dop, StatesInternalOp) || BBC.Next(s, s', dop, AdvanceOp(UI.NoOp, true))
  }
  predicate LocAvailable(s: ImplVariables, loc: Location, len: uint64)
    requires s.WFBCVars()
    decreases s, loc, len
  {
    s.Ready? &&
    ValidNodeLocation(loc) &&
    BC.ValidAllocation(s.I(), loc) &&
    loc.len == len
  }
  function {:opaque} {:fuel 0, 0} getFreeLoc(s: ImplVariables, len: uint64): (res: Option<Location>)
    requires s.Ready?
    requires s.WFBCVars()
    requires len <= NodeBlockSizeUint64()
    ensures res.Some? ==> 0 <= res.value.addr as int / NodeBlockSize() < NumBlocks()
    decreases s, len
  {
    ghost var i: Option<int> := BlockAllocatorModel.Alloc(s.blockAllocator.I());
    if i.Some? then
      Some(DiskLayout.Location((i.value * NodeBlockSize()) as uint64, len))
    else
      None
  }
  predicate {:opaque} {:fuel 0, 0} FindLocationAndRequestWrite(io: IO, s: ImplVariables, sector: Sector, id: Option<D.ReqId>, loc: Option<DiskLayout.Location>, io': IO)
    requires s.Ready?
    requires s.WFBCVars()
    ensures FindLocationAndRequestWrite(io, s, sector, id, loc, io') ==> loc.Some? ==> 0 <= loc.value.addr as int / NodeBlockSize() < NumBlocks()
    decreases io, s, sector, id, loc, io'
  {
    true &&
    ghost var dop: D.DiskOp := diskOp(io'); (dop.NoDiskOp? || dop.ReqWriteOp?) && (dop.NoDiskOp? ==> id == None && loc == None && io' == io) && (dop.ReqWriteOp? ==> ghost var bytes: seq<byte> := dop.reqWrite.bytes; |bytes| <= NodeBlockSize() as int && 32 <= |bytes| && Marshalling.parseCheckedSector(bytes).Some? && SSI.Inv(sector) && Marshalling.parseCheckedSector(bytes).value == SSI.ISector(sector) && ghost var len: uint64 := |bytes| as uint64; loc == getFreeLoc(s, len) && loc.Some? && id == Some(dop.id) && dop == D.ReqWriteOp(id.value, D.ReqWrite(loc.value.addr, bytes)) && io' == IOReqWrite(id.value, dop.reqWrite))
  }
  function RequestRead(io: IO, loc: DiskLayout.Location): (res: (D.ReqId, IO))
    requires io.IOInit?
    decreases io, loc
  {
    (io.id, IOReqRead(io.id, D.ReqRead(loc.addr, loc.len)))
  }
  lemma RequestReadCorrect(io: IO, loc: DiskLayout.Location)
    requires io.IOInit?
    requires DiskLayout.ValidLocation(loc)
    ensures var (id: D.ReqId, io': IO) := RequestRead(io, loc); ValidDiskOp(diskOp(io')) && (ValidNodeLocation(loc) ==> IDiskOp(diskOp(io')) == BlockJournalDisk.DiskOp(BlockDisk.ReqReadNodeOp(id, loc), JournalDisk.NoDiskOp)) && (ValidIndirectionTableLocation(loc) ==> IDiskOp(diskOp(io')) == BlockJournalDisk.DiskOp(BlockDisk.ReqReadIndirectionTableOp(id, loc), JournalDisk.NoDiskOp)) && (ValidSuperblock1Location(loc) ==> IDiskOp(diskOp(io')) == BlockJournalDisk.DiskOp(BlockDisk.NoDiskOp, JournalDisk.ReqReadSuperblockOp(id, 0))) && (ValidSuperblock2Location(loc) ==> IDiskOp(diskOp(io')) == BlockJournalDisk.DiskOp(BlockDisk.NoDiskOp, JournalDisk.ReqReadSuperblockOp(id, 1)))
    decreases io, loc
  {
  }
  function PageInNodeReq(s: BBC.Variables, io: IO, ref: BC.Reference): (res: (BBC.Variables, IO))
    requires s.Ready?
    requires io.IOInit?
    requires ref in s.ephemeralIndirectionTable.locs
    decreases s, io, ref
  {
    if BC.OutstandingRead(ref) in s.outstandingBlockReads.Values then
      (s, io)
    else
      ghost var loc: Location := s.ephemeralIndirectionTable.locs[ref]; var (id: D.ReqId, io': IO) := RequestRead(io, loc); ghost var s': BC.Variables := s.(outstandingBlockReads := s.outstandingBlockReads[id := BC.OutstandingRead(ref)]); (s', io')
  }
  lemma PageInNodeReqCorrect(s: BBC.Variables, io: IO, ref: BC.Reference)
    requires io.IOInit?
    requires s.Ready?
    requires BBC.Inv(s)
    requires ref in s.ephemeralIndirectionTable.locs
    requires ref !in s.cache
    ensures var (s': BBC.Variables, io': IO) := PageInNodeReq(s, io, ref); ValidDiskOp(diskOp(io')) && BBC.Next(s, s', IDiskOp(diskOp(io')).bdop, StatesInternalOp)
    decreases s, io, ref
  {
    if BC.OutstandingRead(ref) in s.outstandingBlockReads.Values {
      assert noop(s, s);
    } else {
      ghost var loc: Location := s.ephemeralIndirectionTable.locs[ref];
      assert ValidNodeLocation(loc);
      var (id: D.ReqId, io': IO) := RequestRead(io, loc);
      ghost var s': BC.Variables := s.(outstandingBlockReads := s.outstandingBlockReads[id := BC.OutstandingRead(ref)]);
      assert BC.PageInNodeReq(s, s', IDiskOp(diskOp(io')).bdop, StatesInternalOp, ref);
      assert stepsBC(s, s', StatesInternalOp, io', BC.PageInNodeReqStep(ref));
    }
  }
  function ReadSector(io: IO): (res: (D.ReqId, Option<SectorType.Sector>))
    requires diskOp(io).RespReadOp?
    decreases io
  {
    ghost var id: uint64 := io.id;
    ghost var bytes: seq<byte> := io.respRead.bytes;
    if |bytes| <= IndirectionTableBlockSize() then
      ghost var loc: Location := DiskLayout.Location(io.respRead.addr, |io.respRead.bytes| as uint64);
      ghost var sector: Option<Sector> := Marshalling.parseCheckedSector(bytes);
      if sector.Some? && ((ValidNodeLocation(loc) && sector.value.SectorNode?) || (ValidSuperblockLocation(loc) && sector.value.SectorSuperblock?) || (ValidIndirectionTableLocation(loc) && sector.value.SectorIndirectionTable?)) then
        (id, sector)
      else
        (id, None)
    else
      (id, None)
  }
  lemma ReadSectorCorrect(io: IO)
    requires diskOp(io).RespReadOp?
    requires ValidDiskOp(diskOp(io))
    ensures var (id: D.ReqId, sector: Option<SectorType.Sector>) := ReadSector(io); (sector.Some? ==> ValidDiskOp(diskOp(io)) && (sector.value.SectorNode? ==> IDiskOp(diskOp(io)) == BlockJournalDisk.DiskOp(BlockDisk.RespReadNodeOp(id, Some(sector.value.node)), JournalDisk.NoDiskOp)) && (sector.value.SectorIndirectionTable? ==> IDiskOp(diskOp(io)) == BlockJournalDisk.DiskOp(BlockDisk.RespReadIndirectionTableOp(id, Some(sector.value.indirectionTable)), JournalDisk.NoDiskOp)) && (sector.value.SectorSuperblock? ==> IDiskOp(diskOp(io)).bdop == BlockDisk.NoDiskOp && IDiskOp(diskOp(io)).jdop.RespReadSuperblockOp? && IDiskOp(diskOp(io)).jdop.id == id && IDiskOp(diskOp(io)).jdop.superblock == Some(sector.value.superblock))) && (IDiskOp(diskOp(io)).jdop.RespReadSuperblockOp? && IDiskOp(diskOp(io)).jdop.superblock.Some? ==> sector.Some? && sector.value.SectorSuperblock?)
    decreases io
  {
    Marshalling.reveal_parseCheckedSector();
    Marshalling.reveal_parseSector();
    reveal_SectorOfBytes();
    reveal_ValidCheckedBytes();
    reveal_Parse();
    D.reveal_ChecksumChecksOut();
  }
  lemma lemmaOutstandingLocIndexValid(s: ImplVariables, id: uint64)
    requires s.Inv()
    requires s.Ready?
    requires id in s.outstandingBlockWrites
    ensures 0 <= s.outstandingBlockWrites[id].loc.addr as int / NodeBlockSize() < NumBlocks()
    decreases s, id
  {
    reveal_ConsistentBitmapInteral();
    ghost var i: int := s.outstandingBlockWrites[id].loc.addr as int / NodeBlockSize();
    DiskLayout.reveal_ValidNodeAddr();
    assert i * NodeBlockSize() == s.outstandingBlockWrites[id].loc.addr as int;
    assert IT.IndirectionTable.IsLocAllocBitmap(s.blockAllocator.I().outstanding, i);
  }
  lemma lemmaBlockAllocatorFrozenSome(s: ImplVariables)
    requires s.Inv()
    requires s.Ready?
    ensures s.frozenIndirectionTable.lSome? ==> s.blockAllocator.frozen.lSome?
    decreases s
  {
    reveal_ConsistentBitmapInteral();
    reveal s.blockAllocator.Inv();
    reveal s.blockAllocator.I();
  }
}
Dafny program verifier did not attempt verification