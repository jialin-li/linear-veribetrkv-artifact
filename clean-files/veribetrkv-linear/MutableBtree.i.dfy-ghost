// MutableBtree.i.dfy
abstract module LMutableBtree {
    reveals Node, Key, Value
    reveals *
    reveals Key, Value, Node, MaxKeysPerLeaf, MaxChildren, DefaultValue, DefaultKey, WF, Interpretation
    reveals Full
    reveals IndexHeights, Height
    reveals FreeChildren, FreeNode
  type Key = Model.Keys.Element
  type Value = Model.Value
  type Node = Model.Node
  function method MaxKeysPerLeaf(): uint64
    ensures 2 < MaxKeysPerLeaf() as int < Uint64UpperBound() / 4
  function method MaxChildren(): uint64
    ensures 3 < MaxChildren() as int < Uint64UpperBound() / 4
  function method DefaultValue(): Value
  function method DefaultKey(): Key
  predicate WF(node: Node)
    decreases node
  {
    Model.WF(node) &&
    (node.Index? ==>
      0 < operator'cardinality?lseq(node.children) <= MaxChildren() as int &&
      (forall i: int {:trigger operator'subscript?lseq(node.children, i)} :: 
        0 <= i < operator'cardinality?lseq(node.children) ==>
          WF(operator'subscript?lseq(node.children, i))) &&
      lseq_has_all(node.children)) &&
    (node.Leaf? ==>
      true &&
      0 <= |node.keys| <= MaxKeysPerLeaf() as int)
  }
  function Interpretation(node: Node): map<Key, Value>
    requires WF(node)
    decreases node
  {
    assert Model.WF(node);
    Model.Interpretation(node)
  }
  method Route(keys: seq<Key>, needle: Key) returns (posplus1: uint64)
    requires |keys| < Uint64UpperBound() / 4
    requires Model.Keys.IsSorted(keys)
    ensures posplus1 as int == Model.Keys.LargestLte(keys, needle) + 1
    decreases keys, needle
  {
    var pos: int64 := Model.KeysImpl.ComputeLargestLteShared(keys, needle);
    posplus1 := (pos + 1) as uint64;
  }
  method QueryLeaf(node: Node, needle: Key) returns (result: Option<Value>)
    requires WF(node)
    requires node.Leaf?
    ensures result == MapLookupOption(Interpretation(node), needle)
    decreases node, needle
  {
    Model.reveal_Interpretation();
    assert Model.Keys.IsStrictlySorted(node.keys);
    assert Model.Keys.IsSorted(node.keys);
    var posplus1: uint64 := Route(node.keys, needle);
    if 1 <= posplus1 && seq_get(node.keys, posplus1 - 1) == needle {
      result := Some(seq_get(node.values, posplus1 - 1));
    } else {
      result := None;
    }
  }
  method QueryIndex(node: Node, needle: Key) returns (result: Option<Value>)
    requires WF(node)
    requires node.Index?
    ensures result == MapLookupOption(Interpretation(node), needle)
    decreases node, 0
  {
    Model.reveal_Interpretation();
    Model.reveal_AllKeys();
    var posplus1: uint64 := Route(node.pivots, needle);
    result := Query(lseq_peek(node.children, posplus1), needle);
    if result.Some? {
      Model.InterpretationDelegation(node, needle);
    }
  }
  method Query(node: Node, needle: Key) returns (result: Option<Value>)
    requires WF(node)
    ensures result == MapLookupOption(Interpretation(node), needle)
    decreases node, 1
  {
    match node {
      case Leaf(_v0, _v1) =>
        result := QueryLeaf(node, needle);
      case Index(_v2, _v3) =>
        result := QueryIndex(node, needle);
    }
  }
  method Empty(node: Node) returns (result: bool)
    requires WF(node)
    ensures result == (|Interpretation(node)| == 0)
    decreases node
  {
    if node.Leaf? {
      Model.reveal_Interpretation();
      result := 0 == seq_length(node.keys);
      assert !result ==> node.keys[0] in Interpretation(node);
    } else {
      Model.IndexesNonempty(node);
      result := false;
    }
  }
  method MinKeyInternal(node: Node) returns (result: Key)
    requires WF(node)
    requires 0 < |Interpretation(node)|
    ensures result == Model.MinKey(node)
    decreases node
  {
    if node.Leaf? {
      assert 0 < |node.keys| by {
        Model.reveal_Interpretation();
      }
      assert node.keys[0] == node.keys[..|node.keys|][0];
      result := seq_get(node.keys, 0);
    } else {
      assert WF(operator'subscript?lseq(node.children, 0));
      Model.ChildOfIndexNonempty(node, 0);
      result := MinKeyInternal(lseq_peek(node.children, 0));
    }
  }
  method MinKey(node: Node) returns (result: Key)
    requires WF(node)
    requires 0 < |Interpretation(node)|
    ensures result in Interpretation(node)
    ensures forall key: Element {:trigger lte(result, key)} {:trigger key in Interpretation(node)} | key in Interpretation(node) :: lte(result, key)
    decreases node
  {
    result := MinKeyInternal(node);
    Model.MinKeyProperties(node);
  }
  method MaxKeyInternal(node: Node) returns (result: Key)
    requires WF(node)
    requires 0 < |Interpretation(node)|
    ensures result == Model.MaxKey(node)
    decreases node
  {
    if node.Leaf? {
      assert 0 < |node.keys| by {
        Model.reveal_Interpretation();
      }
      var nkeys: uint64 := seq_length(node.keys) as uint64;
      assert node.keys[nkeys - 1] == node.keys[..nkeys][nkeys - 1];
      result := seq_get(node.keys, nkeys - 1);
    } else {
      var nchildren: uint64 := lseq_length_uint64(node.children);
      assert WF(operator'subscript?lseq(node.children, nchildren as nat - 1));
      Model.ChildOfIndexNonempty(node, nchildren as nat - 1);
      result := MaxKeyInternal(lseq_peek(node.children, nchildren - 1));
    }
  }
  method MaxKey(node: Node) returns (result: Key)
    requires WF(node)
    requires 0 < |Interpretation(node)|
    ensures result in Interpretation(node)
    ensures forall key: Element {:trigger lte(key, result)} {:trigger key in Interpretation(node)} | key in Interpretation(node) :: lte(key, result)
    decreases node
  {
    result := MaxKeyInternal(node);
    Model.MaxKeyProperties(node);
  }
  method EmptyTree() returns (root: Node)
    ensures WF(root)
    ensures Interpretation(root) == map[]
    ensures root.Leaf?
  {
    var rootkeys: seq<seq<NativeTypes.byte>> := seq_empty();
    var rootvalues: seq<Value> := seq_empty();
    root := Model.Leaf(rootkeys, rootvalues);
    Model.reveal_Interpretation();
  }
  predicate method Full(node: Node)
    requires WF(node)
    decreases node
  {
    match node {
      case Leaf(keys, _v4) =>
        seq_length(keys) == MaxKeysPerLeaf()
      case Index(_v5, children) =>
        lseq_length_as_uint64(children) == MaxChildren()
    }
  }
  method SplitLeaf(node: Node, nleft: uint64, ghost pivot: Key)
      returns (left: Node, right: Node)
    requires WF(node)
    requires node.Leaf?
    requires 0 < nleft as int < |node.keys|
    requires Model.Keys.lt(node.keys[nleft - 1], pivot)
    requires Model.Keys.lte(pivot, node.keys[nleft])
    ensures WF(left)
    ensures WF(right)
    ensures Model.SplitLeaf(node, left, right, pivot)
    ensures |left.keys| == nleft as int
    decreases node, nleft, pivot
  {
    ghost var nkeys: int := |node.keys|;
    Model.Keys.StrictlySortedSubsequence(node.keys, nleft as int, nkeys);
    Model.Keys.StrictlySortedSubsequence(node.keys, 0, nleft as int);
    Model.Keys.IsStrictlySortedImpliesLt(node.keys, nleft as int - 1, nleft as int);
    assert node.keys[nleft .. nkeys] == node.keys[..nkeys][nleft .. nkeys];
    var nright: uint64 := seq_length(node.keys) as uint64 - nleft;
    var Leaf(keys: seq<Key>, values: seq<Value>) := node;
    var leftKeys: seq<Key> := AllocAndCopy(keys, 0, nleft);
    var rightKeys: seq<Key> := AllocAndCopy(keys, nleft, nleft + nright);
    var leftValues: seq<Value> := AllocAndCopy(values, 0, nleft);
    var rightValues: seq<Value> := AllocAndCopy(values, nleft, nleft + nright);
    left := Model.Leaf(leftKeys, leftValues);
    right := Model.Leaf(rightKeys, rightValues);
    var _: () := seq_free(keys);
    var _: () := seq_free(values);
  }
  function IndexHeights(node: Node): seq<int>
    requires Model.WF(node)
    requires node.Index?
    decreases node, 0
  {
    seq(operator'cardinality?lseq(node.children), (i: int) requires 0 <= i < operator'cardinality?lseq(node.children) => Height(operator'subscript?lseq(node.children, i)))
  }
  function {:opaque} {:fuel 0, 0} Height(node: Node): nat
    requires Model.WF(node)
    ensures node.Leaf? ==> Height(node) == 0
    decreases node, 1
  {
    if node.Leaf? then
      0
    else
      ghost var heights: seq<int> := IndexHeights(node); seqMax(heights) + 1
  }
  lemma  SubIndexHeight(node: Node, from: nat, to: nat)
    requires Model.WF(node)
    requires node.Index?
    requires 0 <= from < to <= operator'cardinality?lseq(node.children)
    ensures Model.WF(Model.SubIndex(node, from, to))
    ensures Height(Model.SubIndex(node, from, to)) <= Height(node)
    decreases node, from, to
  {
    Model.SubIndexPreservesWF(node, from, to);
    ghost var heights: seq<int> := IndexHeights(node);
    reveal_Height();
    assert IndexHeights(Model.SubIndex(node, from, to)) == heights[from .. to];
    SubseqMax(heights, from, to);
  }
  method SplitIndex(node: Node, nleft: uint64)
      returns (left: Node, right: Node, pivot: Key)
    requires WF(node)
    requires node.Index?
    requires 2 <= operator'cardinality?lseq(node.children)
    requires 0 < nleft as nat < operator'cardinality?lseq(node.children)
    ensures WF(left)
    ensures WF(right)
    ensures Model.SplitIndex(node, left, right, pivot)
    ensures operator'cardinality?lseq(left.children) == nleft as nat
    ensures pivot == node.pivots[nleft - 1]
    ensures Height(left) <= Height(node)
    ensures Height(right) <= Height(node)
    decreases node, nleft
  {
    assert nleft as nat < operator'cardinality?lseq(node.children) == lseq_length(node.children);
    var len: uint64 := lseq_length_uint64(node.children);
    var nright: uint64 := len - nleft;
    var Index(pivots: seq<Key>, children: lseq<Node>) := node;
    pivot := seq_get(pivots, nleft - 1);
    assert 0 <= nleft - 1;
    var leftPivots: seq<Key> := AllocAndCopy(pivots, 0, nleft - 1);
    var rightPivots: seq<Key> := AllocAndCopy(pivots, nleft, nleft + nright - 1);
    var leftChildren: lseq<Node>, rightChildren: lseq<Node>;
    children, leftChildren := AllocAndMoveLseq(children, 0, nleft);
    children, rightChildren := AllocAndMoveLseq(children, nleft, nleft + nright);
    left := Model.Index(leftPivots, leftChildren);
    right := Model.Index(rightPivots, rightChildren);
    ImagineInverse(left.children);
    assert lseqs(right.children) == lseqs(node.children)[operator'cardinality?lseq(left.children) .. operator'cardinality?lseq(node.children)];
    ImagineInverse(right.children);
    assert Model.AllKeysBelowBound(node, nleft as int - 1);
    assert Model.AllKeysAboveBound(node, nleft as int);
    Model.SplitIndexPreservesWF(node, left, right, pivot);
    var _: () := seq_free(pivots);
    lseq_free(children);
    SubIndexHeight(node, 0, nleft as nat);
    SubIndexHeight(node, nleft as nat, nleft as nat + nright as nat);
  }
  method SplitNode(node: Node)
      returns (left: Node, right: Node, pivot: Key)
    requires WF(node)
    requires Full(node)
    ensures WF(left)
    ensures WF(right)
    ensures !Full(left)
    ensures !Full(right)
    ensures Model.SplitNode(node, left, right, pivot)
    ensures pivot in Model.AllKeys(node)
    ensures Height(left) <= Height(node)
    ensures Height(right) <= Height(node)
    decreases node
  {
    if node.Leaf? {
      var boundary: uint64 := seq_length(node.keys) / 2;
      pivot := seq_get(node.keys, boundary);
      Model.Keys.IsStrictlySortedImpliesLt(node.keys, boundary as int - 1, boundary as int);
      left, right := SplitLeaf(node, boundary, pivot);
    } else {
      var len: uint64 := lseq_length_uint64(node.children);
      var boundary: uint64 := len / 2;
      left, right, pivot := SplitIndex(node, boundary);
    }
    Model.reveal_AllKeys();
  }
  method SplitChildOfIndex(node: Node, childidx: uint64) returns (splitNode: Node)
    requires WF(node)
    requires node.Index?
    requires !Full(node)
    requires 0 <= childidx as nat < operator'cardinality?lseq(node.children)
    requires Full(operator'subscript?lseq(node.children, childidx as nat))
    ensures splitNode.Index?
    ensures Model.SplitChildOfIndex(node, splitNode, childidx as int)
    ensures WF(splitNode)
    ensures !Full(operator'subscript?lseq(splitNode.children, childidx as nat))
    ensures !Full(operator'subscript?lseq(splitNode.children, childidx as nat + 1))
    ensures splitNode.pivots[childidx] in Model.AllKeys(operator'subscript?lseq(node.children, childidx as nat))
    ensures Height(splitNode) <= Height(node)
    decreases node, childidx
  {
    var Index(pivots: seq<Key>, children: lseq<Node>) := node;
    var origChild: Node;
    children, origChild := lseq_take(children, childidx);
    var left: Node, right: Node;
    var pivot: Key;
    left, right, pivot := SplitNode(origChild);
    pivots := InsertSeq(pivots, pivot, childidx);
    children := lseq_give(children, childidx, left);
    children := InsertLSeq(children, right, childidx + 1);
    splitNode := Model.Index(pivots, children);
    assert Model.OpaquePartOfSplitChildOfIndex(node, splitNode, childidx as nat) by {
      Model.reveal_OpaquePartOfSplitChildOfIndex();
    }
    Model.SplitChildOfIndexPreservesWF(node, splitNode, childidx as int);
    ghost var wit: seq<int> := seq(operator'cardinality?lseq(splitNode.children), (i: int) requires 0 <= i < operator'cardinality?lseq(splitNode.children) => if i <= childidx as nat then i else i - 1);
    SeqMaxCorrespondence(IndexHeights(node), IndexHeights(splitNode), wit);
    assert Height(splitNode) <= Height(node) by {
      reveal_Height();
    }
  }
  method InsertLeaf(node: Node, key: Key, value: Value)
      returns (n2: Node, oldvalue: Option<Value>)
    requires WF(node)
    requires node.Leaf?
    requires !Full(node)
    ensures n2 == Model.InsertLeaf(node, key, value)
    ensures WF(n2)
    ensures Model.Interpretation(n2) == Model.Interpretation(node)[key := value]
    ensures Model.AllKeys(n2) == Model.AllKeys(node) + {key}
    ensures oldvalue == MapLookupOption(Interpretation(node), key)
    decreases node, key
  {
    var Leaf(keys: seq<Key>, values: seq<Value>) := node;
    var pos: int64 := Model.KeysImpl.ComputeLargestLteShared(keys, key);
    if 0 <= pos && seq_get(keys, pos as uint64) == key {
      oldvalue := Some(seq_get(values, pos as uint64));
      values := seq_set(values, pos as uint64, value);
    } else {
      oldvalue := None;
      keys := InsertSeq(keys, key, (pos + 1) as uint64);
      Model.Keys.reveal_IsStrictlySorted();
      values := InsertSeq(values, value, (pos + 1) as uint64);
    }
    n2 := Model.Leaf(keys, values);
    Model.InsertLeafIsCorrect(node, key, value);
    Model.reveal_Interpretation();
  }
  lemma  ChildrenAreShorter(parent: Node, childidx: nat)
    requires WF(parent)
    requires parent.Index?
    requires 0 <= childidx < operator'cardinality?lseq(parent.children)
    ensures Height(operator'subscript?lseq(parent.children, childidx)) < Height(parent)
    decreases parent, childidx
  {
    ghost var child: Node := operator'subscript?lseq(parent.children, childidx);
    assert IndexHeights(parent)[childidx] == Height(child);
    assert Height(child) in IndexHeights(parent);
    reveal_Height();
  }
  method InsertIndex(node: Node, key: Key, value: Value)
      returns (n2: Node, oldvalue: Option<Value>)
    requires WF(node)
    requires node.Index?
    requires !Full(node)
    ensures WF(n2)
    ensures Model.Interpretation(n2) == Model.Interpretation(node)[key := value]
    ensures Model.AllKeys(n2) <= Model.AllKeys(node) + {key}
    ensures oldvalue == MapLookupOption(Interpretation(node), key)
    decreases Height(node), 1
  {
    n2 := node;
    var childidx: uint64 := Route(n2.pivots, key);
    if Full(lseq_peek(n2.children, childidx)) {
      n2 := SplitChildOfIndex(n2, childidx);
      Model.SplitChildOfIndexPreservesWF(node, n2, childidx as nat);
      Model.SplitChildOfIndexPreservesInterpretation(node, n2, childidx as nat);
      Model.SplitChildOfIndexPreservesAllKeys(node, n2, childidx as nat);
      assert n2.pivots[childidx] in Model.AllKeys(node) by {
        Model.reveal_AllKeys();
      }
      var t: int32 := Model.KeysImpl.cmp(seq_get(n2.pivots, childidx), key);
      if t <= 0 {
        childidx := childidx + 1;
        forall i: int {:trigger n2.pivots[i]} | childidx as int - 1 < i < |n2.pivots|
          ensures lt(key, n2.pivots[i])
        {
          assert n2.pivots[i] == node.pivots[i - 1];
        }
      }
      Model.Keys.LargestLteIsUnique(n2.pivots, key, childidx as int - 1);
      assert Interpretation(n2) == Interpretation(node);
    }
    ghost var preparedNode: Node := n2;
    assert Height(preparedNode) <= Height(node);
    assert Interpretation(preparedNode) == Interpretation(node);
    var Index(pivots: seq<Key>, children: lseq<Node>) := n2;
    var childNode: Node;
    children, childNode := lseq_take(children, childidx);
    ghost var childNodeSnapshot: Node := childNode;
    assert Height(childNode) < Height(preparedNode) by {
      ChildrenAreShorter(preparedNode, childidx as nat);
    }
    assert Height(childNode) < Height(node);
    childNode, oldvalue := InsertNode(childNode, key, value);
    children := lseq_give(children, childidx, childNode);
    n2 := Model.Index(pivots, children);
    Model.RecursiveInsertIsCorrect(preparedNode, key, value, childidx as int, n2, operator'subscript?lseq(n2.children, childidx as int));
    if oldvalue.Some? {
      Model.InterpretationDelegation(preparedNode, key);
    } else {
      Model.reveal_Interpretation();
    }
  }
  method InsertNode(node: Node, key: Key, value: Value)
      returns (n2: Node, oldvalue: Option<Value>)
    requires WF(node)
    requires !Full(node)
    ensures WF(n2)
    ensures Model.Interpretation(n2) == Model.Interpretation(node)[key := value]
    ensures Model.AllKeys(n2) <= Model.AllKeys(node) + {key}
    ensures oldvalue == MapLookupOption(Interpretation(node), key)
    decreases Height(node), 2
  {
    if node.Leaf? {
      n2, oldvalue := InsertLeaf(node, key, value);
    } else {
      n2, oldvalue := InsertIndex(node, key, value);
    }
  }
  method Grow(root: Node) returns (newroot: Node)
    requires WF(root)
    requires Full(root)
    ensures WF(newroot)
    ensures newroot == Model.Grow(root)
    ensures !Full(newroot)
    decreases root
  {
    var pivots: seq<Key> := seq_alloc_init(0, DefaultKey());
    var children: lseq<Node> := lseq_alloc(1);
    children := lseq_give(children, 0, root);
    newroot := Model.Index(pivots, children);
    assert lseqs(children) == [root];
    ImagineInverse(children);
  }
  lemma  FullImpliesAllKeysNonEmpty(node: Node)
    requires WF(node)
    requires Full(node)
    ensures Model.AllKeys(node) != {}
    decreases node
  {
    if node.Leaf? {
      assert node.keys[0] in Model.AllKeys(node) by {
        Model.reveal_AllKeys();
      }
    } else {
      assert node.pivots[0] in Model.AllKeys(node) by {
        Model.reveal_AllKeys();
      }
    }
  }
  method Insert(root: Node, key: Key, value: Value)
      returns (newroot: Node, oldvalue: Option<Value>)
    requires WF(root)
    ensures WF(newroot)
    ensures Interpretation(newroot) == Interpretation(root)[key := value]
    ensures oldvalue == MapLookupOption(Interpretation(root), key)
    decreases root, key
  {
    if Full(root) {
      FullImpliesAllKeysNonEmpty(root);
      Model.GrowPreservesWF(root);
      newroot := Grow(root);
      Model.GrowPreservesInterpretation(root);
    } else {
      newroot := root;
    }
    assert Model.Interpretation(newroot) == Model.Interpretation(root);
    newroot, oldvalue := InsertNode(newroot, key, value);
  }
  function method FreeChildren(ghost a: seq<Node>, arr: lseq<Node>, i: uint64, len: uint64): ()
    requires len as int == operator'cardinality?lseq(arr) == |a|
    requires i <= len
    requires forall j: int {:trigger operator'in?lseq(arr, j)} | 0 <= j < operator'cardinality?lseq(arr) :: operator'in?lseq(arr, j) <==> j >= i as int
    requires forall j: int {:trigger a[j]} {:trigger operator'subscript?lseq(arr, j)} | i as int <= j < operator'cardinality?lseq(arr) :: WF(operator'subscript?lseq(arr, j)) && a[j] == operator'subscript?lseq(arr, j)
    decreases a, operator'cardinality?lseq(arr) - i as int
  {
    if i == len then
      lseq_free_fun(arr)
    else
      var arr'': lseq<Model.Node> := var (arr': lseq<Model.Node>, child: Model.Node) := lseq_take_fun(arr, i); var _: () := FreeNode(child); arr'; FreeChildren(a, arr'', i + 1, len)
  }
  function method FreeNode(node: Node): ()
    requires WF(node)
    decreases node
  {
    match node {
      case Leaf(keys, values) =>
        var _ := seq_free(keys);
        seq_free(values)
      case Index(pivots, children) =>
        var _ := seq_free(pivots);
        var len := lseq_length_as_uint64(children);
        FreeChildren(lseqs(children), children, 0, len)
    }
  }
  method CountElements(node: Node) returns (count: uint64)
    requires WF(node)
    requires Model.NumElements(node) < Uint64UpperBound()
    ensures count as nat == Model.NumElements(node)
    decreases node
  {
    if node.Leaf? {
      count := seq_length(node.keys);
    } else {
      ghost var inode: Model.Node := node;
      count := 0;
      ghost var icount: int := 0;
      var i: uint64 := 0;
      var len: uint64 := lseq_length_uint64(node.children);
      while i < len
        invariant i as int <= operator'cardinality?lseq(node.children)
        invariant icount == Model.NumElementsOfChildren(lseqs(inode.children)[..i])
        invariant icount < Uint64UpperBound()
        invariant count == icount as uint64
        decreases len as int - i as int
      {
        ghost var ichildcount: nat := Model.NumElements(lseqs(inode.children)[i]);
        assert lseqs(inode.children)[..i + 1][..i] == lseqs(inode.children)[..i];
        Model.NumElementsOfChildrenNotZero(inode);
        Model.NumElementsOfChildrenDecreases(lseqs(inode.children), (i + 1) as int);
        icount := icount + ichildcount;
        var childcount: uint64 := CountElements(lseq_peek(node.children, i));
        count := count + childcount;
        i := i + 1;
      }
      assert lseqs(inode.children)[..operator'cardinality?lseq(node.children)] == lseqs(inode.children);
    }
  }
}
Dafny program verifier did not attempt verification