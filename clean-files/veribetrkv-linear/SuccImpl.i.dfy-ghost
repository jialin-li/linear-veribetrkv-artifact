// SuccImpl.i.dfy
module SuccImpl {
  method composeGenerator(cache: CacheImpl.LMutCache, ref: BT.G.Reference, r: uint64, g: lOption<BGI.Generator>, ghost acc: seq<Bucket>, ghost bucket: Bucket, start: UI.RangeStart)
      returns (g': BGI.Generator)
    requires cache.Inv()
    requires cache.ptr(ref).Some?
    requires BT.WFNode(cache.I()[ref])
    requires r as nat < |cache.I()[ref].buckets|
    requires bucket == cache.I()[ref].buckets[r as nat]
    requires WFBucket(bucket)
    requires forall i: int {:trigger acc[i]} | 0 <= i < |acc| :: WFBucket(acc[i])
    requires g.lSome? <==> |acc| >= 1
    requires g.lSome? ==> g.value.Inv() && g.value.I() == BGM.GenFromBucketStackWithLowerBound(acc, start)
    ensures g'.Inv() && g'.I() == BGM.GenFromBucketStackWithLowerBound(acc + [bucket], start)
    decreases cache, ref, r, g, acc, bucket, start
  {
    var g2: BGI.Generator := cache.NodeBucketGen(ref, r, start);
    BGM.reveal_GenFromBucketStackWithLowerBound();
    match g {
      case lSome(g1) =>
        g' := BGI.Generator.GenCompose(g1, g2);
      case lNone() =>
        g' := g2;
    }
  }
  method getPathInternal(inout old_s: ImplVariables, io: DiskIOHandler, key: Key, ghost acc: seq<Bucket>, g: lOption<BGI.Generator>, start: UI.RangeStart, upTo: Option<Key>, maxToFind: uint64, ref: BT.G.Reference, counter: uint64, pivots: PivotTable, children: Option<seq<BT.G.Reference>>)
      returns (res: Option<UI.SuccResultList>, s: ImplVariables)
    requires old_s.Ready? && old_s.Inv()
    requires io.initialized()
    requires old_s.cache.ptr(ref).Some?
    requires BT.WFNode(old_s.cache.I()[ref])
    requires pivots == old_s.cache.I()[ref].pivotTable
    requires children == old_s.cache.I()[ref].children
    requires BoundedKey(pivots, key)
    requires ref in old_s.ephemeralIndirectionTable.graph
    requires maxToFind >= 1
    requires |acc| + counter as int < 18446744073709551616 - 1
    requires forall i: int {:trigger acc[i]} | 0 <= i < |acc| :: WFBucket(acc[i])
    requires g.lSome? <==> |acc| >= 1
    requires g.lSome? ==> g.value.Inv() && g.value.I() == BGM.GenFromBucketStackWithLowerBound(acc, start)
    modifies io
    ensures s.WFBCVars()
    ensures s.Ready?
    ensures s.cache.I() == old_s.cache.I()
    ensures (s.I(), IIO(io), res) == SuccModel.getPathInternal(old_s.I(), old(IIO(io)), key, old(acc), start, upTo, maxToFind as int, ref, counter, s.cache.I()[ref])
    decreases counter, 0
  {
    s := old_s;
    SuccModel.reveal_getPathInternal();
    var r: uint64 := Pivots.ComputeRoute(pivots, key);
    ghost var node: BT.G.Node := s.cache.I()[ref];
    ghost var bucket: Bucket := s.cache.I()[ref].buckets[r as nat];
    ghost var acc': seq<Bucket> := acc + [bucket];
    var upTo': Option<Key>;
    if pivots[r + 1].Max_Element? {
      upTo' := upTo;
    } else {
      var ub: Key := ComputeGetKey(pivots, r + 1);
      if upTo.Some? {
        var c: int32 := cmp(upTo.value, ub);
        var k: Key := if c < 0 then upTo.value else ub;
        upTo' := Some(k);
      } else {
        upTo' := Some(ub);
      }
    }
    if children.Some? {
      if counter == 0 {
        print "getPathInternal failure: count ran down\n";
        res := None;
        match g {
          case lSome(g1) =>
            g1.Free();
          case lNone() =>
        }
        assert (s.I(), IIO(io), res) == SuccModel.getPathInternal(old_s.I(), old(IIO(io)), key, old(acc), start, upTo, maxToFind as int, ref, counter, node);
      } else {
        BookkeepingModel.lemmaChildInGraph(s.I(), ref, children.value[r]);
        var g': BGI.Generator := composeGenerator(s.cache, ref, r, g, acc, bucket, start);
        var _inout_tmp_0: ImplVariables;
        res, _inout_tmp_0 := getPath(inout s, io, key, acc', lSome(g'), start, upTo', maxToFind, children.value[r], counter - 1);
        s := _inout_tmp_0;
        assert (s.I(), IIO(io), res) == SuccModel.getPathInternal(old_s.I(), old(IIO(io)), key, old(acc), start, upTo, maxToFind as int, ref, counter, node);
      }
    } else {
      var g': BGI.Generator := composeGenerator(s.cache, ref, r, g, acc, bucket, start);
      var res0: UI.SuccResultList := BucketSuccessorLoopImpl.GetSuccessorInBucketStack(g', acc', maxToFind, start, upTo');
      res := Some(res0);
      assert (s.I(), IIO(io), res) == SuccModel.getPathInternal(old_s.I(), old(IIO(io)), key, old(acc), start, upTo, maxToFind as int, ref, counter, node);
    }
  }
  method getPath(inout old_s: ImplVariables, io: DiskIOHandler, key: Key, ghost acc: seq<Bucket>, g: lOption<BGI.Generator>, start: UI.RangeStart, upTo: Option<Key>, maxToFind: uint64, ref: BT.G.Reference, counter: uint64)
      returns (res: Option<UI.SuccResultList>, s: ImplVariables)
    requires old_s.Inv() && old_s.Ready?
    requires io.initialized()
    requires maxToFind >= 1
    requires ref in old_s.ephemeralIndirectionTable.graph
    requires forall i: int {:trigger acc[i]} | 0 <= i < |acc| :: WFBucket(acc[i])
    requires |acc| + counter as int < 18446744073709551616 - 1
    requires g.lSome? <==> |acc| >= 1
    requires g.lSome? ==> g.value.Inv() && g.value.I() == BGM.GenFromBucketStackWithLowerBound(acc, start)
    modifies io
    ensures s.WFBCVars()
    ensures (s.I(), IIO(io), res) == SuccModel.getPath(old_s.I(), old(IIO(io)), key, old(acc), start, upTo, maxToFind as int, ref, counter)
    decreases counter, 1
  {
    s := old_s;
    SuccModel.reveal_getPath();
    var incache: bool := s.cache.InCache(ref);
    if incache {
      var pivots: Pivots.PivotTable, children: Option<seq<BT.G.Reference>> := s.cache.GetNodeInfo(ref);
      var boundedkey: bool := ComputeBoundedKey(pivots, key);
      if boundedkey {
        var _inout_tmp_0: ImplVariables;
        res, _inout_tmp_0 := getPathInternal(inout s, io, key, acc, g, start, upTo, maxToFind, ref, counter, pivots, children);
        s := _inout_tmp_0;
        LruModel.LruUse(s.lru.Queue(), ref);
        var _inout_tmp_1: LinearLru;
        _inout_tmp_1 := s.lru.Use(inout s.lru, ref);
        s := s.(lru := _inout_tmp_1);
      } else {
        match g {
          case lSome(g1) =>
            g1.Free();
          case lNone() =>
        }
        print "getPath: look up key is not bounded in path nodes\n";
        res := None;
      }
    } else {
      match g {
        case lSome(g1) =>
          g1.Free();
        case lNone() =>
      }
      if CacheImpl.CacheCount(s.cache) + |s.outstandingBlockReads| as uint64 <= MaxCacheSizeUint64() - 1 {
        var _inout_tmp_2: ImplVariables;
        _inout_tmp_2 := PageInNodeReq(inout s, io, ref);
        s := _inout_tmp_2;
      } else {
        print "getPath: Can't page in anything because cache is full\n";
      }
      res := None;
    }
  }
  method doSucc(inout old_s: ImplVariables, io: DiskIOHandler, start: UI.RangeStart, maxToFind: uint64)
      returns (res: Option<UI.SuccResultList>, s: ImplVariables)
    requires old_s.Inv() && old_s.Ready?
    requires io.initialized()
    requires maxToFind >= 1
    modifies io
    ensures s.WFBCVars()
    ensures ValidDiskOp(diskOp(IIO(io))) && IDiskOp(diskOp(IIO(io))).jdop.NoDiskOp? && (res.Some? ==> BBC.Next(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, AdvanceOp(UI.SuccOp(start, res.value.results, res.value.end), false))) && (res.None? ==> IOModel.betree_next_dop(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop))
    decreases old_s, io, start, maxToFind
  {
    s := old_s;
    PBS.reveal_LookupUpperBound();
    var startKey: seq<NativeTypes.byte> := if start.NegativeInf? then [] else start.key;
    SuccModel.lemmaGetPathResult(old_s.I(), IIO(io), startKey, [], [], start, None, maxToFind as int, BT.G.Root(), 40);
    var _inout_tmp_0: ImplVariables;
    res, _inout_tmp_0 := getPath(inout s, io, startKey, [], lNone, start, None, maxToFind, BT.G.Root(), 40);
    s := _inout_tmp_0;
  }
}
Dafny program verifier did not attempt verification