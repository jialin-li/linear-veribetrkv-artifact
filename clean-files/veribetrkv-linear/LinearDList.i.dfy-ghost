// LinearDList.i.dfy
module DList {
  export
    reveals Node, DList
    reveals DList.MaybePtr
  datatype Node<A> = Node(data: Option<A>, next: uint64, prev: uint64)
  datatype DList<A> = DList(nodes: seq<Node<A>>, freeStack: uint64, ghost s: seq<A>, ghost f: seq<int>, ghost g: seq<int>) {
    predicate Inv()
      decreases this
    {
      Invs(this.nodes, this.freeStack, this.s, this.f, this.g)
    }
    function Seq(): seq<A>
      decreases this
    {
      this.s
    }
    function ValidPtr(p: uint64): (b: bool)
      ensures b ==> p != 0
      decreases this, p
    {
      0 < p as int < |this.g| &&
      this.g[p] >= 0
    }
    predicate MaybePtr(p: uint64)
      decreases this, p
    {
      p == 0 || this.ValidPtr(p)
    }
    function Index(p: uint64): (i: int)
      ensures this.Inv() && this.ValidPtr(p) ==> 0 <= i < |this.Seq()|
      ensures this.Inv() && p == 0 ==> i == -1
      decreases this, p
    {
      if this.Inv() && this.MaybePtr(p) then
        this.g[p]
      else
        0
    }
    function IndexHi(p: uint64): (i: int)
      ensures this.Inv() && this.ValidPtr(p) ==> i == this.Index(p)
      ensures this.Inv() && p == 0 ==> i == |this.Seq()|
      decreases this, p
    {
      if this.Inv() && this.ValidPtr(p) then
        this.g[p]
      else
        |this.s|
    }
    function method Get(p: uint64): (a: A)
      requires this.Inv()
      requires this.ValidPtr(p)
      ensures a == this.Seq()[this.Index(p)]
      decreases this, p
    {
      seq_get(this.nodes, p).data.value
    }
    function method Next(p: uint64): (p': uint64)
      requires this.Inv()
      requires this.MaybePtr(p)
      ensures this.MaybePtr(p')
      ensures p == 0 && |this.Seq()| > 0 ==> this.Index(p') == 0
      ensures p == 0 && |this.Seq()| == 0 ==> p' == 0
      ensures p != 0 && this.Index(p) + 1 < |this.Seq()| ==> this.Index(p') == this.Index(p) + 1
      ensures p != 0 && this.Index(p) + 1 == |this.Seq()| ==> p' == 0
      decreases this, p
    {
      seq_get(this.nodes, p).next
    }
    function method Prev(p: uint64): (p': uint64)
      requires this.Inv()
      requires this.MaybePtr(p)
      ensures this.MaybePtr(p')
      ensures p == 0 && |this.Seq()| > 0 ==> this.Index(p') == |this.Seq()| - 1
      ensures p == 0 && |this.Seq()| == 0 ==> p' == 0
      ensures p != 0 && this.Index(p) > 0 ==> this.Index(p') == this.Index(p) - 1
      ensures p != 0 && this.Index(p) == 0 == |this.Seq()| ==> p' == 0
      decreases this, p
    {
      seq_get(this.nodes, p).prev
    }
    static method BuildFreeStack(inout old_a: seq<Node<A>>, k: uint64) returns (a: seq<Node<A>>)
      requires 0 < k as nat <= |old_a|
      ensures |a| == |old_a|
      ensures forall i: int {:trigger old_a[i]} {:trigger a[i]} :: 0 <= i < k as nat ==> a[i] == old_a[i]
      ensures forall i: int {:trigger a[i]} :: k as nat <= i < |old_a| <= 18446744073709551615 ==> a[i] == Node(None, i as uint64 - 1, 0)
      decreases old_a, k
    {
      a := old_a;
      var n: uint64 := k;
      shared_seq_length_bound(a);
      while n < seq_length(a)
        invariant k as int <= n as int <= |a|
        invariant |a| == |old_a|
        invariant forall i: int {:trigger old_a[i]} {:trigger a[i]} :: 0 <= i < k as nat ==> a[i] == old_a[i]
        invariant forall i: int {:trigger a[i]} :: k as nat <= i < n as nat ==> a[i] == Node(None, i as uint64 - 1, 0)
        decreases seq_length(a) as int - n as int
      {
        var _inout_tmp_0: seq<Node<A>>;
        _inout_tmp_0 := mut_seq_set(inout a, n, Node(None, n - 1, 0));
        a := _inout_tmp_0;
        n := n + 1;
      }
    }
    static method Alloc(initial_len: uint64) returns (l: DList<A>)
      requires initial_len > 0
      ensures l.Inv()
      ensures l.Seq() == []
      decreases initial_len
    {
      var nodes: seq<Node<A>> := seq_alloc<Node<A>>(initial_len, Node(None, 0, 0));
      var _inout_tmp_0: seq<Node<A>>;
      _inout_tmp_0 := BuildFreeStack(inout nodes, 1);
      nodes := _inout_tmp_0;
      l := DList(nodes, initial_len - 1, [], [], seq(initial_len as nat, (p: int) => if p == 0 then sentinel else unused));
    }
    method Free()
      decreases this
    {
      var DList(nodes: seq<Node<A>>, freeStack: uint64, s: seq<A>, f: seq<int>, g: seq<int>) := this;
      var _: () := seq_free(nodes);
    }
    static predicate PointerToIndexUnchanged<A>(old_l: DList<A>, l: DList<A>, x: uint64)
      requires old_l.ValidPtr(x)
      decreases old_l, l, x
    {
      l.ValidPtr(x) &&
      l.g[x] == old_l.g[x]
    }
    method Expand(inout old_self: DList<A>) returns (self: DList<A>)
      requires old_self.Inv()
      ensures self.Inv()
      ensures self.s == old_self.s
      ensures forall x: uint64 {:trigger PointerToIndexUnchanged(old_self, self, x)} {:trigger old_self.ValidPtr(x)} :: old_self.ValidPtr(x) ==> PointerToIndexUnchanged(old_self, self, x)
      ensures self.freeStack != 0 && self.nodes[self.freeStack].data.None?
      decreases this, old_self
    {
      self := old_self;
      shared_seq_length_bound(self.nodes);
      var len: uint64 := seq_length(self.nodes);
      shared_seq_length_bound(self.nodes);
      var len': uint64 := if len < 9223372036854775807 then len + len else len + 1;
      var s: uint64 := self.freeStack;
      var _inout_tmp_0: seq<Node<A>>;
      _inout_tmp_0 := SeqResizeMut(inout self.nodes, len', Node(None, s, 0));
      self := self.(nodes := _inout_tmp_0);
      var _inout_tmp_1: seq<Node<A>>;
      _inout_tmp_1 := BuildFreeStack(inout self.nodes, len + 1);
      self := self.(nodes := _inout_tmp_1);
      var _inout_tmp_2: uint64 := len' - 1;
      self := self.(freeStack := _inout_tmp_2);
      ghost var _inout_tmp_3: seq<int> := seq(|self.nodes|, (i: int) requires 0 <= i < |self.nodes| => if i < |self.g| then self.g[i] else unused);
      self := self.(g := _inout_tmp_3);
    }
    method Remove(inout old_self: DList<A>, p: uint64) returns (self: DList<A>)
      requires old_self.Inv()
      requires old_self.ValidPtr(p)
      ensures self.Inv()
      ensures self.Seq() == old_self.Seq()[..old_self.Index(p)] + old_self.Seq()[old_self.Index(p) + 1..]
      ensures forall x: uint64 {:trigger old_self.Index(x)} {:trigger self.Index(x)} {:trigger self.ValidPtr(x)} {:trigger old_self.ValidPtr(x)} :: (x != p && old_self.ValidPtr(x) ==> self.ValidPtr(x)) && (x != p && old_self.ValidPtr(x) ==> self.Index(x) == old_self.Index(x) - if old_self.Index(x) < old_self.Index(p) then 0 else 1)
      decreases this, old_self, p
    {
      self := old_self;
      ghost var index: int := self.g[p];
      ghost var s': seq<A> := seq(|self.s| - 1, (x: int) requires 0 <= x < |self.s| - 1 => if x < index then self.s[x] else self.s[x + 1]);
      ghost var f': seq<int> := seq(|self.f| - 1, (x: int) requires 0 <= x < |self.f| - 1 => if x < index then self.f[x] else self.f[x + 1]);
      ghost var g': seq<int> := seq(|self.g|, (x: int) requires 0 <= x < |self.g| => if self.g[x] == index then unused else if self.g[x] > index then self.g[x] - 1 else self.g[x]);
      var freeStack: uint64 := self.freeStack;
      var node: Node<A> := seq_get(self.nodes, p);
      var node_prev: Node<A> := seq_get(self.nodes, node.prev);
      var _inout_tmp_0: seq<Node<A>>;
      _inout_tmp_0 := mut_seq_set(inout self.nodes, node.prev, node_prev.(next := node.next));
      self := self.(nodes := _inout_tmp_0);
      var node_next: Node<A> := seq_get(self.nodes, node.next);
      var _inout_tmp_1: seq<Node<A>>;
      _inout_tmp_1 := mut_seq_set(inout self.nodes, node.next, node_next.(prev := node.prev));
      self := self.(nodes := _inout_tmp_1);
      var _inout_tmp_2: seq<Node<A>>;
      _inout_tmp_2 := mut_seq_set(inout self.nodes, p, Node(None, freeStack, 0));
      self := self.(nodes := _inout_tmp_2);
      var _inout_tmp_3: uint64 := p;
      self := self.(freeStack := _inout_tmp_3);
      ghost var _inout_tmp_4: seq<A> := s';
      self := self.(s := _inout_tmp_4);
      ghost var _inout_tmp_5: seq<int> := f';
      self := self.(f := _inout_tmp_5);
      ghost var _inout_tmp_6: seq<int> := g';
      self := self.(g := _inout_tmp_6);
    }
    method {:timeLimitMultiplier 3}  InsertAfter(inout old_self: DList<A>, p: uint64, a: A)
        returns (p': uint64, self: DList<A>)
      requires old_self.Inv()
      requires old_self.MaybePtr(p)
      ensures self.Inv()
      ensures self.Seq() == old_self.Seq()[..old_self.Index(p) + 1] + [a] + old_self.Seq()[old_self.Index(p) + 1..]
      ensures self.ValidPtr(p') && self.Index(p') == old_self.Index(p) + 1
      ensures forall x: uint64 {:trigger old_self.Index(x)} {:trigger self.Index(x)} {:trigger self.ValidPtr(x)} {:trigger old_self.ValidPtr(x)} :: (old_self.ValidPtr(x) ==> self.ValidPtr(x)) && (old_self.ValidPtr(x) ==> self.Index(x) == old_self.Index(x) + if old_self.Index(x) <= old_self.Index(p) then 0 else 1)
      decreases this, old_self, p
    {
      self := old_self;
      p' := self.freeStack;
      var freeNode: Node<A> := seq_get(self.nodes, p');
      if p' == 0 || freeNode.data.Some? {
        var _inout_tmp_0: DList<A>;
        _inout_tmp_0 := self.Expand(inout self);
        self := _inout_tmp_0;
        p' := self.freeStack;
        freeNode := seq_get(self.nodes, p');
      }
      ghost var selfBefore: DList<A> := self;
      ghost var index: int := self.g[p];
      ghost var index': int := index + 1;
      ghost var _inout_tmp_1: seq<A> := seq(|selfBefore.s| + 1, (x: int) requires 0 <= x <= |selfBefore.s| => if x == index' then a else if x < index' then selfBefore.s[x] else selfBefore.s[x - 1]);
      self := self.(s := _inout_tmp_1);
      ghost var _inout_tmp_2: seq<int> := seq(|selfBefore.f| + 1, (x: int) requires 0 <= x <= |selfBefore.f| => if x == index' then p' as int else if x < index' then selfBefore.f[x] else selfBefore.f[x - 1]);
      self := self.(f := _inout_tmp_2);
      ghost var _inout_tmp_3: seq<int> := seq(|self.g|, (x: int) requires 0 <= x < |self.g| => if x == p' as int then index' else if self.g[x] > index then self.g[x] + 1 else self.g[x]);
      self := self.(g := _inout_tmp_3);
      var node: Node<A> := seq_get(self.nodes, p);
      var node': Node<A> := Node(Some(a), node.next, p);
      var _inout_tmp_4: seq<Node<A>>;
      _inout_tmp_4 := mut_seq_set(inout self.nodes, p, node.(next := p'));
      self := self.(nodes := _inout_tmp_4);
      var node_next: Node<A> := seq_get(self.nodes, node.next);
      var _inout_tmp_5: seq<Node<A>>;
      _inout_tmp_5 := mut_seq_set(inout self.nodes, node.next, node_next.(prev := p'));
      self := self.(nodes := _inout_tmp_5);
      var _inout_tmp_6: seq<Node<A>>;
      _inout_tmp_6 := mut_seq_set(inout self.nodes, p', node');
      self := self.(nodes := _inout_tmp_6);
      var _inout_tmp_7: uint64 := freeNode.next;
      self := self.(freeStack := _inout_tmp_7);
    }
    method {:timeLimitMultiplier 3}  InsertBefore(inout old_self: DList<A>, p: uint64, a: A)
        returns (p': uint64, self: DList<A>)
      requires old_self.Inv()
      requires old_self.MaybePtr(p)
      ensures self.Inv()
      ensures self.Seq() == old_self.Seq()[..old_self.IndexHi(p)] + [a] + old_self.Seq()[old_self.IndexHi(p)..]
      ensures self.ValidPtr(p') && self.Index(p') == old_self.IndexHi(p)
      ensures forall x: uint64 {:trigger old_self.Index(x)} {:trigger self.Index(x)} {:trigger self.ValidPtr(x)} {:trigger old_self.ValidPtr(x)} :: (old_self.ValidPtr(x) ==> self.ValidPtr(x)) && (old_self.ValidPtr(x) ==> self.Index(x) == old_self.Index(x) + if old_self.Index(x) < old_self.IndexHi(p) then 0 else 1)
      decreases this, old_self, p
    {
      self := old_self;
      p' := self.freeStack;
      var freeNode: Node<A> := seq_get(self.nodes, p');
      if p' == 0 || freeNode.data.Some? {
        var _inout_tmp_0: DList<A>;
        _inout_tmp_0 := self.Expand(inout self);
        self := _inout_tmp_0;
        p' := self.freeStack;
        freeNode := seq_get(self.nodes, p');
      }
      ghost var selfBefore: DList<A> := self;
      ghost var index': int := self.IndexHi(p);
      ghost var _inout_tmp_1: seq<A> := seq(|selfBefore.s| + 1, (x: int) requires 0 <= x <= |selfBefore.s| => if x == index' then a else if x < index' then selfBefore.s[x] else selfBefore.s[x - 1]);
      self := self.(s := _inout_tmp_1);
      ghost var _inout_tmp_2: seq<int> := seq(|selfBefore.f| + 1, (x: int) requires 0 <= x <= |selfBefore.f| => if x == index' then p' as int else if x < index' then selfBefore.f[x] else selfBefore.f[x - 1]);
      self := self.(f := _inout_tmp_2);
      ghost var _inout_tmp_3: seq<int> := seq(|self.g|, (x: int) requires 0 <= x < |self.g| => if x == p' as int then index' else if self.g[x] >= index' then self.g[x] + 1 else self.g[x]);
      self := self.(g := _inout_tmp_3);
      var node: Node<A> := seq_get(self.nodes, p);
      var node': Node<A> := Node(Some(a), p, node.prev);
      var _inout_tmp_4: seq<Node<A>>;
      _inout_tmp_4 := mut_seq_set(inout self.nodes, p, node.(prev := p'));
      self := self.(nodes := _inout_tmp_4);
      var node_prev: Node<A> := seq_get(self.nodes, node.prev);
      var _inout_tmp_5: seq<Node<A>>;
      _inout_tmp_5 := mut_seq_set(inout self.nodes, node.prev, node_prev.(next := p'));
      self := self.(nodes := _inout_tmp_5);
      var _inout_tmp_6: seq<Node<A>>;
      _inout_tmp_6 := mut_seq_set(inout self.nodes, p', node');
      self := self.(nodes := _inout_tmp_6);
      var _inout_tmp_7: uint64 := freeNode.next;
      self := self.(freeStack := _inout_tmp_7);
    }
    method Clone() returns (l': DList<A>)
      ensures l' == this
      decreases this
    {
      var DList(nodes: seq<Node<A>>, freeStack: uint64, s: seq<A>, f: seq<int>, g: seq<int>) := this;
      shared_seq_length_bound(nodes);
      var nodes': seq<Node<A>> := AllocAndCopy(nodes, 0, seq_length(nodes));
      l' := DList(nodes', freeStack, s, f, g);
    }
  }
  ghost const unused: int := -2
  ghost const sentinel: int := -1
  predicate Invs<A>(nodes: seq<Node<A>>, freeStack: uint64, s: seq<A>, f: seq<int>, g: seq<int>)
    decreases nodes, freeStack, s, f, g
  {
    |f| == |s| &&
    |g| == |nodes| &&
    |nodes| > 0 &&
    g[0] == sentinel &&
    0 <= freeStack as int < |nodes| &&
    (forall i: int {:trigger f[i]} :: 
      (0 <= i < |f| ==>
        0 < f[i]) &&
      (0 <= i < |f| ==>
        f[i] < |nodes|)) &&
    (forall i: int {:trigger g[f[i]]} :: 
      0 <= i < |f| ==>
        g[f[i]] == i) &&
    (forall p: int {:trigger nodes[p]} {:trigger g[p]} :: 
      (0 <= p < |g| ==>
        unused <= g[p]) &&
      (0 <= p < |g| ==>
        g[p] < |s|) &&
      (0 <= p < |g| ==>
        0 <= nodes[p].next as int) &&
      (0 <= p < |g| ==>
        nodes[p].next as int < |g|) &&
      (0 <= p < |g| ==>
        (g[p] >= 0 <==> nodes[p].data.Some?))) &&
    forall p: int {:trigger nodes[p]} {:trigger g[p]} :: 
      (0 <= p < |g| &&
      sentinel <= g[p] ==>
        g[p] == sentinel ==>
          p == 0) &&
      (0 <= p < |g| &&
      sentinel <= g[p] ==>
        0 <= g[p] ==>
          f[g[p]] == p &&
          nodes[p].data == Some(s[g[p]])) &&
      (0 <= p < |g| &&
      sentinel <= g[p] ==>
        nodes[p].next as int == if g[p] + 1 < |f| then f[g[p] + 1] else 0) &&
      (0 <= p < |g| &&
      sentinel <= g[p] ==>
        nodes[p].prev as int == if g[p] > 0 then f[g[p] - 1] else if g[p] == 0 || |f| == 0 then 0 else f[|f| - 1]) &&
      (0 <= p < |g| &&
      sentinel <= g[p] ==>
        nodes[p].prev as int < |nodes|)
  }
}
Dafny program verifier did not attempt verification