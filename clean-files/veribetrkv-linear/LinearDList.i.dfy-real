// LinearDList.i.dfy
module DList {
  export
    reveals Node, DList
    reveals DList.MaybePtr
  datatype Node<A> = Node(data: Option<A>, next: uint64, prev: uint64)
  datatype DList<A> = DList(nodes: seq<Node<A>>, freeStack: uint64, ghost s: seq<A>, ghost f: seq<int>, ghost g: seq<int>) {
    function method Get(p: uint64): (a: A)
    {
      seq_get(this.nodes, p).data.value
    }
    function method Next(p: uint64): (p': uint64)
    {
      seq_get(this.nodes, p).next
    }
    function method Prev(p: uint64): (p': uint64)
    {
      seq_get(this.nodes, p).prev
    }
    static method BuildFreeStack(inout old_a: seq<Node<A>>, k: uint64) returns (a: seq<Node<A>>)
    {
      a := old_a;
      var n: uint64 := k;
      shared_seq_length_bound(a);
      while n < seq_length(a)
      {
        var _inout_tmp_0: seq<Node<A>>;
        _inout_tmp_0 := mut_seq_set(inout a, n, Node(None, n - 1, 0));
        a := _inout_tmp_0;
        n := n + 1;
      }
    }
    static method Alloc(initial_len: uint64) returns (l: DList<A>)
    {
      var nodes: seq<Node<A>> := seq_alloc<Node<A>>(initial_len, Node(None, 0, 0));
      var _inout_tmp_0: seq<Node<A>>;
      _inout_tmp_0 := BuildFreeStack(inout nodes, 1);
      nodes := _inout_tmp_0;
      l := DList(nodes, initial_len - 1, [], [], seq(initial_len as nat, (p: int) => if p == 0 then sentinel else unused));
    }
    method Free()
    {
      var DList(nodes: seq<Node<A>>, freeStack: uint64, s: seq<A>, f: seq<int>, g: seq<int>) := this;
      var _: () := seq_free(nodes);
    }
    method Expand(inout old_self: DList<A>) returns (self: DList<A>)
    {
      self := old_self;
      shared_seq_length_bound(self.nodes);
      var len: uint64 := seq_length(self.nodes);
      shared_seq_length_bound(self.nodes);
      var len': uint64 := if len < 9223372036854775807 then len + len else len + 1;
      var s: uint64 := self.freeStack;
      var _inout_tmp_0: seq<Node<A>>;
      _inout_tmp_0 := SeqResizeMut(inout self.nodes, len', Node(None, s, 0));
      self := self.(nodes := _inout_tmp_0);
      var _inout_tmp_1: seq<Node<A>>;
      _inout_tmp_1 := BuildFreeStack(inout self.nodes, len + 1);
      self := self.(nodes := _inout_tmp_1);
      var _inout_tmp_2: uint64 := len' - 1;
      self := self.(freeStack := _inout_tmp_2);
    }
    method Remove(inout old_self: DList<A>, p: uint64) returns (self: DList<A>)
    {
      self := old_self;
      var freeStack: uint64 := self.freeStack;
      var node: Node<A> := seq_get(self.nodes, p);
      var node_prev: Node<A> := seq_get(self.nodes, node.prev);
      var _inout_tmp_0: seq<Node<A>>;
      _inout_tmp_0 := mut_seq_set(inout self.nodes, node.prev, node_prev.(next := node.next));
      self := self.(nodes := _inout_tmp_0);
      var node_next: Node<A> := seq_get(self.nodes, node.next);
      var _inout_tmp_1: seq<Node<A>>;
      _inout_tmp_1 := mut_seq_set(inout self.nodes, node.next, node_next.(prev := node.prev));
      self := self.(nodes := _inout_tmp_1);
      var _inout_tmp_2: seq<Node<A>>;
      _inout_tmp_2 := mut_seq_set(inout self.nodes, p, Node(None, freeStack, 0));
      self := self.(nodes := _inout_tmp_2);
      var _inout_tmp_3: uint64 := p;
      self := self.(freeStack := _inout_tmp_3);
    }
    method {:timeLimitMultiplier 3}  InsertAfter(inout old_self: DList<A>, p: uint64, a: A)
        returns (p': uint64, self: DList<A>)
    {
      self := old_self;
      p' := self.freeStack;
      var freeNode: Node<A> := seq_get(self.nodes, p');
      if p' == 0 || freeNode.data.Some? {
        var _inout_tmp_0: DList<A>;
        _inout_tmp_0 := self.Expand(inout self);
        self := _inout_tmp_0;
        p' := self.freeStack;
        freeNode := seq_get(self.nodes, p');
      }
      var node: Node<A> := seq_get(self.nodes, p);
      var node': Node<A> := Node(Some(a), node.next, p);
      var _inout_tmp_4: seq<Node<A>>;
      _inout_tmp_4 := mut_seq_set(inout self.nodes, p, node.(next := p'));
      self := self.(nodes := _inout_tmp_4);
      var node_next: Node<A> := seq_get(self.nodes, node.next);
      var _inout_tmp_5: seq<Node<A>>;
      _inout_tmp_5 := mut_seq_set(inout self.nodes, node.next, node_next.(prev := p'));
      self := self.(nodes := _inout_tmp_5);
      var _inout_tmp_6: seq<Node<A>>;
      _inout_tmp_6 := mut_seq_set(inout self.nodes, p', node');
      self := self.(nodes := _inout_tmp_6);
      var _inout_tmp_7: uint64 := freeNode.next;
      self := self.(freeStack := _inout_tmp_7);
    }
    method {:timeLimitMultiplier 3}  InsertBefore(inout old_self: DList<A>, p: uint64, a: A)
        returns (p': uint64, self: DList<A>)
    {
      self := old_self;
      p' := self.freeStack;
      var freeNode: Node<A> := seq_get(self.nodes, p');
      if p' == 0 || freeNode.data.Some? {
        var _inout_tmp_0: DList<A>;
        _inout_tmp_0 := self.Expand(inout self);
        self := _inout_tmp_0;
        p' := self.freeStack;
        freeNode := seq_get(self.nodes, p');
      }
      var node: Node<A> := seq_get(self.nodes, p);
      var node': Node<A> := Node(Some(a), p, node.prev);
      var _inout_tmp_4: seq<Node<A>>;
      _inout_tmp_4 := mut_seq_set(inout self.nodes, p, node.(prev := p'));
      self := self.(nodes := _inout_tmp_4);
      var node_prev: Node<A> := seq_get(self.nodes, node.prev);
      var _inout_tmp_5: seq<Node<A>>;
      _inout_tmp_5 := mut_seq_set(inout self.nodes, node.prev, node_prev.(next := p'));
      self := self.(nodes := _inout_tmp_5);
      var _inout_tmp_6: seq<Node<A>>;
      _inout_tmp_6 := mut_seq_set(inout self.nodes, p', node');
      self := self.(nodes := _inout_tmp_6);
      var _inout_tmp_7: uint64 := freeNode.next;
      self := self.(freeStack := _inout_tmp_7);
    }
    method Clone() returns (l': DList<A>)
    {
      var DList(nodes: seq<Node<A>>, freeStack: uint64, s: seq<A>, f: seq<int>, g: seq<int>) := this;
      shared_seq_length_bound(nodes);
      var nodes': seq<Node<A>> := AllocAndCopy(nodes, 0, seq_length(nodes));
      l' := DList(nodes', freeStack, s, f, g);
    }
  }
  ghost const unused: int := -2
  ghost const sentinel: int := -1
}
Dafny program verifier did not attempt verification