// QueryImpl.i.dfy
module QueryImpl {
  method {:timeLimitMultiplier 3}  queryIterate(inout old_s: ImplVariables, key: Key, msg: Message, ref: BT.G.Reference, io: DiskIOHandler, counter: uint64, ghost lookup: seq<BT.G.ReadOp>)
      returns (res: Option<Value>, s: ImplVariables)
    requires old_s.Inv()
    requires queryInv(old_s.I(), key, msg, ref, IIO(io), counter, lookup)
    requires !msg.Define?
    requires io.initialized()
    modifies io
    ensures s.WFBCVars()
    ensures ValidDiskOp(diskOp(IIO(io)))
    ensures IDiskOp(diskOp(IIO(io))).jdop.NoDiskOp?
    ensures res.Some? ==> BBC.Next(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, AdvanceOp(UI.GetOp(key, res.value), false))
    ensures res.None? ==> IOModel.betree_next_dop(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop)
    decreases counter
  {
    s := old_s;
    if counter == 0 {
      res := None;
      assert IOModel.noop(old_s.I(), s.I());
    } else {
      var incache: bool := s.cache.InCache(ref);
      if !incache {
        var _inout_tmp_0: ImplVariables;
        _inout_tmp_0 := PageInNodeReqOrMakeRoom(inout s, io, ref);
        s := _inout_tmp_0;
        res := None;
      } else {
        ghost var node: BT.G.Node := s.cache.I()[ref];
        assert s.cache.I() == old(s.cache.I());
        var pivots: Pivots.PivotTable, children: Option<seq<BT.G.Reference>> := s.cache.GetNodeInfo(ref);
        var boundedkey: bool := ComputeBoundedKey(pivots, key);
        if !boundedkey {
          res := None;
          assert IOModel.noop(old_s.I(), s.I());
        } else {
          ghost var oldIVars: BBC.Variables := s.I();
          LruModel.LruUse(s.lru.Queue(), ref);
          var _inout_tmp_2: LinearLru;
          _inout_tmp_2 := s.lru.Use(inout s.lru, ref);
          s := s.(lru := _inout_tmp_2);
          assert oldIVars == s.I();
          var r: uint64 := Pivots.ComputeRoute(pivots, key);
          ghost var bucket: Bucket := node.buckets[r];
          var kmtMsg: Option<Message> := s.cache.GetMessage(ref, r, key);
          var newmsg: Message := if kmtMsg.Some? then ValueMessage.Merge(msg, kmtMsg.value) else msg;
          ghost var newlookup: seq<BT.G.ReadOp> := new_lookup(lookup, ref, node);
          AugmentLookup(newlookup, lookup, ref, node, key, s.cache.I(), s.ephemeralIndirectionTable.graph);
          assert PBS.LookupVisitsWellMarshalledBuckets(newlookup, key) ==> BucketWellMarshalled(bucket);
          assert PBS.LookupVisitsWellMarshalledBuckets(newlookup, key) ==> PBS.LookupVisitsWellMarshalledBuckets(lookup, key) by {
            reveal_new_lookup();
          }
          if newmsg.Define? {
            res := Some(newmsg.value);
            assert BT.ValidQuery(BT.LookupQuery(key, res.value, newlookup));
            assert BBC.BetreeMove(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, AdvanceOp(UI.GetOp(key, res.value), false), BT.BetreeQuery(BT.LookupQuery(key, res.value, newlookup)));
            assert IOModel.stepsBetree(old_s.I(), s.I(), AdvanceOp(UI.GetOp(key, res.value), false), BT.BetreeQuery(BT.LookupQuery(key, res.value, newlookup)));
          } else {
            if children.Some? {
              BookkeepingModel.lemmaChildInGraph(s.I(), ref, children.value[r]);
              var _inout_tmp_1: ImplVariables;
              res, _inout_tmp_1 := queryIterate(inout s, key, newmsg, children.value[r], io, counter - 1, newlookup);
              s := _inout_tmp_1;
            } else {
              res := Some(ValueType.DefaultValue());
              assert BC.OpTransaction(old_s.I(), s.I(), PBS.BetreeStepOps(BT.BetreeQuery(BT.LookupQuery(key, res.value, newlookup))));
              assert BBC.BetreeMove(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, AdvanceOp(UI.GetOp(key, res.value), false), BT.BetreeQuery(BT.LookupQuery(key, res.value, newlookup)));
              assert IOModel.stepsBetree(old_s.I(), s.I(), AdvanceOp(UI.GetOp(key, res.value), false), BT.BetreeQuery(BT.LookupQuery(key, res.value, newlookup)));
            }
          }
        }
      }
    }
  }
  method query(inout old_s: ImplVariables, io: DiskIOHandler, key: Key)
      returns (res: Option<Value>, s: ImplVariables)
    requires old_s.Inv() && old_s.Ready?
    requires io.initialized()
    modifies io
    ensures s.WFBCVars()
    ensures ValidDiskOp(diskOp(IIO(io)))
    ensures IDiskOp(diskOp(IIO(io))).jdop.NoDiskOp?
    ensures res.Some? ==> BBC.Next(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, AdvanceOp(UI.GetOp(key, res.value), false))
    ensures res.None? ==> IOModel.betree_next_dop(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop)
    decreases old_s, io, key
  {
    s := old_s;
    var ref: Reference := BT.G.Root();
    var msg: Message := ValueMessage.IdentityMessage();
    var counter: uint64 := 40;
    var _inout_tmp_0: ImplVariables;
    res, _inout_tmp_0 := queryIterate(inout s, key, msg, ref, io, counter, []);
    s := _inout_tmp_0;
  }
}
Dafny program verifier did not attempt verification