// FlushImpl.i.dfy
module FlushImpl {
  method {:timeLimitMultiplier 2}  doFlush(inout old_s: ImplVariables, parentref: BT.G.Reference, slot: uint64, childref: BT.G.Reference)
      returns (s: ImplVariables)
    requires old_s.Inv()
    requires old_s.Ready?
    requires old_s.cache.ptr(childref).Some?
    requires parentref in old_s.ephemeralIndirectionTable.I().graph
    requires parentref in old_s.cache.I()
    requires old_s.cache.I()[parentref].children.Some?
    requires 0 <= slot as int < |old_s.cache.I()[parentref].children.value|
    requires old_s.cache.I()[parentref].children.value[slot] == childref
    requires childref in old_s.ephemeralIndirectionTable.I().graph
    requires |old_s.ephemeralIndirectionTable.I().graph| <= IT.MaxSize() - 2
    requires forall r: uint64 {:trigger r in old_s.ephemeralIndirectionTable.graph} | r in old_s.ephemeralIndirectionTable.graph :: r <= old_s.ephemeralIndirectionTable.refUpperBound
    ensures s.W()
    ensures s.Ready?
    ensures s.WriteAllocConditions()
    ensures s.I() == FlushModel.flush(old_s.I(), parentref, slot as int, childref, old_s.cache.I()[childref], old_s.ephemeralIndirectionTable.refUpperBound)
    ensures LruModel.I(s.lru.Queue()) == s.cache.I().Keys
    decreases old_s, parentref, slot, childref
  {
    s := old_s;
    ghost var refUpperBound: uint64 := s.ephemeralIndirectionTable.refUpperBound;
    var b: bool := false;
    if s.frozenIndirectionTable.lSome? {
      b := s.frozenIndirectionTable.value.HasEmptyLoc(parentref);
    }
    if b {
      print "giving up; flush can't run because frozen isn't written";
    } else {
      var bounded: bool := s.cache.NodeBoundedBucket(parentref, childref, slot);
      if bounded {
        ghost var parentI: BT.G.Node := s.cache.I()[parentref];
        ghost var childI: BT.G.Node := s.cache.I()[childref];
        var newparentBucket: MutBucket, newchild: Node := s.cache.NodePartialFlush(parentref, childref, slot);
        BookkeepingModel.lemmaChildrenConditionsOfNode(s.I(), childref);
        BookkeepingModel.lemmaChildrenConditionsOfNode(s.I(), parentref);
        BookkeepingModel.lemmaChildrenConditionsUpdateOfAllocBookkeeping(s.I(), newchild.children, parentI.children.value, slot as int, refUpperBound);
        BookkeepingModel.allocRefDoesntEqual(s.I(), newchild.children, parentref, refUpperBound);
        var newchildref: Option<BT.G.Reference>, _inout_tmp_3: ImplVariables := allocBookkeeping(inout s, newchild.children);
        s := _inout_tmp_3;
        if newchildref.None? {
          var _: () := FreeMutBucket(newparentBucket);
          var _: () := FreeNode(newchild);
          print "giving up; could not get parentref\n";
        } else {
          var _inout_tmp_0: LMutCache;
          _inout_tmp_0 := s.cache.Insert(inout s.cache, newchildref.value, newchild);
          s := s.(cache := _inout_tmp_0);
          var newparent_children: Option<seq<BT.G.Reference>>, _inout_tmp_1: LMutCache := s.cache.NodeUpdateSlot(inout s.cache, parentref, slot, newparentBucket, newchildref.value);
          s := s.(cache := _inout_tmp_1);
          var _inout_tmp_2: ImplVariables;
          _inout_tmp_2 := writeBookkeeping(inout s, parentref, newparent_children);
          s := _inout_tmp_2;
          assert LruModel.I(s.lru.Queue()) == s.cache.I().Keys;
        }
      } else {
        print "giving up; flush can't run because flushed keys are out of bound for its children";
      }
    }
  }
  method {:timeLimitMultiplier 2}  flush(inout old_s: ImplVariables, parentref: BT.G.Reference, slot: uint64, childref: BT.G.Reference)
      returns (s: ImplVariables)
    requires old_s.Inv()
    requires old_s.Ready?
    requires old_s.cache.ptr(childref).Some?
    requires parentref in old_s.ephemeralIndirectionTable.I().graph
    requires parentref in old_s.cache.I()
    requires old_s.cache.I()[parentref].children.Some?
    requires 0 <= slot as int < |old_s.cache.I()[parentref].children.value|
    requires old_s.cache.I()[parentref].children.value[slot] == childref
    requires childref in old_s.ephemeralIndirectionTable.I().graph
    requires |old_s.ephemeralIndirectionTable.I().graph| <= IT.MaxSize() - 2
    requires old_s.totalCacheSize() <= MaxCacheSize() - 1
    ensures s.WFBCVars() && s.Ready?
    ensures IOModel.betree_next(old_s.I(), s.I())
    decreases old_s, parentref, slot, childref
  {
    s := old_s;
    s.ephemeralIndirectionTable.UpperBounded();
    FlushModel.flushCorrect(s.I(), parentref, slot as int, childref, s.cache.I()[childref], s.ephemeralIndirectionTable.refUpperBound);
    var _inout_tmp_0: ImplVariables;
    _inout_tmp_0 := doFlush(inout s, parentref, slot, childref);
    s := _inout_tmp_0;
  }
}
Dafny program verifier did not attempt verification