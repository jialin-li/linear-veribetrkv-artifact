// LeafImpl.i.dfy
module LeafImpl {
  method CopyKey(k: KeyType.Key) returns (k2: KeyType.Key)
  {
    k2 := [] + k;
  }
  method repivotLeafInternal(inout old_s: ImplVariables, ref: BT.G.Reference) returns (s: ImplVariables)
  {
    s := old_s;
    var b: bool := false;
    if s.frozenIndirectionTable.lSome? {
      b := s.frozenIndirectionTable.value.HasEmptyLoc(ref);
    }
    if b {
      print "giving up; repivotLeaf can't run because frozen isn't written";
    } else {
      var bounded: bool := s.cache.NodeBoundedBucket(ref, ref, 0);
      if !bounded {
        print "giving up; repivotLeaf can't run because current leaf is incorrect";
      } else {
        var pivot: KeyType.Key;
        var left: MutBucket, right: MutBucket;
        var pivots: PivotTable := InitPivotTable();
        left, right, pivot := s.cache.NodeSplitMiddle(ref);
        var buckets': lseq<BucketImpl.MutBucket> := lseq_alloc(2);
        var _inout_tmp_0: lseq<BucketImpl.MutBucket>;
        _inout_tmp_0 := lseq_give_inout(inout buckets', 0, left);
        buckets' := _inout_tmp_0;
        var _inout_tmp_1: lseq<BucketImpl.MutBucket>;
        _inout_tmp_1 := lseq_give_inout(inout buckets', 1, right);
        buckets' := _inout_tmp_1;
        pivot := CopyKey(pivot);
        pivots := Insert(pivots, Keyspace.Element(pivot), 1);
        var newnode: Node := Node(pivots, None, buckets');
        var _inout_tmp_2: ImplVariables;
        _inout_tmp_2 := writeBookkeeping(inout s, ref, None);
        s := _inout_tmp_2;
        var _inout_tmp_3: LMutCache;
        _inout_tmp_3 := s.cache.Insert(inout s.cache, ref, newnode);
        s := s.(cache := _inout_tmp_3);
      }
    }
  }
  method repivotLeaf(inout old_s: ImplVariables, ref: BT.G.Reference) returns (s: ImplVariables)
  {
    s := old_s;
    var _inout_tmp_0: ImplVariables;
    _inout_tmp_0 := repivotLeafInternal(inout s, ref);
    s := _inout_tmp_0;
  }
}
Dafny program verifier did not attempt verification