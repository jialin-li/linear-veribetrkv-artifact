// BucketSuccessorLoopImpl.i.dfy
module BucketSuccessorLoopImpl {
  method GetSuccessorInBucketStack(g': Generator, ghost buckets: seq<Bucket>, maxToFind: uint64, start: UI.RangeStart, upTo: Option<Key>)
      returns (res: UI.SuccResultList)
  {
    var g: Generator := g';
    var results: array<UI.SuccResult> := new UI.SuccResult[maxToFind];
    var results_len: uint64 := 0;
    var done: bool := false;
    while !done
    {
      var next: BucketIteratorModel.IteratorOutput := g.GenLeft();
      var okay: bool := next.Next?;
      if okay && upTo.Some? {
        var c: int32 := cmp(next.key, upTo.value);
        if c >= 0 {
          okay := false;
        }
      }
      if okay {
        var v: Value := Merge(next.msg, DefineDefault()).value;
        if v != DefaultValue() {
          results[results_len] := UI.SuccResult(next.key, v);
          results_len := results_len + 1;
          if results_len < maxToFind {
            var _inout_tmp_0: Generator;
            _inout_tmp_0 := g.GenPop(inout g);
            g := _inout_tmp_0;
          } else {
            done := true;
            res := UI.SuccResultList(results[..results_len], UI.EInclusive(next.key));
          }
        } else {
          var _inout_tmp_1: Generator;
          _inout_tmp_1 := g.GenPop(inout g);
          g := _inout_tmp_1;
        }
      } else {
        done := true;
        res := UI.SuccResultList(results[..results_len], if upTo.Some? then UI.EExclusive(upTo.value) else UI.PositiveInf);
      }
    }
    g.Free();
  }
}
Dafny program verifier did not attempt verification