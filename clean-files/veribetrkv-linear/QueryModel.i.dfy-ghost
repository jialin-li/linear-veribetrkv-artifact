// QueryModel.i.dfy
module QueryModel {
  predicate queryInv(s: BBC.Variables, key: Key, msg: Message, ref: BT.G.Reference, io: IO, counter: uint64, lookup: seq<BT.G.ReadOp>)
    decreases s, key, msg, ref, io, counter, lookup
  {
    s.Ready? &&
    BBC.Inv(s) &&
    io.IOInit? &&
    ref in s.ephemeralIndirectionTable.graph &&
    counter >= 0 &&
    (|lookup| == 0 ==>
      ref == BT.G.Root()) &&
    (msg.Define? ==>
      |lookup| > 0) &&
    (|lookup| > 0 ==>
      BT.WFLookupForKey(lookup, key)) &&
    (!msg.Define? ==>
      |lookup| > 0 ==>
        Last(lookup).node.children.Some?) &&
    (!msg.Define? ==>
      |lookup| > 0 ==>
        Last(lookup).node.children.value[Route(Last(lookup).node.pivotTable, key)] == ref) &&
    (forall i: int {:trigger lookup[i]} | 0 <= i < |lookup| :: 
      lookup[i].ref in s.ephemeralIndirectionTable.graph) &&
    (forall i: int {:trigger lookup[i]} | 0 <= i < |lookup| :: 
      MapsTo(s.cache, lookup[i].ref, lookup[i].node)) &&
    (forall i: int {:trigger lookup[i]} | 0 <= i < |lookup| :: 
      BoundedKey(lookup[i].node.pivotTable, key)) &&
    ref in s.ephemeralIndirectionTable.graph &&
    (PBS.LookupVisitsWellMarshalledBuckets(lookup, key) ==>
      msg == BT.InterpretLookup(lookup, key))
  }
  function {:opaque} {:fuel 0, 0} new_lookup(lookup: seq<BT.G.ReadOp>, ref: BT.G.Reference, node: BT.G.Node): seq<BT.G.ReadOp>
    decreases lookup, ref, node
  {
    lookup + [BT.G.ReadOp(ref, node)]
  }
  lemma  AugmentLookup(lookup': seq<BT.G.ReadOp>, lookup: seq<BT.G.ReadOp>, ref: BT.G.Reference, node: BT.G.Node, key: Key, cache: map<BT.G.Reference, BT.G.Node>, graph: map<BT.G.Reference, seq<BT.G.Reference>>)
    requires lookup' == new_lookup(lookup, ref, node)
    requires |lookup| > 0 ==> BT.WFLookupForKey(lookup, key)
    requires forall i: int {:trigger lookup[i]} | 0 <= i < |lookup| :: lookup[i].ref in graph
    requires forall i: int {:trigger lookup[i]} | 0 <= i < |lookup| :: MapsTo(cache, lookup[i].ref, lookup[i].node)
    requires forall i: int {:trigger lookup[i]} | 0 <= i < |lookup| :: BoundedKey(lookup[i].node.pivotTable, key)
    requires |lookup| == 0 ==> ref == BT.G.Root()
    requires |lookup| > 0 ==> Last(lookup).node.children.Some?
    requires |lookup| > 0 ==> Last(lookup).node.children.value[Route(Last(lookup).node.pivotTable, key)] == ref
    requires BT.WFNode(node)
    requires MapsTo(cache, ref, node)
    requires BoundedKey(node.pivotTable, key)
    requires ref in graph
    ensures BT.WFLookupForKey(lookup', key)
    ensures Last(lookup').node == node
    ensures BT.InterpretLookup(lookup', key) == Messages.Merge(BT.InterpretLookup(lookup, key), BT.NodeLookup(node, key))
    ensures forall i: int {:trigger lookup'[i]} | 0 <= i < |lookup'| :: lookup'[i].ref in graph
    ensures forall i: int {:trigger lookup'[i]} | 0 <= i < |lookup'| :: MapsTo(cache, lookup'[i].ref, lookup'[i].node)
    ensures forall i: int {:trigger lookup'[i]} | 0 <= i < |lookup'| :: BoundedKey(lookup'[i].node.pivotTable, key)
    decreases lookup', lookup, ref, node, key, cache, graph
  {
    reveal_new_lookup();
    forall idx: int {:trigger LookupFollowsChildRefAtLayer(key, lookup', idx)} {:trigger BT.ValidLayerIndex(lookup', idx)} | BT.ValidLayerIndex(lookup', idx) && idx < |lookup'| - 1
      ensures LookupFollowsChildRefAtLayer(key, lookup', idx)
    {
      if idx == |lookup'| - 2 {
        assert BT.LookupFollowsChildRefAtLayer(key, lookup', idx);
      } else {
        assert BT.LookupFollowsChildRefAtLayer(key, lookup, idx);
        assert BT.LookupFollowsChildRefAtLayer(key, lookup', idx);
      }
    }
    assert BT.LookupFollowsChildRefs(key, lookup');
  }
}
Dafny program verifier did not attempt verification