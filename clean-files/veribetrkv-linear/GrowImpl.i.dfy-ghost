// GrowImpl.i.dfy
module GrowImpl {
  method doGrow(inout old_s: ImplVariables) returns (s: ImplVariables)
    requires old_s.Inv()
    requires old_s.Ready?
    requires BT.G.Root() in old_s.I().cache
    requires |old_s.ephemeralIndirectionTable.graph| <= IT.MaxSize() - 2
    requires forall r: uint64 {:trigger r in old_s.ephemeralIndirectionTable.graph} | r in old_s.ephemeralIndirectionTable.graph :: r <= old_s.ephemeralIndirectionTable.refUpperBound
    ensures s.W()
    ensures s.Ready?
    ensures s.I() == GrowModel.grow(old_s.I(), old_s.ephemeralIndirectionTable.refUpperBound)
    ensures s.WriteAllocConditions()
    ensures LruModel.I(s.lru.Queue()) == s.cache.I().Keys
    decreases old_s
  {
    s := old_s;
    GrowModel.reveal_grow();
    var root: Reference := BT.G.Root();
    BookkeepingModel.lemmaChildrenConditionsOfNode(s.I(), root);
    var nop: bool := false;
    if s.frozenIndirectionTable.lSome? {
      var b: bool := s.frozenIndirectionTable.value.HasEmptyLoc(root);
      if b {
        print "giving up; grow can't run because frozen isn't written";
        nop := true;
      }
    }
    if !nop {
      var oldpivots: Pivots.PivotTable, oldchildren: Option<seq<BT.G.Reference>> := s.cache.GetNodeInfo(root);
      var containsall: bool := ComputeContainsAllKeys(oldpivots);
      if !containsall {
        print "giving up; grow can't run because root node is incorrect";
        assert old_s.I() == s.I();
      } else {
        var newref: Option<BT.G.Reference>, _inout_tmp_3: ImplVariables := allocBookkeeping(inout s, oldchildren);
        s := _inout_tmp_3;
        match newref {
          case None() =>
            {
              print "giving up; could not allocate ref\n";
              assert old_s.I() == s.I();
            }
          case Some(newref) =>
            {
              WeightBucketEmpty();
              var mutbucket := MutBucket.Alloc();
              var buckets := lseq_alloc(1);
              var _inout_tmp_0;
              _inout_tmp_0 := lseq_give_inout(inout buckets, 0, mutbucket);
              buckets := _inout_tmp_0;
              var newroot := Node(InitPivotTable(), Some([newref]), buckets);
              assert newroot.I() == BT.G.Node(InitPivotTable(), Some([newref]), [EmptyBucket()]);
              assert s.I().cache[root] == old_s.I().cache[root];
              var _inout_tmp_1;
              _inout_tmp_1 := writeBookkeeping(inout s, root, Some([newref]));
              s := _inout_tmp_1;
              var _inout_tmp_2;
              _inout_tmp_2 := s.cache.MoveAndReplace(inout s.cache, root, newref, newroot);
              s := s.(cache := _inout_tmp_2);
              assert LruModel.I(s.lru.Queue()) == s.cache.I().Keys;
            }
        }
      }
    } else {
      assert old_s.I() == s.I();
    }
  }
  method grow(inout old_s: ImplVariables) returns (s: ImplVariables)
    requires old_s.Inv()
    requires old_s.Ready?
    requires BT.G.Root() in old_s.I().cache
    requires |old_s.ephemeralIndirectionTable.graph| <= IT.MaxSize() - 2
    requires old_s.totalCacheSize() <= MaxCacheSize() - 1
    ensures s.WFBCVars() && s.Ready?
    ensures IOModel.betree_next(old_s.I(), s.I())
    decreases old_s
  {
    s := old_s;
    old_s.ephemeralIndirectionTable.UpperBounded();
    GrowModel.growCorrect(s.I(), old_s.ephemeralIndirectionTable.refUpperBound);
    var _inout_tmp_0: ImplVariables;
    _inout_tmp_0 := doGrow(inout s);
    s := _inout_tmp_0;
    assert s.WFBCVars();
  }
}
Dafny program verifier did not attempt verification