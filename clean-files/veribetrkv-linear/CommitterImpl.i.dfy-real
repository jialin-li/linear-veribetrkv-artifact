// CommitterImpl.i.dfy
module CommitterImpl {
  datatype Status = StatusLoadingSuperblock | StatusLoadingOther | StatusReady
  datatype Committer = Committer(status: Status, journalist: JournalistImpl.Journalist, frozenLoc: Option<Location>, isFrozen: bool, frozenJournalPosition: uint64, superblockWrite: Option<JC.ReqId>, outstandingJournalWrites: set<JC.ReqId>, superblock: Superblock, newSuperblock: Option<Superblock>, whichSuperblock: uint64, commitStatus: JC.CommitStatus, journalFrontRead: Option<JC.ReqId>, journalBackRead: Option<JC.ReqId>, superblock1Read: Option<JC.ReqId>, superblock2Read: Option<JC.ReqId>, superblock1: JC.SuperblockReadResult, superblock2: JC.SuperblockReadResult, syncReqs: LinearMutableMap.LinearHashMap<JC.SyncReqStatus>) {
    static method Constructor() returns (self: Committer)
    {
      var j: Journalist := JournalistImpl.Journalist.Constructor();
      var m: LinearHashMap<JC.SyncReqStatus> := LinearMutableMap.Constructor(128);
      self := Committer(StatusLoadingSuperblock, j, None, false, 0, None, {}, Superblock(0, 0, 0, Location(0, 0)), None, 0, JC.CommitStatus.CommitNone, None, None, None, None, JC.SuperblockUnfinished, JC.SuperblockUnfinished, m);
    }
    method journalAppend(inout old_self: Committer, key: Key, value: Value)
        returns (self: Committer)
    {
      self := old_self;
      var je: JournalEntry := JournalInsert(key, value);
      var _inout_tmp_0: Journalist;
      _inout_tmp_0 := self.journalist.append(inout self.journalist, je);
      self := self.(journalist := _inout_tmp_0);
    }
    method journalReplayOne(inout old_self: Committer, ghost je: JournalEntry) returns (self: Committer)
    {
      self := old_self;
      var _inout_tmp_0: Journalist;
      _inout_tmp_0 := self.journalist.replayJournalPop(inout self.journalist);
      self := self.(journalist := _inout_tmp_0);
    }
    method pageInSuperblockReq(inout old_self: Committer, io: DiskIOHandler, which: uint64)
        returns (self: Committer)
      modifies io
    {
      self := old_self;
      var loc: Location;
      if which == 0 {
        loc := Superblock1Location();
        if self.superblock1Read.None? {
          var id: D.ReqId := RequestRead(io, loc);
          var _inout_tmp_0: Option<uint64> := Some(id);
          self := self.(superblock1Read := _inout_tmp_0);
        } else {
          print "PageInSuperblockReq: doing nothing\n";
        }
      } else {
        loc := Superblock2Location();
        if self.superblock2Read.None? {
          var id: D.ReqId := RequestRead(io, loc);
          var _inout_tmp_1: Option<uint64> := Some(id);
          self := self.(superblock2Read := _inout_tmp_1);
        } else {
          print "PageInSuperblockReq: doing nothing\n";
        }
      }
    }
    method finishLoadingSuperblockPhase(inout old_self: Committer) returns (self: Committer)
    {
      self := old_self;
      var idx: uint64 := if JC.increments1(self.superblock1.value.counter, self.superblock2.value.counter) then 1 else 0;
      var sup: Superblock := if idx == 1 then self.superblock2.value else self.superblock1.value;
      var _inout_tmp_0: uint64 := idx;
      self := self.(whichSuperblock := _inout_tmp_0);
      var _inout_tmp_1: Superblock := sup;
      self := self.(superblock := _inout_tmp_1);
      var _inout_tmp_2: Status := StatusLoadingOther;
      self := self.(status := _inout_tmp_2);
      var _inout_tmp_3: Option<uint64> := None;
      self := self.(journalFrontRead := _inout_tmp_3);
      var _inout_tmp_4: Option<uint64> := None;
      self := self.(journalBackRead := _inout_tmp_4);
    }
    method FinishLoadingOtherPhase(inout old_self: Committer) returns (self: Committer)
    {
      self := old_self;
      var success: bool, _inout_tmp_9: Journalist := self.journalist.parseJournals(inout self.journalist);
      self := self.(journalist := _inout_tmp_9);
      if success {
        var _inout_tmp_0: Status := StatusReady;
        self := self.(status := _inout_tmp_0);
        var _inout_tmp_1: Option<Location> := None;
        self := self.(frozenLoc := _inout_tmp_1);
        var _inout_tmp_2: bool := false;
        self := self.(isFrozen := _inout_tmp_2);
        var _inout_tmp_3: uint64 := 0;
        self := self.(frozenJournalPosition := _inout_tmp_3);
        var _inout_tmp_4: Option<uint64> := None;
        self := self.(superblockWrite := _inout_tmp_4);
        var _inout_tmp_5: set<uint64> := {};
        self := self.(outstandingJournalWrites := _inout_tmp_5);
        var _inout_tmp_6: Option<Superblock> := None;
        self := self.(newSuperblock := _inout_tmp_6);
        var _inout_tmp_7: CommitStatus := JC.CommitNone;
        self := self.(commitStatus := _inout_tmp_7);
        var len: uint64 := self.superblock.journalLen;
        var _inout_tmp_8: Journalist;
        _inout_tmp_8 := self.journalist.setWrittenJournalLen(inout self.journalist, len);
        self := self.(journalist := _inout_tmp_8);
      } else {
        print "FinishLoadingOtherPhase: there is replay journal\n";
      }
    }
    function method isReplayEmpty(): (b: bool)
    {
      journalist.isReplayEmpty()
    }
    method PageInJournalReqFront(inout old_self: Committer, io: DiskIOHandler) returns (self: Committer)
      modifies io
    {
      self := old_self;
      var len: uint64 := if self.superblock.journalStart + self.superblock.journalLen >= NumJournalBlocks() then NumJournalBlocks() - self.superblock.journalStart else self.superblock.journalLen;
      var loc: Location := JournalRangeLocation(self.superblock.journalStart, len);
      var id: D.ReqId := RequestRead(io, loc);
      var _inout_tmp_0: Option<uint64> := Some(id);
      self := self.(journalFrontRead := _inout_tmp_0);
      var _inout_tmp_1: Option<uint64> := if self.journalBackRead == Some(id) then None else self.journalBackRead;
      self := self.(journalBackRead := _inout_tmp_1);
    }
    method PageInJournalReqBack(inout old_self: Committer, io: DiskIOHandler) returns (self: Committer)
      modifies io
    {
      self := old_self;
      var len: uint64 := self.superblock.journalStart + self.superblock.journalLen - NumJournalBlocks();
      var loc: Location := JournalRangeLocation(0, len);
      var id: D.ReqId := RequestRead(io, loc);
      var _inout_tmp_0: Option<uint64> := Some(id);
      self := self.(journalBackRead := _inout_tmp_0);
      var _inout_tmp_1: Option<uint64> := if self.journalFrontRead == Some(id) then None else self.journalFrontRead;
      self := self.(journalFrontRead := _inout_tmp_1);
    }
    method pageInJournalResp(inout old_self: Committer, io: DiskIOHandler) returns (self: Committer)
    {
      self := old_self;
      var id: D.ReqId, addr: uint64, bytes: seq<byte> := io.getReadResult();
      var jr: Option<JournalRange> := JournalistParsingImpl.computeJournalRangeOfByteSeq(bytes);
      if jr.Some? {
        if self.journalFrontRead == Some(id) {
          var _inout_tmp_0: Journalist;
          _inout_tmp_0 := self.journalist.setFront(inout self.journalist, jr.value);
          self := self.(journalist := _inout_tmp_0);
          var _inout_tmp_1: Option<uint64> := None;
          self := self.(journalFrontRead := _inout_tmp_1);
        } else if self.journalBackRead == Some(id) {
          var _inout_tmp_2: Journalist;
          _inout_tmp_2 := self.journalist.setBack(inout self.journalist, jr.value);
          self := self.(journalist := _inout_tmp_2);
          var _inout_tmp_3: Option<uint64> := None;
          self := self.(journalBackRead := _inout_tmp_3);
        } else 
      } else 
    }
    method tryFinishLoadingOtherPhase(inout old_self: Committer, io: DiskIOHandler) returns (self: Committer)
      modifies io
    {
      self := old_self;
      var hasFront: bool := self.journalist.hasFront();
      var hasBack: bool := self.journalist.hasBack();
      if self.superblock.journalLen > 0 && !self.journalFrontRead.Some? && !hasFront {
        var _inout_tmp_0: Committer;
        _inout_tmp_0 := self.PageInJournalReqFront(inout self, io);
        self := _inout_tmp_0;
      } else if self.superblock.journalStart + self.superblock.journalLen > NumJournalBlocks() && !self.journalBackRead.Some? && !hasBack {
        var _inout_tmp_1: Committer;
        _inout_tmp_1 := self.PageInJournalReqBack(inout self, io);
        self := _inout_tmp_1;
      } else if (self.superblock.journalLen > 0 ==> hasFront) && (self.superblock.journalStart + self.superblock.journalLen > NumJournalBlocks() ==> hasBack) {
        var _inout_tmp_2: Committer;
        _inout_tmp_2 := self.FinishLoadingOtherPhase(inout self);
        self := _inout_tmp_2;
      } else 
    }
    static function method start_pos_add(a: uint64, b: uint64): uint64
    {
      if a + b >= NumJournalBlocks() then
        a + b - NumJournalBlocks()
      else
        a + b
    }
    method WriteOutJournal(inout old_self: Committer, io: DiskIOHandler) returns (self: Committer)
      modifies io
    {
      self := old_self;
      var writtenJournalLen: uint64 := self.journalist.getWrittenJournalLen();
      var doingFrozen: bool := self.journalist.hasFrozenJournal();
      var j: seq<byte>;
      if doingFrozen {
        var _inout_tmp_0: Journalist;
        j, _inout_tmp_0 := self.journalist.packageFrozenJournal(inout self.journalist);
        self := self.(journalist := _inout_tmp_0);
      } else {
        var _inout_tmp_1: Journalist;
        j, _inout_tmp_1 := self.journalist.packageInMemoryJournal(inout self.journalist);
        self := self.(journalist := _inout_tmp_1);
      }
      var start: uint64 := start_pos_add(self.superblock.journalStart, writtenJournalLen);
      var len: uint64 := |j| as uint64 / 4096;
      var contiguous: bool := start + len <= NumJournalBlocks();
      if contiguous {
        var id: D.ReqId := io.write(JournalPoint(start), j);
        var _inout_tmp_2: set<JC.ReqId> := self.outstandingJournalWrites + {id};
        self := self.(outstandingJournalWrites := _inout_tmp_2);
      } else {
        var cut: uint64 := (NumJournalBlocks() - start) * 4096;
        var id1: D.ReqId, id2: uint64 := io.write2(JournalPoint(start), j[..cut], JournalPoint(0), j[cut..]);
        var _inout_tmp_3: set<JC.ReqId> := self.outstandingJournalWrites + {id1, id2};
        self := self.(outstandingJournalWrites := _inout_tmp_3);
      }
      if doingFrozen {
        var _inout_tmp_4: uint64 := self.journalist.getWrittenJournalLen();
        self := self.(frozenJournalPosition := _inout_tmp_4);
      } else {
        var _inout_tmp_5: LinearMutableMap.LinearHashMap<JC.SyncReqStatus>;
        _inout_tmp_5 := SyncReqs3to2(inout self.syncReqs);
        self := self.(syncReqs := _inout_tmp_5);
      }
    }
    method writeOutSuperblockAdvanceLog(inout old_self: Committer, io: DiskIOHandler) returns (self: Committer)
      modifies io
    {
      self := old_self;
      var writtenJournalLen: uint64 := self.journalist.getWrittenJournalLen();
      var newSuperblock: Superblock := SectorType.Superblock(JC.IncrementSuperblockCounter(self.superblock.counter), self.superblock.journalStart, writtenJournalLen, self.superblock.indirectionTableLoc);
      var loc: Location := if self.whichSuperblock == 0 then Superblock2Location() else Superblock1Location();
      var id: D.ReqId := RequestWrite(io, loc, SSI.SectorSuperblock(newSuperblock));
      var _inout_tmp_0: Option<Superblock> := Some(newSuperblock);
      self := self.(newSuperblock := _inout_tmp_0);
      var _inout_tmp_1: Option<uint64> := Some(id);
      self := self.(superblockWrite := _inout_tmp_1);
      var _inout_tmp_2: CommitStatus := JC.CommitAdvanceLog;
      self := self.(commitStatus := _inout_tmp_2);
    }
    method writeOutSuperblockAdvanceLocation(inout old_self: Committer, io: DiskIOHandler) returns (self: Committer)
      modifies io
    {
      self := old_self;
      var writtenJournalLen: uint64 := self.journalist.getWrittenJournalLen();
      var newSuperblock: Superblock := SectorType.Superblock(JC.IncrementSuperblockCounter(self.superblock.counter), start_pos_add(self.superblock.journalStart, self.frozenJournalPosition), writtenJournalLen - self.frozenJournalPosition, self.frozenLoc.value);
      var loc: Location := if self.whichSuperblock == 0 then Superblock2Location() else Superblock1Location();
      var id: D.ReqId := RequestWrite(io, loc, SSI.SectorSuperblock(newSuperblock));
      var _inout_tmp_0: Option<Superblock> := Some(newSuperblock);
      self := self.(newSuperblock := _inout_tmp_0);
      var _inout_tmp_1: Option<uint64> := Some(id);
      self := self.(superblockWrite := _inout_tmp_1);
      var _inout_tmp_2: CommitStatus := JC.CommitAdvanceLocation;
      self := self.(commitStatus := _inout_tmp_2);
    }
    method freeze(inout old_self: Committer) returns (self: Committer)
    {
      self := old_self;
      var writtenJournalLen: uint64 := self.journalist.getWrittenJournalLen();
      var _inout_tmp_0: Journalist;
      _inout_tmp_0 := self.journalist.freeze(inout self.journalist);
      self := self.(journalist := _inout_tmp_0);
      var _inout_tmp_1: Option<Location> := None;
      self := self.(frozenLoc := _inout_tmp_1);
      var _inout_tmp_2: uint64 := writtenJournalLen;
      self := self.(frozenJournalPosition := _inout_tmp_2);
      var _inout_tmp_3: bool := true;
      self := self.(isFrozen := _inout_tmp_3);
      var _inout_tmp_4: LinearMutableMap.LinearHashMap<JC.SyncReqStatus>;
      _inout_tmp_4 := SyncReqs3to2(inout self.syncReqs);
      self := self.(syncReqs := _inout_tmp_4);
    }
    method receiveFrozenLoc(inout old_self: Committer, loc: Location) returns (self: Committer)
    {
      self := old_self;
      var _inout_tmp_0: Option<Location> := Some(loc);
      self := self.(frozenLoc := _inout_tmp_0);
    }
    method freeId() returns (id: uint64)
    {
      var maxId: uint64 := LinearMutableMap.MaxKey(this.syncReqs);
      if maxId == 18446744073709551615 {
        id := 0;
      } else {
        id := maxId + 1;
      }
    }
    method pushSync(inout old_self: Committer) returns (id: uint64, self: Committer)
    {
      self := old_self;
      id := self.freeId();
      if id != 0 && self.syncReqs.count < 2305843009213693952 {
        var _inout_tmp_0: LinearHashMap<JC.SyncReqStatus>;
        _inout_tmp_0 := LinearMutableMap.Insert(inout self.syncReqs, id, JC.State3);
        self := self.(syncReqs := _inout_tmp_0);
      } else {
        id := 0;
      }
    }
    method popSync(inout old_self: Committer, id: uint64) returns (self: Committer)
    {
      self := old_self;
      var _inout_tmp_0: LinearHashMap<JC.SyncReqStatus>;
      _inout_tmp_0 := LinearMutableMap.Remove(inout self.syncReqs, id);
      self := self.(syncReqs := _inout_tmp_0);
    }
    method tryAdvanceLog(inout old_self: Committer, io: DiskIOHandler)
        returns (wait: bool, self: Committer)
      modifies io
    {
      self := old_self;
      wait := false;
      var hasFrozen: bool := self.journalist.hasFrozenJournal();
      var hasInMem: bool := self.journalist.hasInMemoryJournal();
      if self.superblockWrite.None? {
        if hasFrozen || hasInMem {
          var _inout_tmp_0: Committer;
          _inout_tmp_0 := self.WriteOutJournal(inout self, io);
          self := _inout_tmp_0;
        } else if self.outstandingJournalWrites == {} {
          var _inout_tmp_1: Committer;
          _inout_tmp_1 := self.writeOutSuperblockAdvanceLog(inout self, io);
          self := _inout_tmp_1;
        } else {
          wait := true;
        }
      } else {
        wait := true;
      }
    }
    method tryAdvanceLocation(inout old_self: Committer, io: DiskIOHandler)
        returns (wait: bool, self: Committer)
      modifies io
    {
      self := old_self;
      wait := false;
      var hasFrozen: bool := self.journalist.hasFrozenJournal();
      var hasInMem: bool := self.journalist.hasInMemoryJournal();
      if self.superblockWrite.None? {
        if hasFrozen || hasInMem {
          var _inout_tmp_0: Committer;
          _inout_tmp_0 := self.WriteOutJournal(inout self, io);
          self := _inout_tmp_0;
        } else if self.outstandingJournalWrites == {} {
          var _inout_tmp_1: Committer;
          _inout_tmp_1 := self.writeOutSuperblockAdvanceLocation(inout self, io);
          self := _inout_tmp_1;
        } else {
          wait := true;
        }
      } else {
        wait := true;
      }
    }
    method writeBackSuperblockResp(inout old_self: Committer, ghost io: IO) returns (self: Committer)
    {
      self := old_self;
      if self.status.StatusReady? && self.commitStatus.CommitAdvanceLocation? {
        var writtenJournalLen: uint64 := self.journalist.getWrittenJournalLen();
        var _inout_tmp_0: Option<uint64> := None;
        self := self.(superblockWrite := _inout_tmp_0);
        var _inout_tmp_1: Superblock := self.newSuperblock.value;
        self := self.(superblock := _inout_tmp_1);
        var _inout_tmp_2: Option<Superblock> := None;
        self := self.(newSuperblock := _inout_tmp_2);
        var _inout_tmp_3: uint64 := if self.whichSuperblock == 0 then 1 else 0;
        self := self.(whichSuperblock := _inout_tmp_3);
        var _inout_tmp_4: LinearMutableMap.LinearHashMap<JC.SyncReqStatus>;
        _inout_tmp_4 := SyncReqs2to1(inout self.syncReqs);
        self := self.(syncReqs := _inout_tmp_4);
        var position: uint64 := self.frozenJournalPosition;
        var _inout_tmp_5: Journalist;
        _inout_tmp_5 := self.journalist.updateWrittenJournalLen(inout self.journalist, writtenJournalLen - position);
        self := self.(journalist := _inout_tmp_5);
        var _inout_tmp_6: uint64 := 0;
        self := self.(frozenJournalPosition := _inout_tmp_6);
        var _inout_tmp_7: Option<Location> := None;
        self := self.(frozenLoc := _inout_tmp_7);
        var _inout_tmp_8: bool := false;
        self := self.(isFrozen := _inout_tmp_8);
        var _inout_tmp_9: CommitStatus := JC.CommitNone;
        self := self.(commitStatus := _inout_tmp_9);
      } else if self.status.StatusReady? && self.commitStatus.CommitAdvanceLog? {
        var _inout_tmp_10: Option<uint64> := None;
        self := self.(superblockWrite := _inout_tmp_10);
        var _inout_tmp_11: Superblock := self.newSuperblock.value;
        self := self.(superblock := _inout_tmp_11);
        var _inout_tmp_12: Option<Superblock> := None;
        self := self.(newSuperblock := _inout_tmp_12);
        var _inout_tmp_13: uint64 := if self.whichSuperblock == 0 then 1 else 0;
        self := self.(whichSuperblock := _inout_tmp_13);
        var _inout_tmp_14: LinearMutableMap.LinearHashMap<JC.SyncReqStatus>;
        _inout_tmp_14 := SyncReqs2to1(inout self.syncReqs);
        self := self.(syncReqs := _inout_tmp_14);
        var _inout_tmp_15: CommitStatus := JC.CommitNone;
        self := self.(commitStatus := _inout_tmp_15);
      } else {
        print "writeBackSuperblockResp: didn't do anything\n";
      }
    }
    method writeBackJournalResp(inout old_self: Committer, io: DiskIOHandler) returns (self: Committer)
    {
      self := old_self;
      var id: D.ReqId, addr: uint64, len: uint64 := io.getWriteResult();
      var _inout_tmp_0: set<JC.ReqId> := self.outstandingJournalWrites - {id};
      self := self.(outstandingJournalWrites := _inout_tmp_0);
    }
    method readSuperblockResp(inout old_self: Committer, io: DiskIOHandler, which: uint64)
        returns (self: Committer)
    {
      self := old_self;
      var id: D.ReqId;
      var sector: lOption<SSI.Sector>;
      id, sector := IOImpl.ReadSector(io);
      var res: SuperblockReadResult := if sector.lSome? && sector.value.SectorSuperblock? then JC.SuperblockSuccess(sector.value.superblock) else JC.SuperblockCorruption;
      if which == 0 {
        if Some(id) == self.superblock1Read {
          var _inout_tmp_0: SuperblockReadResult := res;
          self := self.(superblock1 := _inout_tmp_0);
          var _inout_tmp_1: Option<uint64> := None;
          self := self.(superblock1Read := _inout_tmp_1);
        } else {
          print "readSuperblockResp did nothing\n";
        }
      } else {
        if Some(id) == self.superblock2Read {
          var _inout_tmp_2: SuperblockReadResult := res;
          self := self.(superblock2 := _inout_tmp_2);
          var _inout_tmp_3: Option<uint64> := None;
          self := self.(superblock2Read := _inout_tmp_3);
        } else {
          print "readSuperblockResp did nothing\n";
        }
      }
      match sector {
        case lSome(value) =>
          value.Free();
        case lNone() =>
          {
          }
      }
    }
  }
  method SyncReqs2to1(inout old_m: LinearMutableMap.LinearHashMap<JC.SyncReqStatus>) returns (m: LinearMutableMap.LinearHashMap<JC.SyncReqStatus>)
  {
    m := old_m;
    var it: SimpleIterator := LinearMutableMap.SimpleIterStart(m);
    var nextOut: IteratorOutput<JC.SyncReqStatus> := LinearMutableMap.SimpleIterOutput(m, it);
    while !nextOut.Done?
    {
      var value: SyncReqStatus := if nextOut.value == JC.State2 then JC.State1 else nextOut.value;
      var _inout_tmp_0: LinearHashMap<JC.SyncReqStatus>;
      _inout_tmp_0 := LinearMutableMap.UpdateByIter(inout m, it, value);
      m := _inout_tmp_0;
      it := LinearMutableMap.SimpleIterInc(m, it);
      nextOut := LinearMutableMap.SimpleIterOutput(m, it);
    }
  }
  method SyncReqs3to2(inout old_m: LinearMutableMap.LinearHashMap<JC.SyncReqStatus>) returns (m: LinearMutableMap.LinearHashMap<JC.SyncReqStatus>)
  {
    m := old_m;
    var it: SimpleIterator := LinearMutableMap.SimpleIterStart(m);
    var nextOut: IteratorOutput<JC.SyncReqStatus> := LinearMutableMap.SimpleIterOutput(m, it);
    while !nextOut.Done?
    {
      var value: SyncReqStatus := if nextOut.value == JC.State3 then JC.State2 else nextOut.value;
      var _inout_tmp_0: LinearHashMap<JC.SyncReqStatus>;
      _inout_tmp_0 := LinearMutableMap.UpdateByIter(inout m, it, value);
      m := _inout_tmp_0;
      it := LinearMutableMap.SimpleIterInc(m, it);
      nextOut := LinearMutableMap.SimpleIterOutput(m, it);
    }
  }
}
Dafny program verifier did not attempt verification