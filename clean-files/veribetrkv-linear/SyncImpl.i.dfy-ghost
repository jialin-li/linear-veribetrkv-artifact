// SyncImpl.i.dfy
module SyncImpl {
  lemma LemmaAssignRefToLocBitmapConsistent(indirectionTable: IT.IndirectionTable, bm: BitmapModel.BitmapModelT, indirectionTable': IT.IndirectionTable, bm': BitmapModel.BitmapModelT, ref: BT.G.Reference, loc: Location)
    requires indirectionTable.Inv()
    requires forall i: int {:trigger IT.IndirectionTable.IsLocAllocBitmap(bm, i)} {:trigger indirectionTable.I().IsLocAllocIndirectionTable(i)} :: indirectionTable.I().IsLocAllocIndirectionTable(i) <==> IT.IndirectionTable.IsLocAllocBitmap(bm, i)
    requires ValidNodeLocation(loc)
    requires 0 <= loc.addr as int / NodeBlockSize() < NumBlocks()
    requires ref in indirectionTable.graph && ref !in indirectionTable.locs
    requires indirectionTable'.Inv()
    requires indirectionTable'.graph == indirectionTable.graph
    requires indirectionTable'.locs == indirectionTable.locs[ref := loc]
    requires 0 <= loc.addr as int / NodeBlockSize() < NumBlocks()
    requires BitmapModel.Len(bm) == NumBlocks()
    requires bm' == BitmapModel.BitSet(bm, loc.addr as int / NodeBlockSize())
    ensures forall i: int {:trigger IT.IndirectionTable.IsLocAllocBitmap(bm', i)} {:trigger indirectionTable'.I().IsLocAllocIndirectionTable(i)} :: indirectionTable'.I().IsLocAllocIndirectionTable(i) <==> IT.IndirectionTable.IsLocAllocBitmap(bm', i)
    decreases indirectionTable, bm, indirectionTable', bm', ref, loc
  {
    BitmapModel.reveal_BitSet();
    BitmapModel.reveal_IsSet();
    ghost var j: int := loc.addr as int / NodeBlockSize();
    reveal_ValidNodeAddr();
    assert j != 0;
    assert j * NodeBlockSize() == loc.addr as int;
    forall i: int {:trigger IndirectionTable.IsLocAllocBitmap(bm', i)} {:trigger indirectionTable'.I().IsLocAllocIndirectionTable(i)} | indirectionTable'.I().IsLocAllocIndirectionTable(i)
      ensures IndirectionTable.IsLocAllocBitmap(bm', i)
    {
      if i == j {
        assert IT.IndirectionTable.IsLocAllocBitmap(bm', i);
      } else {
        assert indirectionTable.I().IsLocAllocIndirectionTable(i);
        assert IT.IndirectionTable.IsLocAllocBitmap(bm', i);
      }
    }
    forall i: int {:trigger indirectionTable'.I().IsLocAllocIndirectionTable(i)} {:trigger IT.IndirectionTable.IsLocAllocBitmap(bm', i)} | IT.IndirectionTable.IsLocAllocBitmap(bm', i)
      ensures indirectionTable'.I().IsLocAllocIndirectionTable(i)
    {
      if i == j {
        assert ref in indirectionTable'.graph;
        assert ref in indirectionTable'.locs;
        assert indirectionTable'.locs[ref].addr as int == i * NodeBlockSize() as int;
        assert indirectionTable'.I().IsLocAllocIndirectionTable(i);
      } else {
        if 0 <= i < MinNodeBlockIndex() {
          assert indirectionTable'.I().IsLocAllocIndirectionTable(i);
        } else {
          assert indirectionTable.I().IsLocAllocIndirectionTable(i);
          ghost var r: NativeTypes.uint64 :| r in indirectionTable.locs && indirectionTable.locs[r].addr as int == i * NodeBlockSize() as int;
          assert MapsAgreeOnKey(indirectionTable.I().locs, indirectionTable'.I().locs, r);
          assert r in indirectionTable'.locs && indirectionTable'.locs[r].addr as int == i * NodeBlockSize() as int;
          assert indirectionTable'.I().IsLocAllocIndirectionTable(i);
        }
      }
    }
  }
  method AssignRefToLocEphemeral(inout old_s: ImplVariables, ref: BT.G.Reference, loc: Location)
      returns (s: ImplVariables)
    requires old_s.WFBCVars() && old_s.Ready?
    requires old_s.ConsistentBitmap()
    requires ValidNodeLocation(loc)
    requires BlockAllocatorModel.Inv(old_s.blockAllocator.I())
    requires 0 <= loc.addr as int / NodeBlockSize() < NumBlocks()
    ensures s.WFBCVars() && s.Ready?
    ensures s.ConsistentBitmap()
    ensures BlockAllocatorModel.Inv(s.blockAllocator.I())
    ensures var old_gs: BC.Variables := old_s.I(); s.I() == old_gs.(ephemeralIndirectionTable := BC.assignRefToLocation(old_gs.ephemeralIndirectionTable, ref, loc))
    decreases old_s, ref, loc
  {
    s := old_s;
    var added: bool, _inout_tmp_1: IndirectionTable := s.ephemeralIndirectionTable.AddLocIfPresent(inout s.ephemeralIndirectionTable, ref, loc);
    s := s.(ephemeralIndirectionTable := _inout_tmp_1);
    if added {
      var _inout_tmp_0: BlockAllocator;
      _inout_tmp_0 := s.blockAllocator.MarkUsedEphemeral(inout s.blockAllocator, loc.addr / NodeBlockSizeUint64());
      s := s.(blockAllocator := _inout_tmp_0);
    }
    reveal_ConsistentBitmapInteral();
    BitmapModel.reveal_BitSet();
    BitmapModel.reveal_IsSet();
    ghost var j: int := loc.addr as int / NodeBlockSize();
    ghost var table: IT.IndirectionTable := old_s.ephemeralIndirectionTable;
    if ref in table.graph && ref !in table.locs {
      assert added;
      forall i: int {:trigger BitmapModel.IsSet(s.blockAllocator.I().persistent, i)} {:trigger BitmapModel.IsSet(s.blockAllocator.I().frozen.value, i)} {:trigger BitmapModel.IsSet(s.blockAllocator.I().ephemeral, i)} {:trigger BitmapModel.IsSet(s.blockAllocator.I().full, i)} | 0 <= i < NumBlocks()
        ensures BitmapModel.IsSet(s.blockAllocator.I().full, i) == (BitmapModel.IsSet(s.blockAllocator.I().ephemeral, i) || (s.blockAllocator.I().frozen.Some? && BitmapModel.IsSet(s.blockAllocator.I().frozen.value, i)) || BitmapModel.IsSet(s.blockAllocator.I().persistent, i) || BitmapModel.IsSet(s.blockAllocator.I().full, i))
      {
        if i != j {
          assert BitmapModel.IsSet(s.blockAllocator.I().full, i) == BitmapModel.IsSet(old_s.blockAllocator.I().full, i);
          assert BitmapModel.IsSet(s.blockAllocator.I().ephemeral, i) == BitmapModel.IsSet(old_s.blockAllocator.I().ephemeral, i);
          assert s.blockAllocator.I().frozen.Some? ==> BitmapModel.IsSet(s.blockAllocator.I().frozen.value, i) == BitmapModel.IsSet(old_s.blockAllocator.I().frozen.value, i);
          assert BitmapModel.IsSet(s.blockAllocator.I().persistent, i) == BitmapModel.IsSet(old_s.blockAllocator.I().persistent, i);
          assert BitmapModel.IsSet(s.blockAllocator.I().outstanding, i) == BitmapModel.IsSet(old_s.blockAllocator.I().outstanding, i);
        }
      }
      LemmaAssignRefToLocBitmapConsistent(old_s.ephemeralIndirectionTable, old_s.blockAllocator.I().ephemeral, s.ephemeralIndirectionTable, s.blockAllocator.I().ephemeral, ref, loc);
    } else {
      assert !added;
    }
  }
  method AssignRefToLocFrozen(inout old_s: ImplVariables, ref: BT.G.Reference, loc: Location)
      returns (s: ImplVariables)
    requires old_s.WFBCVars() && old_s.Ready?
    requires old_s.frozenIndirectionTable.lSome?
    requires BlockAllocatorModel.Inv(old_s.blockAllocator.I())
    requires 0 <= loc.addr as int / NodeBlockSize() < NumBlocks()
    requires ValidNodeLocation(loc)
    requires old_s.ConsistentBitmap()
    ensures s.WFBCVars() && s.Ready?
    ensures s.frozenIndirectionTable.lSome?
    ensures s.ConsistentBitmap()
    ensures BlockAllocatorModel.Inv(s.blockAllocator.I())
    ensures var old_gs: BC.Variables := old_s.I(); s.I() == old_gs.(frozenIndirectionTable := Some(BC.assignRefToLocation(old_gs.frozenIndirectionTable.value, ref, loc)))
    decreases old_s, ref, loc
  {
    s := old_s;
    reveal_ConsistentBitmapInteral();
    BitmapModel.reveal_BitSet();
    BitmapModel.reveal_IsSet();
    ghost var j: int := loc.addr as int / NodeBlockSize();
    var added: bool, _inout_tmp_1: IndirectionTable := s.frozenIndirectionTable.value.AddLocIfPresent(inout s.frozenIndirectionTable.value, ref, loc);
    s := s.(frozenIndirectionTable := s.frozenIndirectionTable.(value := _inout_tmp_1));
    if added {
      var _inout_tmp_0: BlockAllocator;
      _inout_tmp_0 := s.blockAllocator.MarkUsedFrozen(inout s.blockAllocator, loc.addr / NodeBlockSizeUint64());
      s := s.(blockAllocator := _inout_tmp_0);
      forall i: int {:trigger BitmapModel.IsSet(s.blockAllocator.I().persistent, i)} {:trigger BitmapModel.IsSet(s.blockAllocator.I().frozen.value, i)} {:trigger BitmapModel.IsSet(s.blockAllocator.I().ephemeral, i)} {:trigger BitmapModel.IsSet(s.blockAllocator.I().full, i)} | 0 <= i < NumBlocks()
        ensures BitmapModel.IsSet(s.blockAllocator.I().full, i) == (BitmapModel.IsSet(s.blockAllocator.I().ephemeral, i) || (s.blockAllocator.I().frozen.Some? && BitmapModel.IsSet(s.blockAllocator.I().frozen.value, i)) || BitmapModel.IsSet(s.blockAllocator.I().persistent, i) || BitmapModel.IsSet(s.blockAllocator.I().full, i))
      {
        if i != j {
          assert BitmapModel.IsSet(s.blockAllocator.I().full, i) == BitmapModel.IsSet(old_s.blockAllocator.I().full, i);
          assert BitmapModel.IsSet(s.blockAllocator.I().ephemeral, i) == BitmapModel.IsSet(old_s.blockAllocator.I().ephemeral, i);
          assert s.blockAllocator.I().frozen.Some? ==> BitmapModel.IsSet(s.blockAllocator.I().frozen.value, i) == BitmapModel.IsSet(old_s.blockAllocator.I().frozen.value, i);
          assert BitmapModel.IsSet(s.blockAllocator.I().persistent, i) == BitmapModel.IsSet(old_s.blockAllocator.I().persistent, i);
          assert BitmapModel.IsSet(s.blockAllocator.I().outstanding, i) == BitmapModel.IsSet(old_s.blockAllocator.I().outstanding, i);
        }
      }
      LemmaAssignRefToLocBitmapConsistent(old_s.frozenIndirectionTable.value, old_s.blockAllocator.I().frozen.value, s.frozenIndirectionTable.value, s.blockAllocator.I().frozen.value, ref, loc);
      assert s.blockAllocator.frozen.lSome? <==> s.blockAllocator.I().frozen.Some? by {
        reveal s.blockAllocator.I();
      }
    }
  }
  method AssignIdRefLocOutstanding(inout old_s: ImplVariables, id: D.ReqId, ref: BT.G.Reference, loc: Location)
      returns (s: ImplVariables)
    requires old_s.WFBCVars() && old_s.Ready?
    requires BlockAllocatorModel.Inv(old_s.blockAllocator.I())
    requires 0 <= loc.addr as int / NodeBlockSize() < NumBlocks()
    requires old_s.ConsistentBitmap()
    requires ValidNodeLocation(loc)
    requires BC.AllOutstandingBlockWritesDontOverlap(old_s.outstandingBlockWrites)
    requires BC.OutstandingWriteValidNodeLocation(old_s.outstandingBlockWrites)
    ensures s.WFBCVars() && s.Ready?
    ensures s.ConsistentBitmap()
    ensures BlockAllocatorModel.Inv(s.blockAllocator.I())
    ensures var old_gs: BC.Variables := old_s.I(); s.I() == old_gs.(outstandingBlockWrites := old_gs.outstandingBlockWrites[id := BC.OutstandingWrite(ref, loc)])
    decreases old_s, id, ref, loc
  {
    s := old_s;
    reveal_ConsistentBitmapInteral();
    BitmapModel.reveal_BitUnset();
    BitmapModel.reveal_BitSet();
    BitmapModel.reveal_IsSet();
    if id in s.outstandingBlockWrites {
      var numBlocks: uint64 := s.outstandingBlockWrites[id].loc.addr / NodeBlockSizeUint64();
      if numBlocks < NumBlocksUint64() {
        var _inout_tmp_0: BlockAllocator;
        _inout_tmp_0 := s.blockAllocator.MarkFreeOutstanding(inout s.blockAllocator, numBlocks);
        s := s.(blockAllocator := _inout_tmp_0);
      }
    }
    var _inout_tmp_1: map<BC.ReqId, BC.OutstandingWrite> := s.outstandingBlockWrites[id := BC.OutstandingWrite(ref, loc)];
    s := s.(outstandingBlockWrites := _inout_tmp_1);
    var _inout_tmp_2: BlockAllocator;
    _inout_tmp_2 := s.blockAllocator.MarkUsedOutstanding(inout s.blockAllocator, loc.addr / NodeBlockSizeUint64());
    s := s.(blockAllocator := _inout_tmp_2);
    ghost var j: int := loc.addr as int / NodeBlockSize();
    reveal_ValidNodeAddr();
    assert j != 0;
    assert j * NodeBlockSize() == loc.addr as int;
    forall i: int {:trigger IndirectionTable.IsLocAllocBitmap(s.blockAllocator.I().outstanding, i)} {:trigger IsLocAllocOutstanding(s.outstandingBlockWrites, i)} | IsLocAllocOutstanding(s.outstandingBlockWrites, i)
      ensures IndirectionTable.IsLocAllocBitmap(s.blockAllocator.I().outstanding, i)
    {
      if id in old_s.outstandingBlockWrites && old_s.outstandingBlockWrites[id].loc.addr as int / NodeBlockSize() < NumBlocks() && i == old_s.outstandingBlockWrites[id].loc.addr as int / NodeBlockSize() {
        if i == j {
          assert IT.IndirectionTable.IsLocAllocBitmap(s.blockAllocator.I().outstanding, i);
        } else {
          ghost var id0: uint64 :| id0 in s.outstandingBlockWrites && s.outstandingBlockWrites[id0].loc.addr as int == i * NodeBlockSize() as int;
          assert ValidNodeAddr(old_s.outstandingBlockWrites[id0].loc.addr);
          assert ValidNodeAddr(old_s.outstandingBlockWrites[id].loc.addr);
          assert old_s.outstandingBlockWrites[id0].loc.addr as int == i * NodeBlockSize() as int == old_s.outstandingBlockWrites[id].loc.addr as int;
          assert id == id0;
          assert false;
        }
      } else if i != j {
        assert IsLocAllocOutstanding(old_s.outstandingBlockWrites, i);
        assert IT.IndirectionTable.IsLocAllocBitmap(old_s.blockAllocator.I().outstanding, i);
        assert IT.IndirectionTable.IsLocAllocBitmap(s.blockAllocator.I().outstanding, i);
      } else {
        assert IT.IndirectionTable.IsLocAllocBitmap(s.blockAllocator.I().outstanding, i);
      }
    }
    forall i: int {:trigger IsLocAllocOutstanding(s.outstandingBlockWrites, i)} {:trigger IT.IndirectionTable.IsLocAllocBitmap(s.blockAllocator.I().outstanding, i)} | IT.IndirectionTable.IsLocAllocBitmap(s.blockAllocator.I().outstanding, i)
      ensures IsLocAllocOutstanding(s.outstandingBlockWrites, i)
    {
      if i != j {
        assert IT.IndirectionTable.IsLocAllocBitmap(old_s.blockAllocator.I().outstanding, i);
        assert IsLocAllocOutstanding(old_s.outstandingBlockWrites, i);
        ghost var id0: uint64 :| id0 in old_s.outstandingBlockWrites && old_s.outstandingBlockWrites[id0].loc.addr as int == i * NodeBlockSize() as int;
        assert id0 != id;
        assert id0 in s.outstandingBlockWrites;
        assert s.outstandingBlockWrites[id0].loc.addr as int == i * NodeBlockSize() as int;
        assert IsLocAllocOutstanding(s.outstandingBlockWrites, i);
      } else {
        assert id in s.outstandingBlockWrites;
        assert s.outstandingBlockWrites[id].loc.addr as int == i * NodeBlockSize() as int;
        assert IsLocAllocOutstanding(s.outstandingBlockWrites, i);
      }
    }
  }
  method {:fuel BC.GraphClosed, 0} {:fuel BC.CacheConsistentWithSuccessors, 0} maybeFreeze(inout old_s: ImplVariables, io: DiskIOHandler)
      returns (froze: bool, s: ImplVariables)
    requires io.initialized()
    requires old_s.Inv() && old_s.Ready?
    requires old_s.outstandingIndirectionTableWrite.None?
    requires old_s.frozenIndirectionTable.lNone?
    modifies io
    ensures s.WFBCVars()
    ensures ValidDiskOp(diskOp(IIO(io)))
    ensures IDiskOp(diskOp(IIO(io))).jdop.NoDiskOp?
    ensures froze ==> BBC.Next(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, FreezeOp)
    ensures !froze ==> BBC.Next(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, StatesInternalOp) || BBC.Next(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, AdvanceOp(UI.NoOp, true))
    decreases old_s, io
  {
    s := old_s;
    var foundDeallocable: Option<Reference> := FindDeallocable(s);
    if foundDeallocable.Some? {
      var _inout_tmp_0: ImplVariables;
      _inout_tmp_0 := Dealloc(inout s, io, foundDeallocable.value);
      s := _inout_tmp_0;
      froze := false;
    } else {
      var Ready(persistentIndirectionTable: IT.IndirectionTable, frozenIndirectionTable: lOption<IT.IndirectionTable>, ephemeralIndirectionTable: IT.IndirectionTable, persistentIndirectionTableLoc: DiskLayout.Location, frozenIndirectionTableLoc: Option<DiskLayout.Location>, outstandingIndirectionTableWrite: Option<BC.ReqId>, outstandingBlockWrites: map<BC.ReqId, BC.OutstandingWrite>, outstandingBlockReads: map<BC.ReqId, BC.OutstandingRead>, cache: LMutCache, lru: LinearLru.LinearLru, blockAllocator: BlockAllocatorImpl.BlockAllocator) := s;
      var clonedEphemeralIndirectionTable: IndirectionTable := ephemeralIndirectionTable.Clone();
      dispose_lnone(frozenIndirectionTable);
      frozenIndirectionTable := lSome(clonedEphemeralIndirectionTable);
      s := Ready(persistentIndirectionTable, frozenIndirectionTable, ephemeralIndirectionTable, persistentIndirectionTableLoc, frozenIndirectionTableLoc, outstandingIndirectionTableWrite, outstandingBlockWrites, outstandingBlockReads, cache, lru, blockAllocator);
      var _inout_tmp_1: BlockAllocator;
      _inout_tmp_1 := s.blockAllocator.CopyEphemeralToFrozen(inout s.blockAllocator);
      s := s.(blockAllocator := _inout_tmp_1);
      froze := true;
      reveal ConsistentBitmapInteral();
      assert s.WFBCVars();
      assert BC.Freeze(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, FreezeOp);
      assert BBC.BlockCacheMove(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, FreezeOp, BC.FreezeStep);
      assert IOModel.stepsBC(old_s.I(), s.I(), FreezeOp, IIO(io), BC.FreezeStep);
    }
  }
  method TryToWriteBlock(inout old_s: ImplVariables, io: DiskIOHandler, ref: BT.G.Reference)
      returns (s: ImplVariables)
    requires old_s.Ready? && old_s.Inv()
    requires io.initialized()
    requires ref in old_s.cache.I()
    requires old_s.outstandingIndirectionTableWrite.None?
    modifies io
    ensures s.WFBCVars() && s.Ready?
    ensures ValidDiskOp(diskOp(IIO(io)))
    ensures IDiskOp(diskOp(IIO(io))).jdop.NoDiskOp?
    ensures BBC.Next(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, StatesInternalOp)
    decreases old_s, io, ref
  {
    s := old_s;
    var placeholder: Node := Node.EmptyNode();
    var node: Node, _inout_tmp_3: LMutCache := s.cache.ReplaceAndGet(inout s.cache, ref, placeholder);
    s := s.(cache := _inout_tmp_3);
    var sector: Sector := SectorNode(node);
    assert |s.cache.I()| <= 65536;
    assert s.cache.ptr(ref).Some?;
    var id: Option<D.ReqId>, loc: Option<Location> := FindLocationAndRequestWrite(io, s, sector);
    var SectorNode(n: Node) := sector;
    var replaced: Node, _inout_tmp_4: LMutCache := s.cache.ReplaceAndGet(inout s.cache, ref, n);
    s := s.(cache := _inout_tmp_4);
    var _: () := FreeNode(replaced);
    assert s.cache.I() == old_s.cache.I();
    if id.Some? {
      reveal_ConsistentBitmapInteral();
      var _inout_tmp_1: ImplVariables;
      _inout_tmp_1 := AssignRefToLocEphemeral(inout s, ref, loc.value);
      s := _inout_tmp_1;
      var _inout_tmp_2: ImplVariables;
      _inout_tmp_2 := AssignIdRefLocOutstanding(inout s, id.value, ref, loc.value);
      s := _inout_tmp_2;
      if s.frozenIndirectionTable.lSome? {
        var _inout_tmp_0: ImplVariables;
        _inout_tmp_0 := AssignRefToLocFrozen(inout s, ref, loc.value);
        s := _inout_tmp_0;
      }
      assert ValidNodeLocation(IDiskOp(diskOp(IIO(io))).bdop.reqWriteNode.loc);
      assert BC.WriteBackNodeReq(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, StatesInternalOp, ref);
      assert IOModel.stepsBC(old_s.I(), s.I(), StatesInternalOp, IIO(io), BC.WriteBackNodeReqStep(ref));
    } else {
      print "sync: giving up; write req failed\n";
      assert IOModel.noop(s.I(), s.I());
    }
  }
  method {:fuel BC.GraphClosed, 0} syncFoundInFrozen(inout old_s: ImplVariables, io: DiskIOHandler, ref: Reference)
      returns (s: ImplVariables)
    requires io.initialized()
    requires old_s.Ready? && old_s.Inv()
    requires old_s.outstandingIndirectionTableWrite.None?
    requires old_s.frozenIndirectionTable.lSome?
    requires ref in old_s.frozenIndirectionTable.value.I().graph
    requires ref !in old_s.frozenIndirectionTable.value.I().locs
    modifies io
    ensures s.Ready? && s.WFBCVars()
    ensures ValidDiskOp(diskOp(IIO(io)))
    ensures IDiskOp(diskOp(IIO(io))).jdop.NoDiskOp?
    ensures BBC.Next(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, StatesInternalOp)
    decreases old_s, io, ref
  {
    s := old_s;
    assert ref in s.frozenIndirectionTable.value.I().graph;
    assert ref !in s.frozenIndirectionTable.value.I().locs;
    var ephemeralRef: Option<Entry> := s.ephemeralIndirectionTable.GetEntry(ref);
    if ephemeralRef.Some? && ephemeralRef.value.loc.Some? {
      print "sync: giving up; ref already in ephemeralIndirectionTable.locs but not frozen";
      assert IOModel.noop(old_s.I(), s.I());
    } else {
      var _inout_tmp_0: ImplVariables;
      _inout_tmp_0 := TryToWriteBlock(inout s, io, ref);
      s := _inout_tmp_0;
    }
  }
  method {:fuel BC.GraphClosed, 0} sync(inout old_s: ImplVariables, io: DiskIOHandler)
      returns (froze: bool, wait: bool, s: ImplVariables)
    requires old_s.Ready? && old_s.Inv()
    requires io.initialized()
    modifies io
    ensures s.Ready? && s.WFBCVars()
    ensures ValidDiskOp(diskOp(IIO(io)))
    ensures IDiskOp(diskOp(IIO(io))).jdop.NoDiskOp?
    ensures old_s.frozenIndirectionTable.lSome? ==> !froze
    ensures froze ==> BBC.Next(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, FreezeOp)
    ensures !froze ==> BBC.Next(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, StatesInternalOp) || BBC.Next(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, AdvanceOp(UI.NoOp, true))
    decreases old_s, io
  {
    s := old_s;
    wait := false;
    froze := false;
    if s.frozenIndirectionTableLoc.Some? {
      wait := true;
      assert IOModel.noop(old_s.I(), s.I());
    } else if s.frozenIndirectionTable.lNone? {
      var _inout_tmp_0: ImplVariables;
      froze, _inout_tmp_0 := maybeFreeze(inout s, io);
      s := _inout_tmp_0;
    } else {
      var foundInFrozen: Option<BT.G.Reference>, _inout_tmp_4: IndirectionTable := s.frozenIndirectionTable.value.FindRefWithNoLoc(inout s.frozenIndirectionTable.value);
      s := s.(frozenIndirectionTable := s.frozenIndirectionTable.(value := _inout_tmp_4));
      assert s.Inv();
      if foundInFrozen.Some? {
        var _inout_tmp_1: ImplVariables;
        _inout_tmp_1 := syncFoundInFrozen(inout s, io, foundInFrozen.value);
        s := _inout_tmp_1;
      } else if s.outstandingBlockWrites != map[] {
        wait := true;
        assert IOModel.noop(old_s.I(), s.I());
      } else {
        var id: Option<D.ReqId>, loc: Option<Location> := FindIndirectionTableLocationAndRequestWrite(io, s, SectorIndirectionTable(s.frozenIndirectionTable.value));
        if id.Some? {
          var _inout_tmp_2: Option<D.ReqId> := id;
          s := s.(outstandingIndirectionTableWrite := _inout_tmp_2);
          var _inout_tmp_3: Option<Location> := loc;
          s := s.(frozenIndirectionTableLoc := _inout_tmp_3);
          assert BC.WriteBackIndirectionTableReq(old_s.I(), s.I(), IDiskOp(diskOp(IIO(io))).bdop, StatesInternalOp);
          assert IOModel.stepsBC(old_s.I(), s.I(), StatesInternalOp, IIO(io), BC.WriteBackIndirectionTableReqStep);
        } else {
          print "sync: giving up; write back indirection table failed (no id)\n";
          assert IOModel.noop(old_s.I(), s.I());
        }
      }
    }
  }
}
Dafny program verifier did not attempt verification