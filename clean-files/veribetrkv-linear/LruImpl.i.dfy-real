/home/root/veribetrkv-linear/lib/DataStructures/LruImpl.i.dfy(88,4): Warning: the 'protected' modifier is no longer supported; to restrict access from outside the module, use a 'provides' clause in the module's export set; if you're trying to add conjuncts to a predicate in a refinement module, see Test/dafny3/CachedContainer.dfy, Test/dafny2/StoreAndRetrieve.dfy, and Test/dafny2/MonotonicHeapstate.dfy in the Dafny test suite on github
/home/root/veribetrkv-linear/lib/DataStructures/LruImpl.i.dfy(15,9): Error: module MutableMap does not exist
// LruImpl.i.dfy
module LruImpl {
  class Node {
    var prev: Node?
    var next: Node?
    var value: uint64
    constructor (p: Node?, n: Node?, v: uint64)
    {
      prev := p;
      next := n;
      value := v;
    }
  }
  class LruImplQueue {
    ghost var Queue: LruQueue
    ghost var Repr: set<object>
    var nodemap: MutableMap.ResizingHashMap<Node>
    var head_node: Node?
    var tail_node: Node?
    constructor ()
    {
      var m := new MutableMap.ResizingHashMap<Node>(128);
      nodemap := m;
      head_node := null;
      tail_node := null;
      Queue := [];
      Repr := {this} + m.Repr + m.Contents.Values;
    }
    method Remove(x: uint64)
      modifies this, this.Repr
    {
      var node := nodemap.RemoveAndGet(x);
      if node.Some? {
        var prev := node.value.prev;
        var next := node.value.next;
        if j > 0 {
        }
        if j < |Queue| - 1 {
        }
        if prev == null {
          head_node := next;
        } else {
          prev.next := next;
        }
        if next == null {
          tail_node := prev;
        } else {
          next.prev := prev;
        }
        Repr := {this} + nodemap.Repr + nodemap.I().contents.Values;
        Queue := LruModel.Remove(Queue, x);
        forall k | 0 <= k < |Queue|
        {
          reveal_distinct();
          if k < j {
          } else {
          }
        }
        forall ref | ref in nodemap.I().contents
        {
          var k :| 0 <= k < |oldQueue| && oldQueue[k] == ref;
          if k < j {
          } else {
          }
        }
        forall k | 0 <= k < |Queue| - 1
        {
          if k < j - 1 {
          } else if k == j - 1 {
          } else {
          }
        }
        forall i | 0 <= i < |Queue| - 1
        {
          if i < j - 1 {
          } else if i == j - 1 {
          } else {
          }
        }
      } else {
        lemmaRemoveNonPresentKeyFromQueue(Queue, x);
        forall k | 0 <= k < |Queue| - 1
        {
        }
        forall i | 0 <= i < |Queue| - 1
        {
        }
      }
      LruRemove(oldQueue, x);
    }
    method Use(x: uint64)
      modifies this, this.Repr
    {
      LemmaMapCountEqInterpCount();
      var node := nodemap.Get(x);
      if node.Some? {
        var prev := node.value.prev;
        var next := node.value.next;
        if j > 0 {
        }
        if j < |Queue| - 1 {
        }
        if next != null {
          if prev == null {
            head_node := next;
          } else {
            prev.next := next;
          }
          next.prev := prev;
          node.value.prev := tail_node;
          node.value.next := null;
          if tail_node != null {
            tail_node.next := node.value;
          } else {
            head_node := node.value;
          }
          tail_node := node.value;
          Repr := {this} + nodemap.Repr + nodemap.I().contents.Values;
          Queue := LruModel.Remove(Queue, x) + [x];
          forall i | 0 <= i < |Queue| - 1
          {
            if i == |Queue| - 2 {
            } else if i == j - 1 {
            } else if i < j - 1 {
            } else {
            }
          }
          forall k | 0 <= k < |Queue| - 1
          {
            if k < j - 1 {
            } else if k == j - 1 {
            } else {
            }
          }
        } else {
          Repr := {this} + nodemap.Repr + nodemap.I().contents.Values;
          Queue := LruModel.Remove(Queue, x) + [x];
        }
      } else {
        lemmaRemoveNonPresentKeyFromQueue(Queue, x);
        var newnode := new Node(tail_node, null, x);
        if tail_node != null {
          tail_node.next := newnode;
        } else {
          head_node := newnode;
        }
        tail_node := newnode;
        nodemap.Insert(x, newnode);
        Repr := {this} + nodemap.Repr + nodemap.I().contents.Values;
        Queue := oldQueue + [x];
        forall ref | ref in nodemap.I().contents
        {
        }
        forall i | 0 <= i < |Queue|
        {
          if i == |Queue| - 1 {
          } else {
          }
        }
      }
      LruUse(oldQueue, x);
    }
    method Next() returns (x: uint64)
    {
      LemmaQueueCountEqInterpCount(Queue);
      x := head_node.value;
    }
    method NextOpt() returns (x: Option<uint64>)
    {
      LruModel.reveal_NextOpt();
      LemmaQueueCountEqInterpCount(Queue);
      if head_node != null {
        x := Some(head_node.value);
      } else {
        x := None;
      }
    }
    method Count() returns (count: uint64)
    {
      if this == null {
        count := 0;
        return;
      }
      var ptr: Node? := head_node;
      count := 0;
      while ptr != null
      {
        count := count + 1;
        ptr := ptr.next;
      }
    }
    method DebugAccumulate() returns (acc: DebugAccumulator.DebugAccumulator)
    {
      var nodeCount := Count();
      var r := new DebugAccumulator.AccRec(nodeCount, "Node");
      acc := DebugAccumulator.AccPut(acc, "t", r);
    }
  }
}
1 resolution/type errors detected in LruImpl.i.dfy