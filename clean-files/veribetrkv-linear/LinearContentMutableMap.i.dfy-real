// LinearContentMutableMap.i.dfy
module LinearContentMutableMap {
    reveals LinearHashMap, FixedSizeLinearHashMap, IsConstructor, UnderlyingInv, lItem, IsRealloc, Uint64SlotForKey, UnderlyingContentsMatchesContents, LinearHashMap.Inv, IsConstructorFromSize, Inv0
    reveals LinearHashMap, FixedSizeLinearHashMap, IsConstructor, UnderlyingInv, lItem, IsRealloc, Uint64SlotForKey, UnderlyingContentsMatchesContents, LinearHashMap.Inv, IsConstructorFromSize, Inv0
  datatype   lItem<V> = Empty | Entry(key: uint64, value: V) | Tombstone(key: uint64) {
    method FreeNonEntry()
    {
      match this {
        case Empty() =>
        case Tombstone(key) =>
      }
    }
  }
  datatype   FixedSizeLinearHashMap<V> = FixedSizeLinearHashMap(storage: lseq<lItem<V>>, count: uint64, ghost contents: map<uint64, Option<V>>)
  datatype   LinearHashMap<V> = LinearHashMap(underlying: FixedSizeLinearHashMap<V>, count: uint64, ghost contents: map<uint64, V>) {
  }
  function method Uint64SlotForKey<V>(self: FixedSizeLinearHashMap<V>, key: uint64): (result: uint64)
  {
    var h: uint64 := hash64(key);
    var storageLength: uint64 := lseq_length_as_uint64(self.storage);
    h % storageLength as uint64
  }
  method ConstructorFromSize<V>(size: uint64) returns (self: FixedSizeLinearHashMap<V>)
  {
    var storage: lseq<lItem<V>> := lseq_alloc(size);
    var i: uint64 := 0 as uint64;
    while i < size
    {
      var item: lItem<V> := lItem.Empty();
      var _inout_tmp_0: lseq<lItem<V>>;
      _inout_tmp_0 := lseq_give_inout(inout storage, i, item);
      storage := _inout_tmp_0;
      i := i + 1;
    }
    self := FixedSizeLinearHashMap(storage, 0, map[]);
  }
  method {:timeLimitMultiplier 4}  Probe<V>(self: FixedSizeLinearHashMap<V>, key: uint64)
      returns (slotIdx: uint64, ghost startSlotIdx: uint64, ghost skips: uint64)
  {
    slotIdx := Uint64SlotForKey(self, key);
    while true
    {
      var entry: lItem<V> := lseq_peek(self.storage, slotIdx);
      if entry.Empty? || (entry.Tombstone? && entry.key == key) {
        return;
      } else if entry.key == key {
        return;
      }
      slotIdx := Uint64SlotSuccessorUint64(lseq_length_as_uint64(self.storage), slotIdx);
    }
  }
  method FixedSizeInsert<V>(inout old_self: FixedSizeLinearHashMap<V>, key: uint64, value: V)
      returns (replaced: lOption<V>, self: FixedSizeLinearHashMap<V>)
  {
    self := old_self;
    var entry: lItem<V> := lItem.Entry(key, value);
    var _inout_tmp_0: FixedSizeLinearHashMap<V>;
    replaced, _inout_tmp_0 := FixedSizeInsertEntry(inout self, entry);
    self := _inout_tmp_0;
  }
  method FixedSizeInsertEntry<V>(inout old_self: FixedSizeLinearHashMap<V>, entry: lItem<V>)
      returns (replaced: lOption<V>, self: FixedSizeLinearHashMap<V>)
  {
    self := old_self;
    var slotIdx: uint64;
    slotIdx, probeStartSlotIdx, probeSkips := Probe(self, entry.key);
    var olditem: lItem<V>, _inout_tmp_2: lseq<lItem<V>> := lseq_take_inout(inout self.storage, slotIdx);
    self := self.(storage := _inout_tmp_2);
    var _inout_tmp_3: lseq<lItem<V>>;
    _inout_tmp_3 := lseq_give_inout(inout self.storage, slotIdx, entry);
    self := self.(storage := _inout_tmp_3);
    if olditem.Empty? {
      olditem.FreeNonEntry();
      var _inout_tmp_0: uint64 := self.count + 1;
      self := self.(count := _inout_tmp_0);
      replaced := lNone;
    } else if olditem.Tombstone? {
      olditem.FreeNonEntry();
      replaced := lNone;
    } else {
      var Entry(_: uint64, value: V) := olditem;
      replaced := lSome(value);
    }
  }
  method FixedSizeUpdateBySlot<V>(inout old_self: FixedSizeLinearHashMap<V>, slotIdx: uint64, value: V)
      returns (replaced: V, self: FixedSizeLinearHashMap<V>)
  {
    self := old_self;
    var entry: lItem<V>, _inout_tmp_0: lseq<lItem<V>> := lseq_take_inout(inout self.storage, slotIdx);
    self := self.(storage := _inout_tmp_0);
    var Entry(key: uint64, oldvalue: V) := entry;
    var _inout_tmp_1: lseq<lItem<V>>;
    _inout_tmp_1 := lseq_give_inout(inout self.storage, slotIdx, lItem.Entry(key, value));
    self := self.(storage := _inout_tmp_1);
    replaced := oldvalue;
  }
  method IsEntry<V>(self: FixedSizeLinearHashMap<V>, key: uint64) returns (b: bool)
  {
    b := lseq_peek(self.storage, slotIdx).Entry?;
  }
  method FixedSizeGet<V>(self: FixedSizeLinearHashMap<V>, key: uint64) returns (found: V)
  {
    found := lseq_peek(self.storage, slotIdx).value;
  }
  method FixedSizeRemove<V>(inout old_self: FixedSizeLinearHashMap<V>, key: uint64)
      returns (removed: lOption<V>, self: FixedSizeLinearHashMap<V>)
  {
    self := old_self;
    var slotIdx: uint64;
    slotIdx, probeStartSlotIdx, probeSkips := Probe(self, key);
    if lseq_peek(self.storage, slotIdx).Entry? {
      var item: lItem<V>, _inout_tmp_0: lseq<lItem<V>> := lseq_take_inout(inout self.storage, slotIdx);
      self := self.(storage := _inout_tmp_0);
      var _inout_tmp_1: lseq<lItem<V>>;
      _inout_tmp_1 := lseq_give_inout(inout self.storage, slotIdx, lItem.Tombstone(key));
      self := self.(storage := _inout_tmp_1);
      var Entry(_: uint64, value: V) := item;
      removed := lSome(value);
    } else {
      removed := lNone;
    }
  }
  method Constructor<V>(size: uint64) returns (self: LinearHashMap<V>)
  {
    var fixed: FixedSizeLinearHashMap<V> := ConstructorFromSize(size);
    self := LinearHashMap(fixed, 0, map[]);
  }
  method {:timeLimitMultiplier 16}  Realloc<V>(inout old_self: LinearHashMap<V>) returns (self: LinearHashMap<V>)
  {
    self := old_self;
    var newSize: uint64 := (128 + self.count) * 4;
    var newUnderlying: FixedSizeLinearHashMap<V> := ConstructorFromSize(newSize);
    var i: uint64 := 0 as uint64;
    var size: uint64 := lseq_length_as_uint64(self.underlying.storage);
    while i < size
    {
      var item: lItem<V>, _inout_tmp_1: lseq<lItem<V>> := lseq_take_inout(inout self.underlying.storage, i);
      self := self.(underlying := self.underlying.(storage := _inout_tmp_1));
      if item.Entry? {
        var replaced: lOption<V>, _inout_tmp_0: FixedSizeLinearHashMap<V> := FixedSizeInsertEntry(inout newUnderlying, item);
        newUnderlying := _inout_tmp_0;
      } else {
        item.FreeNonEntry();
      }
      i := i + 1;
    }
    var oldUnderlying: FixedSizeLinearHashMap<V>, _inout_tmp_2: FixedSizeLinearHashMap<V> := Replace(inout self.underlying, newUnderlying);
    self := self.(underlying := _inout_tmp_2);
    var FixedSizeLinearHashMap(oldstorage: lseq<lItem<V>>, _: uint64, _: map<uint64, Option<V>>) := oldUnderlying;
    lseq_free(oldstorage);
  }
  method Insert<V>(inout old_self: LinearHashMap<V>, key: uint64, value: V)
      returns (replaced: lOption<V>, self: LinearHashMap<V>)
  {
    self := old_self;
    var len: uint64 := lseq_length_as_uint64(self.underlying.storage);
    if len / 2 <= self.underlying.count {
      var _inout_tmp_0: LinearHashMap<V>;
      _inout_tmp_0 := Realloc(inout self);
      self := _inout_tmp_0;
    }
    var _inout_tmp_2: FixedSizeLinearHashMap<V>;
    replaced, _inout_tmp_2 := FixedSizeInsert(inout self.underlying, key, value);
    self := self.(underlying := _inout_tmp_2);
    if replaced.lNone? {
      var _inout_tmp_1: uint64 := self.count + 1;
      self := self.(count := _inout_tmp_1);
    }
  }
  method Remove<V>(inout old_self: LinearHashMap<V>, key: uint64)
      returns (removed: lOption<V>, self: LinearHashMap<V>)
  {
    self := old_self;
    var _inout_tmp_1: FixedSizeLinearHashMap<V>;
    removed, _inout_tmp_1 := FixedSizeRemove(inout self.underlying, key);
    self := self.(underlying := _inout_tmp_1);
    if removed.lSome? {
      var _inout_tmp_0: uint64 := self.count - 1;
      self := self.(count := _inout_tmp_0);
    }
  }
  method Get<V>(self: LinearHashMap<V>, key: uint64) returns (result: V)
  {
    result := FixedSizeGet(self.underlying, key);
  }
}
Dafny program verifier did not attempt verification