// BookkeepingModel.i.dfy
module BookkeepingModel {
  type Node = BT.G.Node
  predicate RefAvailable(s: BBC.Variables, ref: BT.G.Reference)
    decreases s, ref
  {
    s.Ready? &&
    ref !in s.ephemeralIndirectionTable.graph &&
    ref !in s.cache &&
    ref != BT.G.Root()
  }
  function getFreeRefIterate(s: BBC.Variables, i: uint64): (ref: Option<BT.G.Reference>)
    requires s.Ready?
    requires i >= 1
    requires forall r: uint64 {:trigger r in s.ephemeralIndirectionTable.graph} | r in s.ephemeralIndirectionTable.graph :: r < i
    ensures ref.Some? ==> RefAvailable(s, ref.value)
    decreases 18446744073709551616 - i as int
  {
    if i !in s.cache then
      Some(i)
    else if i == 18446744073709551615 then
      None
    else
      getFreeRefIterate(s, i + 1)
  }
  function {:opaque} {:fuel 0, 0} getFreeRef(s: BBC.Variables, refUpperBound: uint64): (ref: Option<BT.G.Reference>)
    requires s.Ready?
    requires forall r: uint64 {:trigger r in s.ephemeralIndirectionTable.graph} | r in s.ephemeralIndirectionTable.graph :: r <= refUpperBound
    ensures ref.Some? ==> RefAvailable(s, ref.value)
    decreases s, refUpperBound
  {
    ghost var i: uint64 := refUpperBound;
    if i == 18446744073709551615 then
      None
    else
      getFreeRefIterate(s, i + 1)
  }
  function getFreeRef2Iterate(s: BBC.Variables, avoid: BT.G.Reference, i: uint64): (ref: Option<BT.G.Reference>)
    requires s.Ready?
    requires i >= 1
    requires forall r: uint64 {:trigger r in s.ephemeralIndirectionTable.graph} | r in s.ephemeralIndirectionTable.graph :: r < i
    ensures ref.Some? ==> RefAvailable(s, ref.value)
    ensures ref.Some? ==> ref.value != avoid
    decreases 18446744073709551616 - i as int
  {
    if i != avoid && i !in s.cache then
      Some(i)
    else if i == 18446744073709551615 then
      None
    else
      getFreeRef2Iterate(s, avoid, i + 1)
  }
  function {:opaque} {:fuel 0, 0} getFreeRef2(s: BBC.Variables, avoid: BT.G.Reference, refUpperBound: uint64): (ref: Option<BT.G.Reference>)
    requires s.Ready?
    requires forall r: uint64 {:trigger r in s.ephemeralIndirectionTable.graph} | r in s.ephemeralIndirectionTable.graph :: r <= refUpperBound
    ensures ref.Some? ==> RefAvailable(s, ref.value)
    ensures ref.Some? ==> ref.value != avoid
    decreases s, avoid, refUpperBound
  {
    ghost var i: uint64 := refUpperBound;
    if i == 18446744073709551615 then
      None
    else
      getFreeRef2Iterate(s, avoid, i + 1)
  }
  predicate ChildrenConditions(s: BBC.Variables, succs: Option<seq<BT.G.Reference>>)
    requires s.Ready?
    decreases s, succs
  {
    succs.Some? ==>
      |succs.value| <= MaxNumChildren() &&
      IT.IndirectionTable.SuccsValid(succs.value, s.ephemeralIndirectionTable.graph)
  }
  lemma lemmaIndirectionTableLocIndexValid(s: BBC.Variables, ref: BT.G.Reference)
    requires s.WriteAllocConditions()
    ensures ref in s.ephemeralIndirectionTable.locs ==> true && s.ephemeralIndirectionTable.locs[ref].addr as int / NodeBlockSize() * NodeBlockSize() == s.ephemeralIndirectionTable.locs[ref].addr as int
    decreases s, ref
  {
    if ref in s.ephemeralIndirectionTable.locs {
      ghost var loc: Location := s.ephemeralIndirectionTable.locs[ref];
      ghost var i: int := loc.addr as int / NodeBlockSize();
      assert s.ephemeralIndirectionTable.locs[ref] == loc;
      assert loc in s.ephemeralIndirectionTable.locs.Values;
      assert DiskLayout.ValidNodeLocation(loc);
      DiskLayout.reveal_ValidNodeAddr();
      assert i * NodeBlockSize() == loc.addr as int;
    }
  }
  function {:opaque} {:fuel 0, 0} writeBookkeeping(s: BBC.Variables, ref: BT.G.Reference, children: Option<seq<BT.G.Reference>>): (s': BBC.Variables)
    requires s.WriteAllocConditions()
    requires ChildrenConditions(s, children)
    ensures s'.Ready?
    ensures s'.cache == s.cache
    ensures s'.WriteAllocConditions()
    ensures |s'.ephemeralIndirectionTable.graph| <= |s.ephemeralIndirectionTable.graph| + 1
    decreases s, ref, children
  {
    ghost var succs: seq<BT.G.Reference> := if children.Some? then children.value else [];
    ghost var eph: IndirectionTable := s.ephemeralIndirectionTable.(graph := s.ephemeralIndirectionTable.graph[ref := succs]).(locs := MapRemove1(s.ephemeralIndirectionTable.locs, ref));
    ghost var s': BC.Variables := s.(ephemeralIndirectionTable := eph);
    s'
  }
  function {:opaque} {:fuel 0, 0} allocBookkeeping(s: BBC.Variables, children: Option<seq<BT.G.Reference>>, refUpperBound: uint64): (p: (BBC.Variables, Option<BT.G.Reference>))
    requires s.WriteAllocConditions()
    requires ChildrenConditions(s, children)
    requires forall r: uint64 {:trigger r in s.ephemeralIndirectionTable.graph} | r in s.ephemeralIndirectionTable.graph :: r <= refUpperBound
    ensures var (s': BC.Variables, id: Option<BT.G.Reference>) := p; s'.Ready? && s'.WriteAllocConditions() && |s'.ephemeralIndirectionTable.graph| <= |s.ephemeralIndirectionTable.graph| + 1
    decreases s, children, refUpperBound
  {
    ghost var ref: Option<BT.G.Reference> := getFreeRef(s, refUpperBound);
    if ref.Some? then
      (writeBookkeeping(s, ref.value, children), ref)
    else
      (s, None)
  }
  function {:opaque} {:fuel 0, 0} writeBookkeepingNoSuccsUpdate(s: BBC.Variables, ref: BT.G.Reference): (s': BBC.Variables)
    requires s.WriteAllocConditions()
    requires ref in s.ephemeralIndirectionTable.graph
    ensures s'.Ready?
    ensures s'.cache == s.cache
    ensures s'.WriteAllocConditions()
    ensures |s'.ephemeralIndirectionTable.graph| <= |s.ephemeralIndirectionTable.graph| + 1
    decreases s, ref
  {
    ghost var eph: IndirectionTable := s.ephemeralIndirectionTable.(locs := MapRemove1(s.ephemeralIndirectionTable.locs, ref));
    ghost var s': BC.Variables := s.(ephemeralIndirectionTable := eph);
    assert s'.WriteAllocConditions();
    s'
  }
  function writeWithNode(s: BBC.Variables, ref: BT.G.Reference, node: Node): (s': BBC.Variables)
    requires s.WriteAllocConditions()
    requires ChildrenConditions(s, node.children)
    ensures s'.WriteAllocConditions()
    ensures |s'.ephemeralIndirectionTable.graph| <= |s.ephemeralIndirectionTable.graph| + 1
    decreases s, ref, node
  {
    ghost var succs: seq<Reference> := if node.children.Some? then node.children.value else [];
    ghost var table: IndirectionTable := s.ephemeralIndirectionTable;
    ghost var eph: IndirectionTable := table.(graph := table.graph[ref := succs]).(locs := MapRemove1(table.locs, ref));
    ghost var s': BC.Variables := s.(ephemeralIndirectionTable := eph).(cache := s.cache[ref := node]);
    assert s'.WriteAllocConditions();
    s'
  }
  function allocWithNode(s: BBC.Variables, node: Node, refUpperBound: uint64): (p: (BBC.Variables, Option<BT.G.Reference>))
    requires s.WriteAllocConditions()
    requires ChildrenConditions(s, node.children)
    requires forall r: uint64 {:trigger r in s.ephemeralIndirectionTable.graph} | r in s.ephemeralIndirectionTable.graph :: r <= refUpperBound
    ensures var (s': BC.Variables, id: Option<BT.G.Reference>) := p; s'.WriteAllocConditions() && |s'.ephemeralIndirectionTable.graph| <= |s.ephemeralIndirectionTable.graph| + 1
    decreases s, node, refUpperBound
  {
    ghost var ref: Option<BT.G.Reference> := getFreeRef(s, refUpperBound);
    if ref.Some? then
      (writeWithNode(s, ref.value, node), ref)
    else
      (s, None)
  }
  lemma writeBookkeepingBitmapCorrect(s: BBC.Variables, ref: BT.G.Reference, children: Option<seq<BT.G.Reference>>)
    requires s.WriteAllocConditions()
    requires ChildrenConditions(s, children)
    ensures ghost var s': BC.Variables := writeBookkeeping(s, ref, children); true && s'.WriteAllocConditions()
    decreases s, ref, children
  {
  }
  lemma allocCorrect(s: BBC.Variables, node: Node, refUpperBound: uint64)
    requires BBC.Inv(s)
    requires s.WriteAllocConditions()
    requires BC.BlockPointsToValidReferences(node, s.ephemeralIndirectionTable.graph)
    requires forall r: uint64 {:trigger r in s.ephemeralIndirectionTable.graph} | r in s.ephemeralIndirectionTable.graph :: r <= refUpperBound
    requires BT.WFNode(node)
    ensures var (s': BC.Variables, ref: Option<BT.G.Reference>) := allocWithNode(s, node, refUpperBound); BBC.Inv(s') && (ref.Some? ==> BC.Alloc(s, s', ref.value, node)) && (ref.None? ==> s' == s) && (ref.Some? ==> s'.totalCacheSize() == s.totalCacheSize() + 1) && s'.WriteAllocConditions()
    decreases s, node, refUpperBound
  {
    ghost var ref: Option<BT.G.Reference> := getFreeRef(s, refUpperBound);
    if ref.Some? {
      lemmaIndirectionTableLocIndexValid(s, ref.value);
      reveal_writeBookkeeping();
    }
  }
  lemma writeCorrect(s: BBC.Variables, ref: BT.G.Reference, node: Node)
    requires s.Ready?
    requires BBC.Inv(s)
    requires s.WriteAllocConditions()
    requires ref in s.ephemeralIndirectionTable.graph
    requires ref in s.cache
    requires BT.WFNode(node)
    requires BC.BlockPointsToValidReferences(node, s.ephemeralIndirectionTable.graph)
    requires s.frozenIndirectionTable.Some? && ref in s.frozenIndirectionTable.value.graph ==> ref in s.frozenIndirectionTable.value.locs
    ensures ghost var s': BC.Variables := writeWithNode(s, ref, node); BBC.Inv(s') && BC.Dirty(s, s', ref, node) && s'.totalCacheSize() == s.totalCacheSize() && s'.WriteAllocConditions()
    decreases s, ref, node
  {
    WeightBucketEmpty();
    reveal_writeBookkeeping();
  }
  lemma writeNewRefIsAlloc(s: BBC.Variables, ref: BT.G.Reference, node: Node)
    requires s.Ready?
    requires s.WriteAllocConditions()
    requires RefAvailable(s, ref)
    requires BT.WFNode(node)
    requires BC.WFIndirectionTable(s.ephemeralIndirectionTable)
    requires BC.BlockPointsToValidReferences(node, s.ephemeralIndirectionTable.graph)
    ensures ghost var s': BC.Variables := writeWithNode(s, ref, node); BC.Alloc(s, s', ref, node) && s'.totalCacheSize() == s.totalCacheSize() + 1 && s'.WriteAllocConditions()
    decreases s, ref, node
  {
    writeBookkeepingBitmapCorrect(s, ref, node.children);
  }
  lemma lemmaChildInGraph(s: BBC.Variables, ref: BT.G.Reference, childref: BT.G.Reference)
    requires s.Ready?
    requires BBC.Inv(s)
    requires ref in s.cache
    requires ref in s.ephemeralIndirectionTable.graph
    requires childref in BT.G.Successors(s.cache[ref])
    ensures childref in s.ephemeralIndirectionTable.graph
    decreases s, ref, childref
  {
    assert childref in s.ephemeralIndirectionTable.graph[ref];
  }
  lemma lemmaBlockPointsToValidReferences(s: BBC.Variables, ref: BT.G.Reference)
    requires BBC.Inv(s)
    requires s.Ready?
    requires ref in s.cache
    requires ref in s.ephemeralIndirectionTable.graph
    ensures BC.BlockPointsToValidReferences(s.cache[ref], s.ephemeralIndirectionTable.graph)
    decreases s, ref
  {
    ghost var node: G.Node := s.cache[ref];
    ghost var graph: map<ReferenceType.Reference, seq<ReferenceType.Reference>> := s.ephemeralIndirectionTable.graph;
    forall r: NativeTypes.uint64 {:trigger r in graph} {:trigger r in BT.G.Successors(node)} | r in BT.G.Successors(node)
      ensures r in graph
    {
      lemmaChildInGraph(s, ref, r);
    }
  }
  lemma  getFreeRefIterateDoesntEqual(s: BBC.Variables, i: uint64, ref: BT.G.Reference)
    requires s.Ready?
    requires ref in s.cache
    requires i >= 1
    requires forall r: uint64 {:trigger r in s.ephemeralIndirectionTable.graph} | r in s.ephemeralIndirectionTable.graph :: r < i
    ensures getFreeRefIterate(s, i) != Some(ref)
    decreases 18446744073709551616 - i as int
  {
    if i !in s.cache {
    } else if i == 18446744073709551615 {
    } else {
      getFreeRefIterateDoesntEqual(s, i + 1, ref);
    }
  }
  lemma getFreeRefDoesntEqual(s: BBC.Variables, ref: BT.G.Reference, refUpperBound: uint64)
    requires s.Ready?
    requires ref in s.cache
    requires forall r: uint64 {:trigger r in s.ephemeralIndirectionTable.graph} | r in s.ephemeralIndirectionTable.graph :: r <= refUpperBound
    ensures getFreeRef(s, refUpperBound) != Some(ref)
    decreases s, ref, refUpperBound
  {
    reveal_getFreeRef();
    ghost var i: uint64 := refUpperBound;
    if i == 18446744073709551615 {
    } else {
      getFreeRefIterateDoesntEqual(s, i + 1, ref);
    }
  }
  lemma  getFreeRef2IterateDoesntEqual(s: BBC.Variables, avoid: BT.G.Reference, i: uint64, ref: BT.G.Reference)
    requires s.Ready?
    requires ref in s.cache
    requires i >= 1
    requires forall r: uint64 {:trigger r in s.ephemeralIndirectionTable.graph} | r in s.ephemeralIndirectionTable.graph :: r < i
    ensures getFreeRef2Iterate(s, avoid, i) != Some(ref)
    decreases 18446744073709551616 - i as int
  {
    if i != avoid && i !in s.cache {
    } else if i == 18446744073709551615 {
    } else {
      getFreeRef2IterateDoesntEqual(s, avoid, i + 1, ref);
    }
  }
  lemma getFreeRef2DoesntEqual(s: BBC.Variables, avoid: BT.G.Reference, ref: BT.G.Reference, refUpperBound: uint64)
    requires s.Ready?
    requires ref in s.cache
    requires forall r: uint64 {:trigger r in s.ephemeralIndirectionTable.graph} | r in s.ephemeralIndirectionTable.graph :: r <= refUpperBound
    ensures getFreeRef2(s, avoid, refUpperBound) != Some(ref)
    decreases s, avoid, ref, refUpperBound
  {
    reveal_getFreeRef2();
    ghost var i: uint64 := refUpperBound;
    if i == 18446744073709551615 {
    } else {
      getFreeRef2IterateDoesntEqual(s, avoid, i + 1, ref);
    }
  }
  lemma allocRefDoesntEqual(s: BBC.Variables, children: Option<seq<BT.G.Reference>>, ref: BT.G.Reference, refUpperBound: uint64)
    requires allocBookkeeping.requires(s, children, refUpperBound)
    requires ref in s.cache
    ensures allocBookkeeping(s, children, refUpperBound).1 != Some(ref)
    decreases s, children, ref, refUpperBound
  {
    reveal_allocBookkeeping();
    getFreeRefDoesntEqual(s, ref, refUpperBound);
  }
  lemma lemmaChildrenConditionsOfNode(s: BBC.Variables, ref: BT.G.Reference)
    requires s.Ready?
    requires BBC.Inv(s)
    requires ref in s.cache
    requires ref in s.ephemeralIndirectionTable.graph
    ensures ChildrenConditions(s, s.cache[ref].children)
    decreases s, ref
  {
    if s.cache[ref].children.Some? {
      forall r: NativeTypes.uint64 {:trigger r in s.ephemeralIndirectionTable.graph} {:trigger r in s.cache[ref].children.value} | r in s.cache[ref].children.value
        ensures r in s.ephemeralIndirectionTable.graph
      {
        assert r in BT.G.Successors(s.cache[ref]);
        assert r in s.ephemeralIndirectionTable.graph[ref];
      }
    }
  }
  lemma lemmaChildrenConditionsSingleOfAllocBookkeeping(s: BBC.Variables, children: Option<seq<BT.G.Reference>>, refUpperBound: uint64)
    requires s.WriteAllocConditions()
    requires ChildrenConditions(s, children)
    requires forall r: uint64 {:trigger r in s.ephemeralIndirectionTable.graph} | r in s.ephemeralIndirectionTable.graph :: r <= refUpperBound
    ensures var (s1: BBC.Variables, newref: Option<BT.G.Reference>) := allocBookkeeping(s, children, refUpperBound); newref.Some? ==> ChildrenConditions(s1, Some([newref.value]))
    decreases s, children, refUpperBound
  {
    reveal_allocBookkeeping();
    reveal_writeBookkeeping();
  }
  lemma lemmaChildrenConditionsUpdateOfAllocBookkeeping(s: BBC.Variables, children: Option<seq<BT.G.Reference>>, children1: seq<BT.G.Reference>, i: int, refUpperBound: uint64)
    requires s.WriteAllocConditions()
    requires ChildrenConditions(s, children)
    requires ChildrenConditions(s, Some(children1))
    requires forall r: uint64 {:trigger r in s.ephemeralIndirectionTable.graph} | r in s.ephemeralIndirectionTable.graph :: r <= refUpperBound
    requires 0 <= i < |children1|
    ensures var (s1: BBC.Variables, newref: Option<BT.G.Reference>) := allocBookkeeping(s, children, refUpperBound); newref.Some? ==> ChildrenConditions(s1, Some(children1[i := newref.value]))
    decreases s, children, children1, i, refUpperBound
  {
    reveal_allocBookkeeping();
    reveal_writeBookkeeping();
  }
  lemma lemmaChildrenConditionsPreservedWriteBookkeeping(s: BBC.Variables, ref: BT.G.Reference, children: Option<seq<BT.G.Reference>>, children1: Option<seq<BT.G.Reference>>)
    requires s.WriteAllocConditions()
    requires ChildrenConditions(s, children)
    requires ChildrenConditions(s, children1)
    ensures ghost var s1: BBC.Variables := writeBookkeeping(s, ref, children); ChildrenConditions(s1, children1)
    decreases s, ref, children, children1
  {
    reveal_writeBookkeeping();
  }
  lemma lemmaChildrenConditionsOfReplace1With2(s: BBC.Variables, children: seq<BT.G.Reference>, i: int, a: BT.G.Reference, b: BT.G.Reference)
    requires s.Ready?
    requires ChildrenConditions(s, Some(children))
    requires a in s.ephemeralIndirectionTable.graph
    requires b in s.ephemeralIndirectionTable.graph
    requires 0 <= i < |children|
    requires |children| < MaxNumChildren()
    ensures ChildrenConditions(s, Some(replace1with2(children, a, b, i)))
    decreases s, children, i, a, b
  {
    reveal_replace1with2();
  }
  lemma lemmaRefInGraphOfWriteBookkeeping(s: BBC.Variables, ref: BT.G.Reference, children: Option<seq<BT.G.Reference>>)
    requires s.WriteAllocConditions()
    requires ChildrenConditions(s, children)
    ensures ghost var s1: BC.Variables := writeBookkeeping(s, ref, children); ref in s1.ephemeralIndirectionTable.graph
    decreases s, ref, children
  {
    reveal_writeBookkeeping();
  }
  lemma lemmaRefInGraphPreservedWriteBookkeeping(s: BBC.Variables, ref: BT.G.Reference, children: Option<seq<BT.G.Reference>>, ref2: BT.G.Reference)
    requires s.WriteAllocConditions()
    requires ChildrenConditions(s, children)
    requires ref2 in s.ephemeralIndirectionTable.graph
    ensures ghost var s1: BC.Variables := writeBookkeeping(s, ref, children); ref2 in s1.ephemeralIndirectionTable.graph
    decreases s, ref, children, ref2
  {
    reveal_writeBookkeeping();
  }
}
Dafny program verifier did not attempt verification